
target/mos：     文件格式 elf32-tradlittlemips
target/mos


Disassembly of section .tlb_miss_entry:

80000000 <tlb_miss_entry>:
tlb_miss_entry():
/home/git/21373271/21373271/kern/entry.S:6
#include <asm/asm.h>
#include <stackframe.h>

.section .text.tlb_miss_entry
tlb_miss_entry:
	j       exc_gen_entry
80000000:	08000020 	j	80000080 <exc_gen_entry>
80000004:	00000000 	nop

Disassembly of section .exc_gen_entry:

80000080 <exc_gen_entry>:
exc_gen_entry():
/home/git/21373271/21373271/kern/entry.S:10

.section .text.exc_gen_entry
exc_gen_entry:
	SAVE_ALL
80000080:	03a0d025 	move	k0,sp
80000084:	07a00002 	bltz	sp,80000090 <exc_gen_entry+0x10>
80000088:	00000000 	nop
8000008c:	3c1d8040 	lui	sp,0x8040
80000090:	27bdff68 	addiu	sp,sp,-152
80000094:	afba0074 	sw	k0,116(sp)
80000098:	401a6000 	mfc0	k0,c0_sr
8000009c:	afba0080 	sw	k0,128(sp)
800000a0:	401a6800 	mfc0	k0,c0_cause
800000a4:	afba0090 	sw	k0,144(sp)
800000a8:	401a7000 	mfc0	k0,c0_epc
800000ac:	afba0094 	sw	k0,148(sp)
800000b0:	401a4000 	mfc0	k0,c0_badvaddr
800000b4:	afba008c 	sw	k0,140(sp)
800000b8:	0000d010 	mfhi	k0
800000bc:	afba0084 	sw	k0,132(sp)
800000c0:	0000d012 	mflo	k0
800000c4:	afba0088 	sw	k0,136(sp)
800000c8:	afa00000 	sw	zero,0(sp)
800000cc:	afa10004 	sw	at,4(sp)
800000d0:	afa20008 	sw	v0,8(sp)
800000d4:	afa3000c 	sw	v1,12(sp)
800000d8:	afa40010 	sw	a0,16(sp)
800000dc:	afa50014 	sw	a1,20(sp)
800000e0:	afa60018 	sw	a2,24(sp)
800000e4:	afa7001c 	sw	a3,28(sp)
800000e8:	afa80020 	sw	t0,32(sp)
800000ec:	afa90024 	sw	t1,36(sp)
800000f0:	afaa0028 	sw	t2,40(sp)
800000f4:	afab002c 	sw	t3,44(sp)
800000f8:	afac0030 	sw	t4,48(sp)
800000fc:	afad0034 	sw	t5,52(sp)
80000100:	afae0038 	sw	t6,56(sp)
80000104:	afaf003c 	sw	t7,60(sp)
80000108:	afb00040 	sw	s0,64(sp)
8000010c:	afb10044 	sw	s1,68(sp)
80000110:	afb20048 	sw	s2,72(sp)
80000114:	afb3004c 	sw	s3,76(sp)
80000118:	afb40050 	sw	s4,80(sp)
8000011c:	afb50054 	sw	s5,84(sp)
80000120:	afb60058 	sw	s6,88(sp)
80000124:	afb7005c 	sw	s7,92(sp)
80000128:	afb80060 	sw	t8,96(sp)
8000012c:	afb90064 	sw	t9,100(sp)
80000130:	afba0068 	sw	k0,104(sp)
80000134:	afbb006c 	sw	k1,108(sp)
80000138:	afbc0070 	sw	gp,112(sp)
8000013c:	afbe0078 	sw	s8,120(sp)
80000140:	afbf007c 	sw	ra,124(sp)
/home/git/21373271/21373271/kern/entry.S:12
/* Exercise 3.9: Your code here. */
	mfc0 t0, CP0_CAUSE
80000144:	40086800 	mfc0	t0,c0_cause
80000148:	00000000 	nop
/home/git/21373271/21373271/kern/entry.S:13
	andi t0, 0x7c
8000014c:	3108007c 	andi	t0,t0,0x7c
/home/git/21373271/21373271/kern/entry.S:14
	lw t0, exception_handlers(t0)
80000150:	3c018002 	lui	at,0x8002
80000154:	00280821 	addu	at,at,t0
80000158:	8c289660 	lw	t0,-27040(at)
8000015c:	00000000 	nop
/home/git/21373271/21373271/kern/entry.S:15
	jr t0
80000160:	01000008 	jr	t0
80000164:	00000000 	nop

Disassembly of section .text:

80010000 <elf_from>:
elf_from():
/home/git/21373271/21373271/lib/elfloader.c:4
#include <elf.h>
#include <pmap.h>

const Elf32_Ehdr *elf_from(const void *binary, size_t size) {
80010000:	27bdfff0 	addiu	sp,sp,-16
80010004:	afbe000c 	sw	s8,12(sp)
80010008:	03a0f025 	move	s8,sp
8001000c:	afc40010 	sw	a0,16(s8)
80010010:	afc50014 	sw	a1,20(s8)
/home/git/21373271/21373271/lib/elfloader.c:5
	const Elf32_Ehdr *ehdr = (const Elf32_Ehdr *)binary;
80010014:	8fc20010 	lw	v0,16(s8)
80010018:	00000000 	nop
8001001c:	afc20000 	sw	v0,0(s8)
/home/git/21373271/21373271/lib/elfloader.c:6
	if (size >= sizeof(Elf32_Ehdr) && ehdr->e_ident[EI_MAG0] == ELFMAG0 &&
80010020:	8fc20014 	lw	v0,20(s8)
80010024:	00000000 	nop
80010028:	2c420034 	sltiu	v0,v0,52
8001002c:	14400022 	bnez	v0,800100b8 <elf_from+0xb8>
80010030:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:6 (discriminator 1)
80010034:	8fc20000 	lw	v0,0(s8)
80010038:	00000000 	nop
8001003c:	90430000 	lbu	v1,0(v0)
80010040:	2402007f 	li	v0,127
80010044:	1462001c 	bne	v1,v0,800100b8 <elf_from+0xb8>
80010048:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:7 (discriminator 2)
	    ehdr->e_ident[EI_MAG1] == ELFMAG1 && ehdr->e_ident[EI_MAG2] == ELFMAG2 &&
8001004c:	8fc20000 	lw	v0,0(s8)
80010050:	00000000 	nop
80010054:	90430001 	lbu	v1,1(v0)
/home/git/21373271/21373271/lib/elfloader.c:6 (discriminator 2)
	if (size >= sizeof(Elf32_Ehdr) && ehdr->e_ident[EI_MAG0] == ELFMAG0 &&
80010058:	24020045 	li	v0,69
8001005c:	14620016 	bne	v1,v0,800100b8 <elf_from+0xb8>
80010060:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:7
	    ehdr->e_ident[EI_MAG1] == ELFMAG1 && ehdr->e_ident[EI_MAG2] == ELFMAG2 &&
80010064:	8fc20000 	lw	v0,0(s8)
80010068:	00000000 	nop
8001006c:	90430002 	lbu	v1,2(v0)
80010070:	2402004c 	li	v0,76
80010074:	14620010 	bne	v1,v0,800100b8 <elf_from+0xb8>
80010078:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:8 (discriminator 1)
	    ehdr->e_ident[EI_MAG3] == ELFMAG3 && ehdr->e_type == 2) {
8001007c:	8fc20000 	lw	v0,0(s8)
80010080:	00000000 	nop
80010084:	90430003 	lbu	v1,3(v0)
/home/git/21373271/21373271/lib/elfloader.c:7 (discriminator 1)
	    ehdr->e_ident[EI_MAG1] == ELFMAG1 && ehdr->e_ident[EI_MAG2] == ELFMAG2 &&
80010088:	24020046 	li	v0,70
8001008c:	1462000a 	bne	v1,v0,800100b8 <elf_from+0xb8>
80010090:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:8
	    ehdr->e_ident[EI_MAG3] == ELFMAG3 && ehdr->e_type == 2) {
80010094:	8fc20000 	lw	v0,0(s8)
80010098:	00000000 	nop
8001009c:	94430010 	lhu	v1,16(v0)
800100a0:	24020002 	li	v0,2
800100a4:	14620004 	bne	v1,v0,800100b8 <elf_from+0xb8>
800100a8:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:9
		return ehdr;
800100ac:	8fc20000 	lw	v0,0(s8)
800100b0:	10000002 	b	800100bc <elf_from+0xbc>
800100b4:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:11
	}
	return NULL;
800100b8:	00001025 	move	v0,zero
/home/git/21373271/21373271/lib/elfloader.c:12
}
800100bc:	03c0e825 	move	sp,s8
800100c0:	8fbe000c 	lw	s8,12(sp)
800100c4:	27bd0010 	addiu	sp,sp,16
800100c8:	03e00008 	jr	ra
800100cc:	00000000 	nop

800100d0 <elf_load_seg>:
elf_load_seg():
/home/git/21373271/21373271/lib/elfloader.c:25
 *
 * Post-Condition:
 *   Return 0 if success. Otherwise return < 0.
 *   If success, the entry point of `binary` will be stored in `start`
 */
int elf_load_seg(Elf32_Phdr *ph, const void *bin, elf_mapper_t map_page, void *data) {
800100d0:	27bdffa0 	addiu	sp,sp,-96
800100d4:	afbf005c 	sw	ra,92(sp)
800100d8:	afbe0058 	sw	s8,88(sp)
800100dc:	03a0f025 	move	s8,sp
800100e0:	afc40060 	sw	a0,96(s8)
800100e4:	afc50064 	sw	a1,100(s8)
800100e8:	afc60068 	sw	a2,104(s8)
800100ec:	afc7006c 	sw	a3,108(s8)
/home/git/21373271/21373271/lib/elfloader.c:26
	u_long va = ph->p_vaddr;
800100f0:	8fc20060 	lw	v0,96(s8)
800100f4:	00000000 	nop
800100f8:	8c420008 	lw	v0,8(v0)
800100fc:	00000000 	nop
80010100:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/lib/elfloader.c:27
	size_t bin_size = ph->p_filesz;
80010104:	8fc20060 	lw	v0,96(s8)
80010108:	00000000 	nop
8001010c:	8c420010 	lw	v0,16(v0)
80010110:	00000000 	nop
80010114:	afc20024 	sw	v0,36(s8)
/home/git/21373271/21373271/lib/elfloader.c:28
	size_t sgsize = ph->p_memsz;
80010118:	8fc20060 	lw	v0,96(s8)
8001011c:	00000000 	nop
80010120:	8c420014 	lw	v0,20(v0)
80010124:	00000000 	nop
80010128:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/lib/elfloader.c:29
	u_int perm = PTE_V;
8001012c:	24020200 	li	v0,512
80010130:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/lib/elfloader.c:30
	if (ph->p_flags & PF_W) {
80010134:	8fc20060 	lw	v0,96(s8)
80010138:	00000000 	nop
8001013c:	8c420018 	lw	v0,24(v0)
80010140:	00000000 	nop
80010144:	30420002 	andi	v0,v0,0x2
80010148:	10400005 	beqz	v0,80010160 <elf_load_seg+0x90>
8001014c:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:31
		perm |= PTE_D;
80010150:	8fc20018 	lw	v0,24(s8)
80010154:	00000000 	nop
80010158:	34420400 	ori	v0,v0,0x400
8001015c:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/lib/elfloader.c:36
	}

	int r;
	size_t i;
	u_long offset = va - ROUNDDOWN(va, BY2PG);
80010160:	8fc20020 	lw	v0,32(s8)
80010164:	00000000 	nop
80010168:	30420fff 	andi	v0,v0,0xfff
8001016c:	afc2002c 	sw	v0,44(s8)
/home/git/21373271/21373271/lib/elfloader.c:37
	if (offset != 0) {
80010170:	8fc2002c 	lw	v0,44(s8)
80010174:	00000000 	nop
80010178:	10400023 	beqz	v0,80010208 <elf_load_seg+0x138>
8001017c:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:38
		if ((r = map_page(data, va, offset, perm, bin, MIN(bin_size, BY2PG - offset))) !=
80010180:	8fc20024 	lw	v0,36(s8)
80010184:	00000000 	nop
80010188:	afc20030 	sw	v0,48(s8)
8001018c:	24031000 	li	v1,4096
80010190:	8fc2002c 	lw	v0,44(s8)
80010194:	00000000 	nop
80010198:	00621023 	subu	v0,v1,v0
8001019c:	afc20034 	sw	v0,52(s8)
800101a0:	8fc30034 	lw	v1,52(s8)
800101a4:	8fc20030 	lw	v0,48(s8)
800101a8:	00000000 	nop
800101ac:	0062202b 	sltu	a0,v1,v0
800101b0:	10800002 	beqz	a0,800101bc <elf_load_seg+0xec>
800101b4:	00000000 	nop
800101b8:	00601025 	move	v0,v1
800101bc:	afa20014 	sw	v0,20(sp)
800101c0:	8fc20064 	lw	v0,100(s8)
800101c4:	00000000 	nop
800101c8:	afa20010 	sw	v0,16(sp)
800101cc:	8fc20068 	lw	v0,104(s8)
800101d0:	8fc70018 	lw	a3,24(s8)
800101d4:	8fc6002c 	lw	a2,44(s8)
800101d8:	8fc50020 	lw	a1,32(s8)
800101dc:	8fc4006c 	lw	a0,108(s8)
800101e0:	0040f809 	jalr	v0
800101e4:	00000000 	nop
800101e8:	afc20038 	sw	v0,56(s8)
800101ec:	8fc20038 	lw	v0,56(s8)
800101f0:	00000000 	nop
800101f4:	10400004 	beqz	v0,80010208 <elf_load_seg+0x138>
800101f8:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:40
		    0) {
			return r;
800101fc:	8fc20038 	lw	v0,56(s8)
80010200:	1000007a 	b	800103ec <elf_load_seg+0x31c>
80010204:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:45
		}
	}

	/* Step 1: load all content of bin into memory. */
	for (i = offset ? MIN(bin_size, BY2PG - offset) : 0; i < bin_size; i += BY2PG) {
80010208:	8fc2002c 	lw	v0,44(s8)
8001020c:	00000000 	nop
80010210:	10400012 	beqz	v0,8001025c <elf_load_seg+0x18c>
80010214:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:45 (discriminator 1)
80010218:	8fc20024 	lw	v0,36(s8)
8001021c:	00000000 	nop
80010220:	afc2003c 	sw	v0,60(s8)
80010224:	24031000 	li	v1,4096
80010228:	8fc2002c 	lw	v0,44(s8)
8001022c:	00000000 	nop
80010230:	00621023 	subu	v0,v1,v0
80010234:	afc20040 	sw	v0,64(s8)
80010238:	8fc30040 	lw	v1,64(s8)
8001023c:	8fc2003c 	lw	v0,60(s8)
80010240:	00000000 	nop
80010244:	0062202b 	sltu	a0,v1,v0
80010248:	10800005 	beqz	a0,80010260 <elf_load_seg+0x190>
8001024c:	00000000 	nop
80010250:	00601025 	move	v0,v1
80010254:	10000002 	b	80010260 <elf_load_seg+0x190>
80010258:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:45 (discriminator 2)
8001025c:	00001025 	move	v0,zero
/home/git/21373271/21373271/lib/elfloader.c:45 (discriminator 4)
80010260:	afc2001c 	sw	v0,28(s8)
80010264:	1000002c 	b	80010318 <elf_load_seg+0x248>
80010268:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:46
		if ((r = map_page(data, va + i, 0, perm, bin + i, MIN(bin_size - i, BY2PG))) != 0) {
8001026c:	8fc30020 	lw	v1,32(s8)
80010270:	8fc2001c 	lw	v0,28(s8)
80010274:	00000000 	nop
80010278:	00624021 	addu	t0,v1,v0
8001027c:	8fc30064 	lw	v1,100(s8)
80010280:	8fc2001c 	lw	v0,28(s8)
80010284:	00000000 	nop
80010288:	00622021 	addu	a0,v1,v0
8001028c:	8fc30024 	lw	v1,36(s8)
80010290:	8fc2001c 	lw	v0,28(s8)
80010294:	00000000 	nop
80010298:	00621023 	subu	v0,v1,v0
8001029c:	afc2004c 	sw	v0,76(s8)
800102a0:	24021000 	li	v0,4096
800102a4:	afc20050 	sw	v0,80(s8)
800102a8:	8fc30050 	lw	v1,80(s8)
800102ac:	8fc2004c 	lw	v0,76(s8)
800102b0:	00000000 	nop
800102b4:	0062282b 	sltu	a1,v1,v0
800102b8:	10a00002 	beqz	a1,800102c4 <elf_load_seg+0x1f4>
800102bc:	00000000 	nop
800102c0:	00601025 	move	v0,v1
800102c4:	afa20014 	sw	v0,20(sp)
800102c8:	afa40010 	sw	a0,16(sp)
800102cc:	8fc20068 	lw	v0,104(s8)
800102d0:	8fc70018 	lw	a3,24(s8)
800102d4:	00003025 	move	a2,zero
800102d8:	01002825 	move	a1,t0
800102dc:	8fc4006c 	lw	a0,108(s8)
800102e0:	0040f809 	jalr	v0
800102e4:	00000000 	nop
800102e8:	afc20038 	sw	v0,56(s8)
800102ec:	8fc20038 	lw	v0,56(s8)
800102f0:	00000000 	nop
800102f4:	10400004 	beqz	v0,80010308 <elf_load_seg+0x238>
800102f8:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:47
			return r;
800102fc:	8fc20038 	lw	v0,56(s8)
80010300:	1000003a 	b	800103ec <elf_load_seg+0x31c>
80010304:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:45 (discriminator 6)
	for (i = offset ? MIN(bin_size, BY2PG - offset) : 0; i < bin_size; i += BY2PG) {
80010308:	8fc2001c 	lw	v0,28(s8)
8001030c:	00000000 	nop
80010310:	24421000 	addiu	v0,v0,4096
80010314:	afc2001c 	sw	v0,28(s8)
/home/git/21373271/21373271/lib/elfloader.c:45 (discriminator 5)
80010318:	8fc3001c 	lw	v1,28(s8)
8001031c:	8fc20024 	lw	v0,36(s8)
80010320:	00000000 	nop
80010324:	0062102b 	sltu	v0,v1,v0
80010328:	1440ffd0 	bnez	v0,8001026c <elf_load_seg+0x19c>
8001032c:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:52
		}
	}

	/* Step 2: alloc pages to reach `sgsize` when `bin_size` < `sgsize`. */
	while (i < sgsize) {
80010330:	10000027 	b	800103d0 <elf_load_seg+0x300>
80010334:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:53
		if ((r = map_page(data, va + i, 0, perm, NULL, MIN(bin_size - i, BY2PG))) != 0) {
80010338:	8fc30020 	lw	v1,32(s8)
8001033c:	8fc2001c 	lw	v0,28(s8)
80010340:	00000000 	nop
80010344:	00622821 	addu	a1,v1,v0
80010348:	8fc30024 	lw	v1,36(s8)
8001034c:	8fc2001c 	lw	v0,28(s8)
80010350:	00000000 	nop
80010354:	00621023 	subu	v0,v1,v0
80010358:	afc20044 	sw	v0,68(s8)
8001035c:	24021000 	li	v0,4096
80010360:	afc20048 	sw	v0,72(s8)
80010364:	8fc30048 	lw	v1,72(s8)
80010368:	8fc20044 	lw	v0,68(s8)
8001036c:	00000000 	nop
80010370:	0062202b 	sltu	a0,v1,v0
80010374:	10800002 	beqz	a0,80010380 <elf_load_seg+0x2b0>
80010378:	00000000 	nop
8001037c:	00601025 	move	v0,v1
80010380:	afa20014 	sw	v0,20(sp)
80010384:	afa00010 	sw	zero,16(sp)
80010388:	8fc20068 	lw	v0,104(s8)
8001038c:	8fc70018 	lw	a3,24(s8)
80010390:	00003025 	move	a2,zero
80010394:	8fc4006c 	lw	a0,108(s8)
80010398:	0040f809 	jalr	v0
8001039c:	00000000 	nop
800103a0:	afc20038 	sw	v0,56(s8)
800103a4:	8fc20038 	lw	v0,56(s8)
800103a8:	00000000 	nop
800103ac:	10400004 	beqz	v0,800103c0 <elf_load_seg+0x2f0>
800103b0:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:54
			return r;
800103b4:	8fc20038 	lw	v0,56(s8)
800103b8:	1000000c 	b	800103ec <elf_load_seg+0x31c>
800103bc:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:56
		}
		i += BY2PG;
800103c0:	8fc2001c 	lw	v0,28(s8)
800103c4:	00000000 	nop
800103c8:	24421000 	addiu	v0,v0,4096
800103cc:	afc2001c 	sw	v0,28(s8)
/home/git/21373271/21373271/lib/elfloader.c:52
	while (i < sgsize) {
800103d0:	8fc3001c 	lw	v1,28(s8)
800103d4:	8fc20028 	lw	v0,40(s8)
800103d8:	00000000 	nop
800103dc:	0062102b 	sltu	v0,v1,v0
800103e0:	1440ffd5 	bnez	v0,80010338 <elf_load_seg+0x268>
800103e4:	00000000 	nop
/home/git/21373271/21373271/lib/elfloader.c:58
	}
	return 0;
800103e8:	00001025 	move	v0,zero
/home/git/21373271/21373271/lib/elfloader.c:59
}
800103ec:	03c0e825 	move	sp,s8
800103f0:	8fbf005c 	lw	ra,92(sp)
800103f4:	8fbe0058 	lw	s8,88(sp)
800103f8:	27bd0060 	addiu	sp,sp,96
800103fc:	03e00008 	jr	ra
80010400:	00000000 	nop
	...

80010410 <vprintfmt>:
vprintfmt():
/home/git/21373271/21373271/lib/print.c:8
/* forward declaration */
static void print_char(fmt_callback_t, void *, char, int, int);
static void print_str(fmt_callback_t, void *, const char *, int, int);
static void print_num(fmt_callback_t, void *, unsigned long, int, int, int, int, char, int);

void vprintfmt(fmt_callback_t out, void *data, const char *fmt, va_list ap) {
80010410:	27bdffb0 	addiu	sp,sp,-80
80010414:	afbf004c 	sw	ra,76(sp)
80010418:	afbe0048 	sw	s8,72(sp)
8001041c:	03a0f025 	move	s8,sp
80010420:	afc40050 	sw	a0,80(s8)
80010424:	afc50054 	sw	a1,84(s8)
80010428:	afc60058 	sw	a2,88(s8)
8001042c:	afc7005c 	sw	a3,92(s8)
/home/git/21373271/21373271/lib/print.c:20
	int neg_flag;  // output is negative
	int ladjust;   // output is left-aligned
	char padc;     // padding char

	for (;;) {
		if ( *fmt != '%' )	
80010430:	8fc20058 	lw	v0,88(s8)
80010434:	00000000 	nop
80010438:	80430000 	lb	v1,0(v0)
8001043c:	24020025 	li	v0,37
80010440:	10620013 	beq	v1,v0,80010490 <vprintfmt+0x80>
80010444:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:22
		{	
			out( data , fmt , 1 );
80010448:	8fc20050 	lw	v0,80(s8)
8001044c:	24060001 	li	a2,1
80010450:	8fc50058 	lw	a1,88(s8)
80010454:	8fc40054 	lw	a0,84(s8)
80010458:	0040f809 	jalr	v0
8001045c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:23
			fmt++;
80010460:	8fc20058 	lw	v0,88(s8)
80010464:	00000000 	nop
80010468:	24420001 	addiu	v0,v0,1
8001046c:	afc20058 	sw	v0,88(s8)
/home/git/21373271/21373271/lib/print.c:24
			if ( *fmt != 0 ) {
80010470:	8fc20058 	lw	v0,88(s8)
80010474:	00000000 	nop
80010478:	80420000 	lb	v0,0(v0)
8001047c:	00000000 	nop
80010480:	104001a1 	beqz	v0,80010b08 <vprintfmt+0x6f8>
80010484:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:25
				continue;
80010488:	1000019d 	b	80010b00 <vprintfmt+0x6f0>
8001048c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:32
			else {
				break;
			}	
		}
		
		width = 0;
80010490:	afc0002c 	sw	zero,44(s8)
/home/git/21373271/21373271/lib/print.c:33
		long_flag = 0;
80010494:	afc00030 	sw	zero,48(s8)
/home/git/21373271/21373271/lib/print.c:34
		ladjust = 0;
80010498:	afc00038 	sw	zero,56(s8)
/home/git/21373271/21373271/lib/print.c:35
		padc = ' ';
8001049c:	24020020 	li	v0,32
800104a0:	a3c2003c 	sb	v0,60(s8)
/home/git/21373271/21373271/lib/print.c:36
		fmt++;
800104a4:	8fc20058 	lw	v0,88(s8)
800104a8:	00000000 	nop
800104ac:	24420001 	addiu	v0,v0,1
800104b0:	afc20058 	sw	v0,88(s8)
/home/git/21373271/21373271/lib/print.c:38

		if (*fmt == '-') 
800104b4:	8fc20058 	lw	v0,88(s8)
800104b8:	00000000 	nop
800104bc:	80430000 	lb	v1,0(v0)
800104c0:	2402002d 	li	v0,45
800104c4:	14620007 	bne	v1,v0,800104e4 <vprintfmt+0xd4>
800104c8:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:40
		{
			ladjust = 1;
800104cc:	24020001 	li	v0,1
800104d0:	afc20038 	sw	v0,56(s8)
/home/git/21373271/21373271/lib/print.c:41
			fmt++;
800104d4:	8fc20058 	lw	v0,88(s8)
800104d8:	00000000 	nop
800104dc:	24420001 	addiu	v0,v0,1
800104e0:	afc20058 	sw	v0,88(s8)
/home/git/21373271/21373271/lib/print.c:43
		}
		if (*fmt == '0')
800104e4:	8fc20058 	lw	v0,88(s8)
800104e8:	00000000 	nop
800104ec:	80430000 	lb	v1,0(v0)
800104f0:	24020030 	li	v0,48
800104f4:	1462001b 	bne	v1,v0,80010564 <vprintfmt+0x154>
800104f8:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:45
		{
			padc = '0';
800104fc:	24020030 	li	v0,48
80010500:	a3c2003c 	sb	v0,60(s8)
/home/git/21373271/21373271/lib/print.c:46
			fmt++;
80010504:	8fc20058 	lw	v0,88(s8)
80010508:	00000000 	nop
8001050c:	24420001 	addiu	v0,v0,1
80010510:	afc20058 	sw	v0,88(s8)
/home/git/21373271/21373271/lib/print.c:49
		}

		while ( (*fmt) >= '0' && (*fmt) <= '9')
80010514:	10000013 	b	80010564 <vprintfmt+0x154>
80010518:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:51
		{
			width = width * 10 + (*fmt) - '0';
8001051c:	8fc3002c 	lw	v1,44(s8)
80010520:	00000000 	nop
80010524:	00601025 	move	v0,v1
80010528:	00021080 	sll	v0,v0,0x2
8001052c:	00431021 	addu	v0,v0,v1
80010530:	00021040 	sll	v0,v0,0x1
80010534:	00401825 	move	v1,v0
80010538:	8fc20058 	lw	v0,88(s8)
8001053c:	00000000 	nop
80010540:	80420000 	lb	v0,0(v0)
80010544:	00000000 	nop
80010548:	00621021 	addu	v0,v1,v0
8001054c:	2442ffd0 	addiu	v0,v0,-48
80010550:	afc2002c 	sw	v0,44(s8)
/home/git/21373271/21373271/lib/print.c:52
			fmt++;
80010554:	8fc20058 	lw	v0,88(s8)
80010558:	00000000 	nop
8001055c:	24420001 	addiu	v0,v0,1
80010560:	afc20058 	sw	v0,88(s8)
/home/git/21373271/21373271/lib/print.c:49
		while ( (*fmt) >= '0' && (*fmt) <= '9')
80010564:	8fc20058 	lw	v0,88(s8)
80010568:	00000000 	nop
8001056c:	80420000 	lb	v0,0(v0)
80010570:	00000000 	nop
80010574:	28420030 	slti	v0,v0,48
80010578:	14400008 	bnez	v0,8001059c <vprintfmt+0x18c>
8001057c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:49 (discriminator 1)
80010580:	8fc20058 	lw	v0,88(s8)
80010584:	00000000 	nop
80010588:	80420000 	lb	v0,0(v0)
8001058c:	00000000 	nop
80010590:	2842003a 	slti	v0,v0,58
80010594:	1440ffe1 	bnez	v0,8001051c <vprintfmt+0x10c>
80010598:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:55
		}

		if (*fmt == 'l') 
8001059c:	8fc20058 	lw	v0,88(s8)
800105a0:	00000000 	nop
800105a4:	80430000 	lb	v1,0(v0)
800105a8:	2402006c 	li	v0,108
800105ac:	14620007 	bne	v1,v0,800105cc <vprintfmt+0x1bc>
800105b0:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:57
		{
			long_flag = 1;
800105b4:	24020001 	li	v0,1
800105b8:	afc20030 	sw	v0,48(s8)
/home/git/21373271/21373271/lib/print.c:58
			fmt++;
800105bc:	8fc20058 	lw	v0,88(s8)
800105c0:	00000000 	nop
800105c4:	24420001 	addiu	v0,v0,1
800105c8:	afc20058 	sw	v0,88(s8)
/home/git/21373271/21373271/lib/print.c:61
		}

		neg_flag = 0;
800105cc:	afc00034 	sw	zero,52(s8)
/home/git/21373271/21373271/lib/print.c:62
		switch (*fmt) {
800105d0:	8fc20058 	lw	v0,88(s8)
800105d4:	00000000 	nop
800105d8:	80420000 	lb	v0,0(v0)
800105dc:	00000000 	nop
800105e0:	10400137 	beqz	v0,80010ac0 <vprintfmt+0x6b0>
800105e4:	00000000 	nop
800105e8:	0440013b 	bltz	v0,80010ad8 <vprintfmt+0x6c8>
800105ec:	00000000 	nop
800105f0:	28430079 	slti	v1,v0,121
800105f4:	10600138 	beqz	v1,80010ad8 <vprintfmt+0x6c8>
800105f8:	00000000 	nop
800105fc:	28430044 	slti	v1,v0,68
80010600:	14600135 	bnez	v1,80010ad8 <vprintfmt+0x6c8>
80010604:	00000000 	nop
80010608:	2442ffbc 	addiu	v0,v0,-68
8001060c:	2c430035 	sltiu	v1,v0,53
80010610:	10600131 	beqz	v1,80010ad8 <vprintfmt+0x6c8>
80010614:	00000000 	nop
80010618:	00021880 	sll	v1,v0,0x2
8001061c:	3c028002 	lui	v0,0x8002
80010620:	24428660 	addiu	v0,v0,-31136
80010624:	00621021 	addu	v0,v1,v0
80010628:	8c420000 	lw	v0,0(v0)
8001062c:	00000000 	nop
80010630:	00400008 	jr	v0
80010634:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:64
		case 'b':
			if (long_flag) {
80010638:	8fc20030 	lw	v0,48(s8)
8001063c:	00000000 	nop
80010640:	1040000a 	beqz	v0,8001066c <vprintfmt+0x25c>
80010644:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:65
				num = va_arg(ap, long int);
80010648:	8fc2005c 	lw	v0,92(s8)
8001064c:	00000000 	nop
80010650:	24430004 	addiu	v1,v0,4
80010654:	afc3005c 	sw	v1,92(s8)
80010658:	8c420000 	lw	v0,0(v0)
8001065c:	00000000 	nop
80010660:	afc20028 	sw	v0,40(s8)
80010664:	10000008 	b	80010688 <vprintfmt+0x278>
80010668:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:67
			} else {
				num = va_arg(ap, int);
8001066c:	8fc2005c 	lw	v0,92(s8)
80010670:	00000000 	nop
80010674:	24430004 	addiu	v1,v0,4
80010678:	afc3005c 	sw	v1,92(s8)
8001067c:	8c420000 	lw	v0,0(v0)
80010680:	00000000 	nop
80010684:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/lib/print.c:69
			}
			print_num(out, data, num, 2, 0, width, ladjust, padc, 0);
80010688:	8fc30028 	lw	v1,40(s8)
8001068c:	afa00020 	sw	zero,32(sp)
80010690:	83c2003c 	lb	v0,60(s8)
80010694:	00000000 	nop
80010698:	afa2001c 	sw	v0,28(sp)
8001069c:	8fc20038 	lw	v0,56(s8)
800106a0:	00000000 	nop
800106a4:	afa20018 	sw	v0,24(sp)
800106a8:	8fc2002c 	lw	v0,44(s8)
800106ac:	00000000 	nop
800106b0:	afa20014 	sw	v0,20(sp)
800106b4:	afa00010 	sw	zero,16(sp)
800106b8:	24070002 	li	a3,2
800106bc:	00603025 	move	a2,v1
800106c0:	8fc50054 	lw	a1,84(s8)
800106c4:	8fc40050 	lw	a0,80(s8)
800106c8:	0c00438c 	jal	80010e30 <print_num>
800106cc:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:70
			break;
800106d0:	10000107 	b	80010af0 <vprintfmt+0x6e0>
800106d4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:74

		case 'd':
		case 'D':
			if (long_flag) {
800106d8:	8fc20030 	lw	v0,48(s8)
800106dc:	00000000 	nop
800106e0:	1040000a 	beqz	v0,8001070c <vprintfmt+0x2fc>
800106e4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:75
				num = va_arg(ap, long int);
800106e8:	8fc2005c 	lw	v0,92(s8)
800106ec:	00000000 	nop
800106f0:	24430004 	addiu	v1,v0,4
800106f4:	afc3005c 	sw	v1,92(s8)
800106f8:	8c420000 	lw	v0,0(v0)
800106fc:	00000000 	nop
80010700:	afc20028 	sw	v0,40(s8)
80010704:	10000008 	b	80010728 <vprintfmt+0x318>
80010708:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:77
			} else {
				num = va_arg(ap, int);
8001070c:	8fc2005c 	lw	v0,92(s8)
80010710:	00000000 	nop
80010714:	24430004 	addiu	v1,v0,4
80010718:	afc3005c 	sw	v1,92(s8)
8001071c:	8c420000 	lw	v0,0(v0)
80010720:	00000000 	nop
80010724:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/lib/print.c:80
			}
			
			if(num < 0)
80010728:	8fc20028 	lw	v0,40(s8)
8001072c:	00000000 	nop
80010730:	04410007 	bgez	v0,80010750 <vprintfmt+0x340>
80010734:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:82
			{
				neg_flag = 1;
80010738:	24020001 	li	v0,1
8001073c:	afc20034 	sw	v0,52(s8)
/home/git/21373271/21373271/lib/print.c:83
				num = -num;
80010740:	8fc20028 	lw	v0,40(s8)
80010744:	00000000 	nop
80010748:	00021023 	negu	v0,v0
8001074c:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/lib/print.c:85
			}
			print_num(out, data, num, 10, neg_flag, width, ladjust, padc, 0);
80010750:	8fc30028 	lw	v1,40(s8)
80010754:	afa00020 	sw	zero,32(sp)
80010758:	83c2003c 	lb	v0,60(s8)
8001075c:	00000000 	nop
80010760:	afa2001c 	sw	v0,28(sp)
80010764:	8fc20038 	lw	v0,56(s8)
80010768:	00000000 	nop
8001076c:	afa20018 	sw	v0,24(sp)
80010770:	8fc2002c 	lw	v0,44(s8)
80010774:	00000000 	nop
80010778:	afa20014 	sw	v0,20(sp)
8001077c:	8fc20034 	lw	v0,52(s8)
80010780:	00000000 	nop
80010784:	afa20010 	sw	v0,16(sp)
80010788:	2407000a 	li	a3,10
8001078c:	00603025 	move	a2,v1
80010790:	8fc50054 	lw	a1,84(s8)
80010794:	8fc40050 	lw	a0,80(s8)
80010798:	0c00438c 	jal	80010e30 <print_num>
8001079c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:93
			 * complete this part. Think the differences between case 'd' and the
			 * others. (hint: 'neg_flag').
			 */
			/* Exercise 1.4: Your code here. (8/8) */

			break;
800107a0:	100000d3 	b	80010af0 <vprintfmt+0x6e0>
800107a4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:97

		case 'o':
		case 'O':
			if (long_flag) {
800107a8:	8fc20030 	lw	v0,48(s8)
800107ac:	00000000 	nop
800107b0:	1040000a 	beqz	v0,800107dc <vprintfmt+0x3cc>
800107b4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:98
				num = va_arg(ap, long int);
800107b8:	8fc2005c 	lw	v0,92(s8)
800107bc:	00000000 	nop
800107c0:	24430004 	addiu	v1,v0,4
800107c4:	afc3005c 	sw	v1,92(s8)
800107c8:	8c420000 	lw	v0,0(v0)
800107cc:	00000000 	nop
800107d0:	afc20028 	sw	v0,40(s8)
800107d4:	10000008 	b	800107f8 <vprintfmt+0x3e8>
800107d8:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:100
			} else {
				num = va_arg(ap, int);
800107dc:	8fc2005c 	lw	v0,92(s8)
800107e0:	00000000 	nop
800107e4:	24430004 	addiu	v1,v0,4
800107e8:	afc3005c 	sw	v1,92(s8)
800107ec:	8c420000 	lw	v0,0(v0)
800107f0:	00000000 	nop
800107f4:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/lib/print.c:102
			}
			print_num(out, data, num, 8, 0, width, ladjust, padc, 0);
800107f8:	8fc30028 	lw	v1,40(s8)
800107fc:	afa00020 	sw	zero,32(sp)
80010800:	83c2003c 	lb	v0,60(s8)
80010804:	00000000 	nop
80010808:	afa2001c 	sw	v0,28(sp)
8001080c:	8fc20038 	lw	v0,56(s8)
80010810:	00000000 	nop
80010814:	afa20018 	sw	v0,24(sp)
80010818:	8fc2002c 	lw	v0,44(s8)
8001081c:	00000000 	nop
80010820:	afa20014 	sw	v0,20(sp)
80010824:	afa00010 	sw	zero,16(sp)
80010828:	24070008 	li	a3,8
8001082c:	00603025 	move	a2,v1
80010830:	8fc50054 	lw	a1,84(s8)
80010834:	8fc40050 	lw	a0,80(s8)
80010838:	0c00438c 	jal	80010e30 <print_num>
8001083c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:103
			break;
80010840:	100000ab 	b	80010af0 <vprintfmt+0x6e0>
80010844:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:107

		case 'u':
		case 'U':
			if (long_flag) {
80010848:	8fc20030 	lw	v0,48(s8)
8001084c:	00000000 	nop
80010850:	1040000a 	beqz	v0,8001087c <vprintfmt+0x46c>
80010854:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:108
				num = va_arg(ap, long int);
80010858:	8fc2005c 	lw	v0,92(s8)
8001085c:	00000000 	nop
80010860:	24430004 	addiu	v1,v0,4
80010864:	afc3005c 	sw	v1,92(s8)
80010868:	8c420000 	lw	v0,0(v0)
8001086c:	00000000 	nop
80010870:	afc20028 	sw	v0,40(s8)
80010874:	10000008 	b	80010898 <vprintfmt+0x488>
80010878:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:110
			} else {
				num = va_arg(ap, int);
8001087c:	8fc2005c 	lw	v0,92(s8)
80010880:	00000000 	nop
80010884:	24430004 	addiu	v1,v0,4
80010888:	afc3005c 	sw	v1,92(s8)
8001088c:	8c420000 	lw	v0,0(v0)
80010890:	00000000 	nop
80010894:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/lib/print.c:112
			}
			print_num(out, data, num, 10, 0, width, ladjust, padc, 0);
80010898:	8fc30028 	lw	v1,40(s8)
8001089c:	afa00020 	sw	zero,32(sp)
800108a0:	83c2003c 	lb	v0,60(s8)
800108a4:	00000000 	nop
800108a8:	afa2001c 	sw	v0,28(sp)
800108ac:	8fc20038 	lw	v0,56(s8)
800108b0:	00000000 	nop
800108b4:	afa20018 	sw	v0,24(sp)
800108b8:	8fc2002c 	lw	v0,44(s8)
800108bc:	00000000 	nop
800108c0:	afa20014 	sw	v0,20(sp)
800108c4:	afa00010 	sw	zero,16(sp)
800108c8:	2407000a 	li	a3,10
800108cc:	00603025 	move	a2,v1
800108d0:	8fc50054 	lw	a1,84(s8)
800108d4:	8fc40050 	lw	a0,80(s8)
800108d8:	0c00438c 	jal	80010e30 <print_num>
800108dc:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:113
			break;
800108e0:	10000083 	b	80010af0 <vprintfmt+0x6e0>
800108e4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:116

		case 'x':
			if (long_flag) {
800108e8:	8fc20030 	lw	v0,48(s8)
800108ec:	00000000 	nop
800108f0:	1040000a 	beqz	v0,8001091c <vprintfmt+0x50c>
800108f4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:117
				num = va_arg(ap, long int);
800108f8:	8fc2005c 	lw	v0,92(s8)
800108fc:	00000000 	nop
80010900:	24430004 	addiu	v1,v0,4
80010904:	afc3005c 	sw	v1,92(s8)
80010908:	8c420000 	lw	v0,0(v0)
8001090c:	00000000 	nop
80010910:	afc20028 	sw	v0,40(s8)
80010914:	10000008 	b	80010938 <vprintfmt+0x528>
80010918:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:119
			} else {
				num = va_arg(ap, int);
8001091c:	8fc2005c 	lw	v0,92(s8)
80010920:	00000000 	nop
80010924:	24430004 	addiu	v1,v0,4
80010928:	afc3005c 	sw	v1,92(s8)
8001092c:	8c420000 	lw	v0,0(v0)
80010930:	00000000 	nop
80010934:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/lib/print.c:121
			}
			print_num(out, data, num, 16, 0, width, ladjust, padc, 0);
80010938:	8fc30028 	lw	v1,40(s8)
8001093c:	afa00020 	sw	zero,32(sp)
80010940:	83c2003c 	lb	v0,60(s8)
80010944:	00000000 	nop
80010948:	afa2001c 	sw	v0,28(sp)
8001094c:	8fc20038 	lw	v0,56(s8)
80010950:	00000000 	nop
80010954:	afa20018 	sw	v0,24(sp)
80010958:	8fc2002c 	lw	v0,44(s8)
8001095c:	00000000 	nop
80010960:	afa20014 	sw	v0,20(sp)
80010964:	afa00010 	sw	zero,16(sp)
80010968:	24070010 	li	a3,16
8001096c:	00603025 	move	a2,v1
80010970:	8fc50054 	lw	a1,84(s8)
80010974:	8fc40050 	lw	a0,80(s8)
80010978:	0c00438c 	jal	80010e30 <print_num>
8001097c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:122
			break;
80010980:	1000005b 	b	80010af0 <vprintfmt+0x6e0>
80010984:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:125

		case 'X':
			if (long_flag) {
80010988:	8fc20030 	lw	v0,48(s8)
8001098c:	00000000 	nop
80010990:	1040000a 	beqz	v0,800109bc <vprintfmt+0x5ac>
80010994:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:126
				num = va_arg(ap, long int);
80010998:	8fc2005c 	lw	v0,92(s8)
8001099c:	00000000 	nop
800109a0:	24430004 	addiu	v1,v0,4
800109a4:	afc3005c 	sw	v1,92(s8)
800109a8:	8c420000 	lw	v0,0(v0)
800109ac:	00000000 	nop
800109b0:	afc20028 	sw	v0,40(s8)
800109b4:	10000008 	b	800109d8 <vprintfmt+0x5c8>
800109b8:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:128
			} else {
				num = va_arg(ap, int);
800109bc:	8fc2005c 	lw	v0,92(s8)
800109c0:	00000000 	nop
800109c4:	24430004 	addiu	v1,v0,4
800109c8:	afc3005c 	sw	v1,92(s8)
800109cc:	8c420000 	lw	v0,0(v0)
800109d0:	00000000 	nop
800109d4:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/lib/print.c:130
			}
			print_num(out, data, num, 16, 0, width, ladjust, padc, 1);
800109d8:	8fc30028 	lw	v1,40(s8)
800109dc:	24020001 	li	v0,1
800109e0:	afa20020 	sw	v0,32(sp)
800109e4:	83c2003c 	lb	v0,60(s8)
800109e8:	00000000 	nop
800109ec:	afa2001c 	sw	v0,28(sp)
800109f0:	8fc20038 	lw	v0,56(s8)
800109f4:	00000000 	nop
800109f8:	afa20018 	sw	v0,24(sp)
800109fc:	8fc2002c 	lw	v0,44(s8)
80010a00:	00000000 	nop
80010a04:	afa20014 	sw	v0,20(sp)
80010a08:	afa00010 	sw	zero,16(sp)
80010a0c:	24070010 	li	a3,16
80010a10:	00603025 	move	a2,v1
80010a14:	8fc50054 	lw	a1,84(s8)
80010a18:	8fc40050 	lw	a0,80(s8)
80010a1c:	0c00438c 	jal	80010e30 <print_num>
80010a20:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:131
			break;
80010a24:	10000032 	b	80010af0 <vprintfmt+0x6e0>
80010a28:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:134

		case 'c':
			c = (char)va_arg(ap, int);
80010a2c:	8fc2005c 	lw	v0,92(s8)
80010a30:	00000000 	nop
80010a34:	24430004 	addiu	v1,v0,4
80010a38:	afc3005c 	sw	v1,92(s8)
80010a3c:	8c420000 	lw	v0,0(v0)
80010a40:	00000000 	nop
80010a44:	a3c20044 	sb	v0,68(s8)
/home/git/21373271/21373271/lib/print.c:135
			print_char(out, data, c, width, ladjust);
80010a48:	83c30044 	lb	v1,68(s8)
80010a4c:	8fc20038 	lw	v0,56(s8)
80010a50:	00000000 	nop
80010a54:	afa20010 	sw	v0,16(sp)
80010a58:	8fc7002c 	lw	a3,44(s8)
80010a5c:	00603025 	move	a2,v1
80010a60:	8fc50054 	lw	a1,84(s8)
80010a64:	8fc40050 	lw	a0,80(s8)
80010a68:	0c0042ca 	jal	80010b28 <print_char>
80010a6c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:136
			break;
80010a70:	1000001f 	b	80010af0 <vprintfmt+0x6e0>
80010a74:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:139

		case 's':
			s = (char *)va_arg(ap, char *);
80010a78:	8fc2005c 	lw	v0,92(s8)
80010a7c:	00000000 	nop
80010a80:	24430004 	addiu	v1,v0,4
80010a84:	afc3005c 	sw	v1,92(s8)
80010a88:	8c420000 	lw	v0,0(v0)
80010a8c:	00000000 	nop
80010a90:	afc20040 	sw	v0,64(s8)
/home/git/21373271/21373271/lib/print.c:140
			print_str(out, data, s, width, ladjust);
80010a94:	8fc20038 	lw	v0,56(s8)
80010a98:	00000000 	nop
80010a9c:	afa20010 	sw	v0,16(sp)
80010aa0:	8fc7002c 	lw	a3,44(s8)
80010aa4:	8fc60040 	lw	a2,64(s8)
80010aa8:	8fc50054 	lw	a1,84(s8)
80010aac:	8fc40050 	lw	a0,80(s8)
80010ab0:	0c004321 	jal	80010c84 <print_str>
80010ab4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:141
			break;
80010ab8:	1000000d 	b	80010af0 <vprintfmt+0x6e0>
80010abc:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:144

		case '\0':
			fmt--;
80010ac0:	8fc20058 	lw	v0,88(s8)
80010ac4:	00000000 	nop
80010ac8:	2442ffff 	addiu	v0,v0,-1
80010acc:	afc20058 	sw	v0,88(s8)
/home/git/21373271/21373271/lib/print.c:145
			break;
80010ad0:	10000007 	b	80010af0 <vprintfmt+0x6e0>
80010ad4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:149

		default:
			/* output this char as it is */
			out(data, fmt, 1);
80010ad8:	8fc20050 	lw	v0,80(s8)
80010adc:	24060001 	li	a2,1
80010ae0:	8fc50058 	lw	a1,88(s8)
80010ae4:	8fc40054 	lw	a0,84(s8)
80010ae8:	0040f809 	jalr	v0
80010aec:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:151
		}
		fmt++;
80010af0:	8fc20058 	lw	v0,88(s8)
80010af4:	00000000 	nop
80010af8:	24420001 	addiu	v0,v0,1
80010afc:	afc20058 	sw	v0,88(s8)
/home/git/21373271/21373271/lib/print.c:20
		if ( *fmt != '%' )	
80010b00:	1000fe4b 	b	80010430 <vprintfmt+0x20>
80010b04:	00000000 	nop
	...
/home/git/21373271/21373271/lib/print.c:153
	}
}
80010b10:	03c0e825 	move	sp,s8
80010b14:	8fbf004c 	lw	ra,76(sp)
80010b18:	8fbe0048 	lw	s8,72(sp)
80010b1c:	27bd0050 	addiu	sp,sp,80
80010b20:	03e00008 	jr	ra
80010b24:	00000000 	nop

80010b28 <print_char>:
print_char():
/home/git/21373271/21373271/lib/print.c:156

/* --------------- local help functions --------------------- */
void print_char(fmt_callback_t out, void *data, char c, int length, int ladjust) {
80010b28:	27bdffe0 	addiu	sp,sp,-32
80010b2c:	afbf001c 	sw	ra,28(sp)
80010b30:	afbe0018 	sw	s8,24(sp)
80010b34:	03a0f025 	move	s8,sp
80010b38:	afc40020 	sw	a0,32(s8)
80010b3c:	afc50024 	sw	a1,36(s8)
80010b40:	00c01025 	move	v0,a2
80010b44:	afc7002c 	sw	a3,44(s8)
80010b48:	a3c20028 	sb	v0,40(s8)
/home/git/21373271/21373271/lib/print.c:159
	int i;

	if (length < 1) {
80010b4c:	8fc2002c 	lw	v0,44(s8)
80010b50:	00000000 	nop
80010b54:	1c400003 	bgtz	v0,80010b64 <print_char+0x3c>
80010b58:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:160
		length = 1;
80010b5c:	24020001 	li	v0,1
80010b60:	afc2002c 	sw	v0,44(s8)
/home/git/21373271/21373271/lib/print.c:162
	}
	const char space = ' ';
80010b64:	24020020 	li	v0,32
80010b68:	a3c20014 	sb	v0,20(s8)
/home/git/21373271/21373271/lib/print.c:163
	if (ladjust) {
80010b6c:	8fc20030 	lw	v0,48(s8)
80010b70:	00000000 	nop
80010b74:	1040001f 	beqz	v0,80010bf4 <print_char+0xcc>
80010b78:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:164
		out(data, &c, 1);
80010b7c:	27c30028 	addiu	v1,s8,40
80010b80:	8fc20020 	lw	v0,32(s8)
80010b84:	24060001 	li	a2,1
80010b88:	00602825 	move	a1,v1
80010b8c:	8fc40024 	lw	a0,36(s8)
80010b90:	0040f809 	jalr	v0
80010b94:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:165
		for (i = 1; i < length; i++) {
80010b98:	24020001 	li	v0,1
80010b9c:	afc20010 	sw	v0,16(s8)
80010ba0:	1000000c 	b	80010bd4 <print_char+0xac>
80010ba4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:166 (discriminator 3)
			out(data, &space, 1);
80010ba8:	27c30014 	addiu	v1,s8,20
80010bac:	8fc20020 	lw	v0,32(s8)
80010bb0:	24060001 	li	a2,1
80010bb4:	00602825 	move	a1,v1
80010bb8:	8fc40024 	lw	a0,36(s8)
80010bbc:	0040f809 	jalr	v0
80010bc0:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:165 (discriminator 3)
		for (i = 1; i < length; i++) {
80010bc4:	8fc20010 	lw	v0,16(s8)
80010bc8:	00000000 	nop
80010bcc:	24420001 	addiu	v0,v0,1
80010bd0:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/lib/print.c:165 (discriminator 1)
80010bd4:	8fc30010 	lw	v1,16(s8)
80010bd8:	8fc2002c 	lw	v0,44(s8)
80010bdc:	00000000 	nop
80010be0:	0062102a 	slt	v0,v1,v0
80010be4:	1440fff0 	bnez	v0,80010ba8 <print_char+0x80>
80010be8:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:174
		for (i = 0; i < length - 1; i++) {
			out(data, &space, 1);
		}
		out(data, &c, 1);
	}
}
80010bec:	1000001e 	b	80010c68 <print_char+0x140>
80010bf0:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:169
		for (i = 0; i < length - 1; i++) {
80010bf4:	afc00010 	sw	zero,16(s8)
80010bf8:	1000000c 	b	80010c2c <print_char+0x104>
80010bfc:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:170 (discriminator 3)
			out(data, &space, 1);
80010c00:	27c30014 	addiu	v1,s8,20
80010c04:	8fc20020 	lw	v0,32(s8)
80010c08:	24060001 	li	a2,1
80010c0c:	00602825 	move	a1,v1
80010c10:	8fc40024 	lw	a0,36(s8)
80010c14:	0040f809 	jalr	v0
80010c18:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:169 (discriminator 3)
		for (i = 0; i < length - 1; i++) {
80010c1c:	8fc20010 	lw	v0,16(s8)
80010c20:	00000000 	nop
80010c24:	24420001 	addiu	v0,v0,1
80010c28:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/lib/print.c:169 (discriminator 1)
80010c2c:	8fc2002c 	lw	v0,44(s8)
80010c30:	00000000 	nop
80010c34:	2442ffff 	addiu	v0,v0,-1
80010c38:	8fc30010 	lw	v1,16(s8)
80010c3c:	00000000 	nop
80010c40:	0062102a 	slt	v0,v1,v0
80010c44:	1440ffee 	bnez	v0,80010c00 <print_char+0xd8>
80010c48:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:172
		out(data, &c, 1);
80010c4c:	27c30028 	addiu	v1,s8,40
80010c50:	8fc20020 	lw	v0,32(s8)
80010c54:	24060001 	li	a2,1
80010c58:	00602825 	move	a1,v1
80010c5c:	8fc40024 	lw	a0,36(s8)
80010c60:	0040f809 	jalr	v0
80010c64:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:174
}
80010c68:	00000000 	nop
80010c6c:	03c0e825 	move	sp,s8
80010c70:	8fbf001c 	lw	ra,28(sp)
80010c74:	8fbe0018 	lw	s8,24(sp)
80010c78:	27bd0020 	addiu	sp,sp,32
80010c7c:	03e00008 	jr	ra
80010c80:	00000000 	nop

80010c84 <print_str>:
print_str():
/home/git/21373271/21373271/lib/print.c:176

void print_str(fmt_callback_t out, void *data, const char *s, int length, int ladjust) {
80010c84:	27bdffd8 	addiu	sp,sp,-40
80010c88:	afbf0024 	sw	ra,36(sp)
80010c8c:	afbe0020 	sw	s8,32(sp)
80010c90:	03a0f025 	move	s8,sp
80010c94:	afc40028 	sw	a0,40(s8)
80010c98:	afc5002c 	sw	a1,44(s8)
80010c9c:	afc60030 	sw	a2,48(s8)
80010ca0:	afc70034 	sw	a3,52(s8)
/home/git/21373271/21373271/lib/print.c:178
	int i;
	int len = 0;
80010ca4:	afc00014 	sw	zero,20(s8)
/home/git/21373271/21373271/lib/print.c:179
	const char *s1 = s;
80010ca8:	8fc20030 	lw	v0,48(s8)
80010cac:	00000000 	nop
80010cb0:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/lib/print.c:180
	while (*s1++) {
80010cb4:	10000005 	b	80010ccc <print_str+0x48>
80010cb8:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:181
		len++;
80010cbc:	8fc20014 	lw	v0,20(s8)
80010cc0:	00000000 	nop
80010cc4:	24420001 	addiu	v0,v0,1
80010cc8:	afc20014 	sw	v0,20(s8)
/home/git/21373271/21373271/lib/print.c:180
	while (*s1++) {
80010ccc:	8fc20018 	lw	v0,24(s8)
80010cd0:	00000000 	nop
80010cd4:	24430001 	addiu	v1,v0,1
80010cd8:	afc30018 	sw	v1,24(s8)
80010cdc:	80420000 	lb	v0,0(v0)
80010ce0:	00000000 	nop
80010ce4:	1440fff5 	bnez	v0,80010cbc <print_str+0x38>
80010ce8:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:183
	}
	if (length < len) {
80010cec:	8fc30034 	lw	v1,52(s8)
80010cf0:	8fc20014 	lw	v0,20(s8)
80010cf4:	00000000 	nop
80010cf8:	0062102a 	slt	v0,v1,v0
80010cfc:	10400004 	beqz	v0,80010d10 <print_str+0x8c>
80010d00:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:184
		length = len;
80010d04:	8fc20014 	lw	v0,20(s8)
80010d08:	00000000 	nop
80010d0c:	afc20034 	sw	v0,52(s8)
/home/git/21373271/21373271/lib/print.c:187
	}

	if (ladjust) {
80010d10:	8fc20038 	lw	v0,56(s8)
80010d14:	00000000 	nop
80010d18:	10400020 	beqz	v0,80010d9c <print_str+0x118>
80010d1c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:188
		out(data, s, len);
80010d20:	8fc30014 	lw	v1,20(s8)
80010d24:	8fc20028 	lw	v0,40(s8)
80010d28:	00603025 	move	a2,v1
80010d2c:	8fc50030 	lw	a1,48(s8)
80010d30:	8fc4002c 	lw	a0,44(s8)
80010d34:	0040f809 	jalr	v0
80010d38:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:189
		for (i = len; i < length; i++) {
80010d3c:	8fc20014 	lw	v0,20(s8)
80010d40:	00000000 	nop
80010d44:	afc20010 	sw	v0,16(s8)
80010d48:	1000000c 	b	80010d7c <print_str+0xf8>
80010d4c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:190 (discriminator 3)
			out(data, " ", 1);
80010d50:	8fc20028 	lw	v0,40(s8)
80010d54:	24060001 	li	a2,1
80010d58:	3c038002 	lui	v1,0x8002
80010d5c:	24658734 	addiu	a1,v1,-30924
80010d60:	8fc4002c 	lw	a0,44(s8)
80010d64:	0040f809 	jalr	v0
80010d68:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:189 (discriminator 3)
		for (i = len; i < length; i++) {
80010d6c:	8fc20010 	lw	v0,16(s8)
80010d70:	00000000 	nop
80010d74:	24420001 	addiu	v0,v0,1
80010d78:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/lib/print.c:189 (discriminator 1)
80010d7c:	8fc30010 	lw	v1,16(s8)
80010d80:	8fc20034 	lw	v0,52(s8)
80010d84:	00000000 	nop
80010d88:	0062102a 	slt	v0,v1,v0
80010d8c:	1440fff0 	bnez	v0,80010d50 <print_str+0xcc>
80010d90:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:198
		for (i = 0; i < length - len; i++) {
			out(data, " ", 1);
		}
		out(data, s, len);
	}
}
80010d94:	1000001f 	b	80010e14 <print_str+0x190>
80010d98:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:193
		for (i = 0; i < length - len; i++) {
80010d9c:	afc00010 	sw	zero,16(s8)
80010da0:	1000000c 	b	80010dd4 <print_str+0x150>
80010da4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:194 (discriminator 3)
			out(data, " ", 1);
80010da8:	8fc20028 	lw	v0,40(s8)
80010dac:	24060001 	li	a2,1
80010db0:	3c038002 	lui	v1,0x8002
80010db4:	24658734 	addiu	a1,v1,-30924
80010db8:	8fc4002c 	lw	a0,44(s8)
80010dbc:	0040f809 	jalr	v0
80010dc0:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:193 (discriminator 3)
		for (i = 0; i < length - len; i++) {
80010dc4:	8fc20010 	lw	v0,16(s8)
80010dc8:	00000000 	nop
80010dcc:	24420001 	addiu	v0,v0,1
80010dd0:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/lib/print.c:193 (discriminator 1)
80010dd4:	8fc30034 	lw	v1,52(s8)
80010dd8:	8fc20014 	lw	v0,20(s8)
80010ddc:	00000000 	nop
80010de0:	00621023 	subu	v0,v1,v0
80010de4:	8fc30010 	lw	v1,16(s8)
80010de8:	00000000 	nop
80010dec:	0062102a 	slt	v0,v1,v0
80010df0:	1440ffed 	bnez	v0,80010da8 <print_str+0x124>
80010df4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:196
		out(data, s, len);
80010df8:	8fc30014 	lw	v1,20(s8)
80010dfc:	8fc20028 	lw	v0,40(s8)
80010e00:	00603025 	move	a2,v1
80010e04:	8fc50030 	lw	a1,48(s8)
80010e08:	8fc4002c 	lw	a0,44(s8)
80010e0c:	0040f809 	jalr	v0
80010e10:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:198
}
80010e14:	00000000 	nop
80010e18:	03c0e825 	move	sp,s8
80010e1c:	8fbf0024 	lw	ra,36(sp)
80010e20:	8fbe0020 	lw	s8,32(sp)
80010e24:	27bd0028 	addiu	sp,sp,40
80010e28:	03e00008 	jr	ra
80010e2c:	00000000 	nop

80010e30 <print_num>:
print_num():
/home/git/21373271/21373271/lib/print.c:201

void print_num(fmt_callback_t out, void *data, unsigned long u, int base, int neg_flag, int length,
	       int ladjust, char padc, int upcase) {
80010e30:	27bdffb8 	addiu	sp,sp,-72
80010e34:	afbf0044 	sw	ra,68(sp)
80010e38:	afbe0040 	sw	s8,64(sp)
80010e3c:	afb0003c 	sw	s0,60(sp)
80010e40:	03a0f025 	move	s8,sp
80010e44:	afc40048 	sw	a0,72(s8)
80010e48:	afc5004c 	sw	a1,76(s8)
80010e4c:	afc60050 	sw	a2,80(s8)
80010e50:	afc70054 	sw	a3,84(s8)
80010e54:	03a02025 	move	a0,sp
80010e58:	00808025 	move	s0,a0
/home/git/21373271/21373271/lib/print.c:212
	 *		    if negtive, insert  "0" padding between "0" and number.
	 *  3. if (!ladjust) we reverse the whole string including paddings
	 *  4. otherwise we only reverse the actual string representing the num.
	 */

	int actualLength = 0;
80010e5c:	afc00020 	sw	zero,32(s8)
/home/git/21373271/21373271/lib/print.c:213
	char buf[length + 70];
80010e60:	8fc4005c 	lw	a0,92(s8)
80010e64:	00000000 	nop
80010e68:	24840046 	addiu	a0,a0,70
80010e6c:	2485ffff 	addiu	a1,a0,-1
80010e70:	afc50024 	sw	a1,36(s8)
80010e74:	00802825 	move	a1,a0
80010e78:	00a06025 	move	t4,a1
80010e7c:	00006825 	move	t5,zero
80010e80:	000c2f42 	srl	a1,t4,0x1d
80010e84:	000d48c0 	sll	t1,t5,0x3
80010e88:	00a94825 	or	t1,a1,t1
80010e8c:	000c40c0 	sll	t0,t4,0x3
80010e90:	00802825 	move	a1,a0
80010e94:	00a05025 	move	t2,a1
80010e98:	00005825 	move	t3,zero
80010e9c:	000a2f42 	srl	a1,t2,0x1d
80010ea0:	000b18c0 	sll	v1,t3,0x3
80010ea4:	00a31825 	or	v1,a1,v1
80010ea8:	000a10c0 	sll	v0,t2,0x3
80010eac:	00801025 	move	v0,a0
80010eb0:	24420007 	addiu	v0,v0,7
80010eb4:	000210c2 	srl	v0,v0,0x3
80010eb8:	000210c0 	sll	v0,v0,0x3
80010ebc:	03a2e823 	subu	sp,sp,v0
80010ec0:	27a20010 	addiu	v0,sp,16
80010ec4:	24420000 	addiu	v0,v0,0
80010ec8:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/lib/print.c:214
	char *p = buf;
80010ecc:	8fc20028 	lw	v0,40(s8)
80010ed0:	00000000 	nop
80010ed4:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/lib/print.c:218
	int i;

	do {
		int tmp = u % base;
80010ed8:	8fc20054 	lw	v0,84(s8)
80010edc:	8fc30050 	lw	v1,80(s8)
80010ee0:	00000000 	nop
80010ee4:	0062001b 	divu	zero,v1,v0
80010ee8:	14400002 	bnez	v0,80010ef4 <print_num+0xc4>
80010eec:	00000000 	nop
80010ef0:	0007000d 	break	0x7
80010ef4:	00001010 	mfhi	v0
80010ef8:	afc2002c 	sw	v0,44(s8)
/home/git/21373271/21373271/lib/print.c:219
		if (tmp <= 9) {
80010efc:	8fc2002c 	lw	v0,44(s8)
80010f00:	00000000 	nop
80010f04:	2842000a 	slti	v0,v0,10
80010f08:	1040000f 	beqz	v0,80010f48 <print_num+0x118>
80010f0c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:220
			*p++ = '0' + tmp;
80010f10:	8fc2002c 	lw	v0,44(s8)
80010f14:	00000000 	nop
80010f18:	304200ff 	andi	v0,v0,0xff
80010f1c:	24420030 	addiu	v0,v0,48
80010f20:	304400ff 	andi	a0,v0,0xff
80010f24:	8fc20010 	lw	v0,16(s8)
80010f28:	00000000 	nop
80010f2c:	24430001 	addiu	v1,v0,1
80010f30:	afc30010 	sw	v1,16(s8)
80010f34:	00041e00 	sll	v1,a0,0x18
80010f38:	00031e03 	sra	v1,v1,0x18
80010f3c:	a0430000 	sb	v1,0(v0)
80010f40:	1000001f 	b	80010fc0 <print_num+0x190>
80010f44:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:221
		} else if (upcase) {
80010f48:	8fc20068 	lw	v0,104(s8)
80010f4c:	00000000 	nop
80010f50:	1040000f 	beqz	v0,80010f90 <print_num+0x160>
80010f54:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:222
			*p++ = 'A' + tmp - 10;
80010f58:	8fc2002c 	lw	v0,44(s8)
80010f5c:	00000000 	nop
80010f60:	304200ff 	andi	v0,v0,0xff
80010f64:	24420037 	addiu	v0,v0,55
80010f68:	304400ff 	andi	a0,v0,0xff
80010f6c:	8fc20010 	lw	v0,16(s8)
80010f70:	00000000 	nop
80010f74:	24430001 	addiu	v1,v0,1
80010f78:	afc30010 	sw	v1,16(s8)
80010f7c:	00041e00 	sll	v1,a0,0x18
80010f80:	00031e03 	sra	v1,v1,0x18
80010f84:	a0430000 	sb	v1,0(v0)
80010f88:	1000000d 	b	80010fc0 <print_num+0x190>
80010f8c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:224
		} else {
			*p++ = 'a' + tmp - 10;
80010f90:	8fc2002c 	lw	v0,44(s8)
80010f94:	00000000 	nop
80010f98:	304200ff 	andi	v0,v0,0xff
80010f9c:	24420057 	addiu	v0,v0,87
80010fa0:	304400ff 	andi	a0,v0,0xff
80010fa4:	8fc20010 	lw	v0,16(s8)
80010fa8:	00000000 	nop
80010fac:	24430001 	addiu	v1,v0,1
80010fb0:	afc30010 	sw	v1,16(s8)
80010fb4:	00041e00 	sll	v1,a0,0x18
80010fb8:	00031e03 	sra	v1,v1,0x18
80010fbc:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/print.c:226
		}
		u /= base;
80010fc0:	8fc20054 	lw	v0,84(s8)
80010fc4:	8fc30050 	lw	v1,80(s8)
80010fc8:	00000000 	nop
80010fcc:	0062001b 	divu	zero,v1,v0
80010fd0:	14400002 	bnez	v0,80010fdc <print_num+0x1ac>
80010fd4:	00000000 	nop
80010fd8:	0007000d 	break	0x7
80010fdc:	00001010 	mfhi	v0
80010fe0:	00001012 	mflo	v0
80010fe4:	afc20050 	sw	v0,80(s8)
/home/git/21373271/21373271/lib/print.c:227
	} while (u != 0);
80010fe8:	8fc20050 	lw	v0,80(s8)
80010fec:	00000000 	nop
80010ff0:	1440ffb9 	bnez	v0,80010ed8 <print_num+0xa8>
80010ff4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:229

	if (neg_flag) {
80010ff8:	8fc20058 	lw	v0,88(s8)
80010ffc:	00000000 	nop
80011000:	10400007 	beqz	v0,80011020 <print_num+0x1f0>
80011004:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:230
		*p++ = '-';
80011008:	8fc20010 	lw	v0,16(s8)
8001100c:	00000000 	nop
80011010:	24430001 	addiu	v1,v0,1
80011014:	afc30010 	sw	v1,16(s8)
80011018:	2403002d 	li	v1,45
8001101c:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/print.c:234
	}

	/* figure out actual length and adjust the maximum length */
	actualLength = p - buf;
80011020:	8fc30010 	lw	v1,16(s8)
80011024:	8fc20028 	lw	v0,40(s8)
80011028:	00000000 	nop
8001102c:	00621023 	subu	v0,v1,v0
80011030:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/lib/print.c:235
	if (length < actualLength) {
80011034:	8fc3005c 	lw	v1,92(s8)
80011038:	8fc20020 	lw	v0,32(s8)
8001103c:	00000000 	nop
80011040:	0062102a 	slt	v0,v1,v0
80011044:	10400004 	beqz	v0,80011058 <print_num+0x228>
80011048:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:236
		length = actualLength;
8001104c:	8fc20020 	lw	v0,32(s8)
80011050:	00000000 	nop
80011054:	afc2005c 	sw	v0,92(s8)
/home/git/21373271/21373271/lib/print.c:240
	}

	/* add padding */
	if (ladjust) {
80011058:	8fc20060 	lw	v0,96(s8)
8001105c:	00000000 	nop
80011060:	10400003 	beqz	v0,80011070 <print_num+0x240>
80011064:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:241
		padc = ' ';
80011068:	24020020 	li	v0,32
8001106c:	a3c20064 	sb	v0,100(s8)
/home/git/21373271/21373271/lib/print.c:243
	}
	if (neg_flag && !ladjust && (padc == '0')) {
80011070:	8fc20058 	lw	v0,88(s8)
80011074:	00000000 	nop
80011078:	1040002c 	beqz	v0,8001112c <print_num+0x2fc>
8001107c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:243 (discriminator 1)
80011080:	8fc20060 	lw	v0,96(s8)
80011084:	00000000 	nop
80011088:	14400028 	bnez	v0,8001112c <print_num+0x2fc>
8001108c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:243 (discriminator 2)
80011090:	83c30064 	lb	v1,100(s8)
80011094:	24020030 	li	v0,48
80011098:	14620024 	bne	v1,v0,8001112c <print_num+0x2fc>
8001109c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:244
		for (i = actualLength - 1; i < length - 1; i++) {
800110a0:	8fc20020 	lw	v0,32(s8)
800110a4:	00000000 	nop
800110a8:	2442ffff 	addiu	v0,v0,-1
800110ac:	afc20014 	sw	v0,20(s8)
800110b0:	1000000c 	b	800110e4 <print_num+0x2b4>
800110b4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:245 (discriminator 3)
			buf[i] = padc;
800110b8:	8fc30028 	lw	v1,40(s8)
800110bc:	8fc20014 	lw	v0,20(s8)
800110c0:	00000000 	nop
800110c4:	00621021 	addu	v0,v1,v0
800110c8:	93c30064 	lbu	v1,100(s8)
800110cc:	00000000 	nop
800110d0:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/print.c:244 (discriminator 3)
		for (i = actualLength - 1; i < length - 1; i++) {
800110d4:	8fc20014 	lw	v0,20(s8)
800110d8:	00000000 	nop
800110dc:	24420001 	addiu	v0,v0,1
800110e0:	afc20014 	sw	v0,20(s8)
/home/git/21373271/21373271/lib/print.c:244 (discriminator 1)
800110e4:	8fc2005c 	lw	v0,92(s8)
800110e8:	00000000 	nop
800110ec:	2442ffff 	addiu	v0,v0,-1
800110f0:	8fc30014 	lw	v1,20(s8)
800110f4:	00000000 	nop
800110f8:	0062102a 	slt	v0,v1,v0
800110fc:	1440ffee 	bnez	v0,800110b8 <print_num+0x288>
80011100:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:247
		}
		buf[length - 1] = '-';
80011104:	8fc2005c 	lw	v0,92(s8)
80011108:	00000000 	nop
8001110c:	2442ffff 	addiu	v0,v0,-1
80011110:	8fc30028 	lw	v1,40(s8)
80011114:	00000000 	nop
80011118:	00621021 	addu	v0,v1,v0
8001111c:	2403002d 	li	v1,45
80011120:	a0430000 	sb	v1,0(v0)
80011124:	10000017 	b	80011184 <print_num+0x354>
80011128:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:249
	} else {
		for (i = actualLength; i < length; i++) {
8001112c:	8fc20020 	lw	v0,32(s8)
80011130:	00000000 	nop
80011134:	afc20014 	sw	v0,20(s8)
80011138:	1000000c 	b	8001116c <print_num+0x33c>
8001113c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:250 (discriminator 3)
			buf[i] = padc;
80011140:	8fc30028 	lw	v1,40(s8)
80011144:	8fc20014 	lw	v0,20(s8)
80011148:	00000000 	nop
8001114c:	00621021 	addu	v0,v1,v0
80011150:	93c30064 	lbu	v1,100(s8)
80011154:	00000000 	nop
80011158:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/print.c:249 (discriminator 3)
		for (i = actualLength; i < length; i++) {
8001115c:	8fc20014 	lw	v0,20(s8)
80011160:	00000000 	nop
80011164:	24420001 	addiu	v0,v0,1
80011168:	afc20014 	sw	v0,20(s8)
/home/git/21373271/21373271/lib/print.c:249 (discriminator 1)
8001116c:	8fc30014 	lw	v1,20(s8)
80011170:	8fc2005c 	lw	v0,92(s8)
80011174:	00000000 	nop
80011178:	0062102a 	slt	v0,v1,v0
8001117c:	1440fff0 	bnez	v0,80011140 <print_num+0x310>
80011180:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:255
		}
	}

	/* prepare to reverse the string */
	int begin = 0;
80011184:	afc00018 	sw	zero,24(s8)
/home/git/21373271/21373271/lib/print.c:257
	int end;
	if (ladjust) {
80011188:	8fc20060 	lw	v0,96(s8)
8001118c:	00000000 	nop
80011190:	10400007 	beqz	v0,800111b0 <print_num+0x380>
80011194:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:258
		end = actualLength - 1;
80011198:	8fc20020 	lw	v0,32(s8)
8001119c:	00000000 	nop
800111a0:	2442ffff 	addiu	v0,v0,-1
800111a4:	afc2001c 	sw	v0,28(s8)
800111a8:	10000027 	b	80011248 <print_num+0x418>
800111ac:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:260
	} else {
		end = length - 1;
800111b0:	8fc2005c 	lw	v0,92(s8)
800111b4:	00000000 	nop
800111b8:	2442ffff 	addiu	v0,v0,-1
800111bc:	afc2001c 	sw	v0,28(s8)
/home/git/21373271/21373271/lib/print.c:264
	}

	/* adjust the string pointer */
	while (end > begin) {
800111c0:	10000021 	b	80011248 <print_num+0x418>
800111c4:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:265
		char tmp = buf[begin];
800111c8:	8fc30028 	lw	v1,40(s8)
800111cc:	8fc20018 	lw	v0,24(s8)
800111d0:	00000000 	nop
800111d4:	00621021 	addu	v0,v1,v0
800111d8:	90420000 	lbu	v0,0(v0)
800111dc:	00000000 	nop
800111e0:	a3c20030 	sb	v0,48(s8)
/home/git/21373271/21373271/lib/print.c:266
		buf[begin] = buf[end];
800111e4:	8fc30028 	lw	v1,40(s8)
800111e8:	8fc2001c 	lw	v0,28(s8)
800111ec:	00000000 	nop
800111f0:	00621021 	addu	v0,v1,v0
800111f4:	80430000 	lb	v1,0(v0)
800111f8:	8fc40028 	lw	a0,40(s8)
800111fc:	8fc20018 	lw	v0,24(s8)
80011200:	00000000 	nop
80011204:	00821021 	addu	v0,a0,v0
80011208:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/print.c:267
		buf[end] = tmp;
8001120c:	8fc30028 	lw	v1,40(s8)
80011210:	8fc2001c 	lw	v0,28(s8)
80011214:	00000000 	nop
80011218:	00621021 	addu	v0,v1,v0
8001121c:	93c30030 	lbu	v1,48(s8)
80011220:	00000000 	nop
80011224:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/print.c:268
		begin++;
80011228:	8fc20018 	lw	v0,24(s8)
8001122c:	00000000 	nop
80011230:	24420001 	addiu	v0,v0,1
80011234:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/lib/print.c:269
		end--;
80011238:	8fc2001c 	lw	v0,28(s8)
8001123c:	00000000 	nop
80011240:	2442ffff 	addiu	v0,v0,-1
80011244:	afc2001c 	sw	v0,28(s8)
/home/git/21373271/21373271/lib/print.c:264
	while (end > begin) {
80011248:	8fc3001c 	lw	v1,28(s8)
8001124c:	8fc20018 	lw	v0,24(s8)
80011250:	00000000 	nop
80011254:	0043102a 	slt	v0,v0,v1
80011258:	1440ffdb 	bnez	v0,800111c8 <print_num+0x398>
8001125c:	00000000 	nop
/home/git/21373271/21373271/lib/print.c:272
	}

	out(data, buf, length);
80011260:	8fc3005c 	lw	v1,92(s8)
80011264:	8fc20048 	lw	v0,72(s8)
80011268:	00603025 	move	a2,v1
8001126c:	8fc50028 	lw	a1,40(s8)
80011270:	8fc4004c 	lw	a0,76(s8)
80011274:	0040f809 	jalr	v0
80011278:	00000000 	nop
8001127c:	0200e825 	move	sp,s0
/home/git/21373271/21373271/lib/print.c:273
}
80011280:	00000000 	nop
80011284:	03c0e825 	move	sp,s8
80011288:	8fbf0044 	lw	ra,68(sp)
8001128c:	8fbe0040 	lw	s8,64(sp)
80011290:	8fb0003c 	lw	s0,60(sp)
80011294:	27bd0048 	addiu	sp,sp,72
80011298:	03e00008 	jr	ra
8001129c:	00000000 	nop

800112a0 <memcpy>:
memcpy():
/home/git/21373271/21373271/lib/string.c:3
#include <types.h>

void *memcpy(void *dst, const void *src, size_t n) {
800112a0:	27bdfff0 	addiu	sp,sp,-16
800112a4:	afbe000c 	sw	s8,12(sp)
800112a8:	03a0f025 	move	s8,sp
800112ac:	afc40010 	sw	a0,16(s8)
800112b0:	afc50014 	sw	a1,20(s8)
800112b4:	afc60018 	sw	a2,24(s8)
/home/git/21373271/21373271/lib/string.c:4
	void *dstaddr = dst;
800112b8:	8fc20010 	lw	v0,16(s8)
800112bc:	00000000 	nop
800112c0:	afc20000 	sw	v0,0(s8)
/home/git/21373271/21373271/lib/string.c:5
	void *max = dst + n;
800112c4:	8fc30010 	lw	v1,16(s8)
800112c8:	8fc20018 	lw	v0,24(s8)
800112cc:	00000000 	nop
800112d0:	00621021 	addu	v0,v1,v0
800112d4:	afc20004 	sw	v0,4(s8)
/home/git/21373271/21373271/lib/string.c:7

	if (((u_long)src & 3) != ((u_long)dst & 3)) {
800112d8:	8fc30014 	lw	v1,20(s8)
800112dc:	8fc20010 	lw	v0,16(s8)
800112e0:	00000000 	nop
800112e4:	00621026 	xor	v0,v1,v0
800112e8:	30420003 	andi	v0,v0,0x3
800112ec:	10400022 	beqz	v0,80011378 <memcpy+0xd8>
800112f0:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:8
		while (dst < max) {
800112f4:	1000000c 	b	80011328 <memcpy+0x88>
800112f8:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:9
			*(char *)dst++ = *(char *)src++;
800112fc:	8fc30014 	lw	v1,20(s8)
80011300:	00000000 	nop
80011304:	24620001 	addiu	v0,v1,1
80011308:	afc20014 	sw	v0,20(s8)
8001130c:	8fc20010 	lw	v0,16(s8)
80011310:	00000000 	nop
80011314:	24440001 	addiu	a0,v0,1
80011318:	afc40010 	sw	a0,16(s8)
8001131c:	80630000 	lb	v1,0(v1)
80011320:	00000000 	nop
80011324:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/string.c:8
		while (dst < max) {
80011328:	8fc30010 	lw	v1,16(s8)
8001132c:	8fc20004 	lw	v0,4(s8)
80011330:	00000000 	nop
80011334:	0062102b 	sltu	v0,v1,v0
80011338:	1440fff0 	bnez	v0,800112fc <memcpy+0x5c>
8001133c:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:11
		}
		return dstaddr;
80011340:	8fc20000 	lw	v0,0(s8)
80011344:	10000043 	b	80011454 <memcpy+0x1b4>
80011348:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:15
	}

	while (((u_long)dst & 3) && dst < max) {
		*(char *)dst++ = *(char *)src++;
8001134c:	8fc30014 	lw	v1,20(s8)
80011350:	00000000 	nop
80011354:	24620001 	addiu	v0,v1,1
80011358:	afc20014 	sw	v0,20(s8)
8001135c:	8fc20010 	lw	v0,16(s8)
80011360:	00000000 	nop
80011364:	24440001 	addiu	a0,v0,1
80011368:	afc40010 	sw	a0,16(s8)
8001136c:	80630000 	lb	v1,0(v1)
80011370:	00000000 	nop
80011374:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/string.c:14
	while (((u_long)dst & 3) && dst < max) {
80011378:	8fc20010 	lw	v0,16(s8)
8001137c:	00000000 	nop
80011380:	30420003 	andi	v0,v0,0x3
80011384:	10400017 	beqz	v0,800113e4 <memcpy+0x144>
80011388:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:14 (discriminator 1)
8001138c:	8fc30010 	lw	v1,16(s8)
80011390:	8fc20004 	lw	v0,4(s8)
80011394:	00000000 	nop
80011398:	0062102b 	sltu	v0,v1,v0
8001139c:	1440ffeb 	bnez	v0,8001134c <memcpy+0xac>
800113a0:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:19
	}

	// copy machine words while possible
	while (dst + 4 <= max) {
800113a4:	1000000f 	b	800113e4 <memcpy+0x144>
800113a8:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:20
		*(uint32_t *)dst = *(uint32_t *)src;
800113ac:	8fc20014 	lw	v0,20(s8)
800113b0:	00000000 	nop
800113b4:	8c430000 	lw	v1,0(v0)
800113b8:	8fc20010 	lw	v0,16(s8)
800113bc:	00000000 	nop
800113c0:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/lib/string.c:21
		dst += 4;
800113c4:	8fc20010 	lw	v0,16(s8)
800113c8:	00000000 	nop
800113cc:	24420004 	addiu	v0,v0,4
800113d0:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/lib/string.c:22
		src += 4;
800113d4:	8fc20014 	lw	v0,20(s8)
800113d8:	00000000 	nop
800113dc:	24420004 	addiu	v0,v0,4
800113e0:	afc20014 	sw	v0,20(s8)
/home/git/21373271/21373271/lib/string.c:19
	while (dst + 4 <= max) {
800113e4:	8fc20010 	lw	v0,16(s8)
800113e8:	00000000 	nop
800113ec:	24420004 	addiu	v0,v0,4
800113f0:	8fc30004 	lw	v1,4(s8)
800113f4:	00000000 	nop
800113f8:	0062102b 	sltu	v0,v1,v0
800113fc:	1040ffeb 	beqz	v0,800113ac <memcpy+0x10c>
80011400:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:26
	}

	// finish the remaining 0-3 bytes
	while (dst < max) {
80011404:	1000000c 	b	80011438 <memcpy+0x198>
80011408:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:27
		*(char *)dst++ = *(char *)src++;
8001140c:	8fc30014 	lw	v1,20(s8)
80011410:	00000000 	nop
80011414:	24620001 	addiu	v0,v1,1
80011418:	afc20014 	sw	v0,20(s8)
8001141c:	8fc20010 	lw	v0,16(s8)
80011420:	00000000 	nop
80011424:	24440001 	addiu	a0,v0,1
80011428:	afc40010 	sw	a0,16(s8)
8001142c:	80630000 	lb	v1,0(v1)
80011430:	00000000 	nop
80011434:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/string.c:26
	while (dst < max) {
80011438:	8fc30010 	lw	v1,16(s8)
8001143c:	8fc20004 	lw	v0,4(s8)
80011440:	00000000 	nop
80011444:	0062102b 	sltu	v0,v1,v0
80011448:	1440fff0 	bnez	v0,8001140c <memcpy+0x16c>
8001144c:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:29
	}
	return dstaddr;
80011450:	8fc20000 	lw	v0,0(s8)
/home/git/21373271/21373271/lib/string.c:30
}
80011454:	03c0e825 	move	sp,s8
80011458:	8fbe000c 	lw	s8,12(sp)
8001145c:	27bd0010 	addiu	sp,sp,16
80011460:	03e00008 	jr	ra
80011464:	00000000 	nop

80011468 <memset>:
memset():
/home/git/21373271/21373271/lib/string.c:32

void *memset(void *dst, int c, size_t n) {
80011468:	27bdffe8 	addiu	sp,sp,-24
8001146c:	afbe0014 	sw	s8,20(sp)
80011470:	03a0f025 	move	s8,sp
80011474:	afc40018 	sw	a0,24(s8)
80011478:	afc5001c 	sw	a1,28(s8)
8001147c:	afc60020 	sw	a2,32(s8)
/home/git/21373271/21373271/lib/string.c:33
	void *dstaddr = dst;
80011480:	8fc20018 	lw	v0,24(s8)
80011484:	00000000 	nop
80011488:	afc20000 	sw	v0,0(s8)
/home/git/21373271/21373271/lib/string.c:34
	void *max = dst + n;
8001148c:	8fc30018 	lw	v1,24(s8)
80011490:	8fc20020 	lw	v0,32(s8)
80011494:	00000000 	nop
80011498:	00621021 	addu	v0,v1,v0
8001149c:	afc20004 	sw	v0,4(s8)
/home/git/21373271/21373271/lib/string.c:35
	u_char byte = c & 0xff;
800114a0:	8fc2001c 	lw	v0,28(s8)
800114a4:	00000000 	nop
800114a8:	a3c20008 	sb	v0,8(s8)
/home/git/21373271/21373271/lib/string.c:36
	uint32_t word = byte | byte << 8 | byte << 16 | byte << 24;
800114ac:	93c30008 	lbu	v1,8(s8)
800114b0:	93c20008 	lbu	v0,8(s8)
800114b4:	00000000 	nop
800114b8:	00021200 	sll	v0,v0,0x8
800114bc:	00621825 	or	v1,v1,v0
800114c0:	93c20008 	lbu	v0,8(s8)
800114c4:	00000000 	nop
800114c8:	00021400 	sll	v0,v0,0x10
800114cc:	00621825 	or	v1,v1,v0
800114d0:	93c20008 	lbu	v0,8(s8)
800114d4:	00000000 	nop
800114d8:	00021600 	sll	v0,v0,0x18
800114dc:	00621025 	or	v0,v1,v0
800114e0:	afc2000c 	sw	v0,12(s8)
/home/git/21373271/21373271/lib/string.c:38

	while (((u_long)dst & 3) && dst < max) {
800114e4:	10000008 	b	80011508 <memset+0xa0>
800114e8:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:39
		*(u_char *)dst++ = byte;
800114ec:	8fc20018 	lw	v0,24(s8)
800114f0:	00000000 	nop
800114f4:	24430001 	addiu	v1,v0,1
800114f8:	afc30018 	sw	v1,24(s8)
800114fc:	93c30008 	lbu	v1,8(s8)
80011500:	00000000 	nop
80011504:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/string.c:38
	while (((u_long)dst & 3) && dst < max) {
80011508:	8fc20018 	lw	v0,24(s8)
8001150c:	00000000 	nop
80011510:	30420003 	andi	v0,v0,0x3
80011514:	10400011 	beqz	v0,8001155c <memset+0xf4>
80011518:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:38 (discriminator 1)
8001151c:	8fc30018 	lw	v1,24(s8)
80011520:	8fc20004 	lw	v0,4(s8)
80011524:	00000000 	nop
80011528:	0062102b 	sltu	v0,v1,v0
8001152c:	1440ffef 	bnez	v0,800114ec <memset+0x84>
80011530:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:43
	}

	// fill machine words while possible
	while (dst + 4 <= max) {
80011534:	10000009 	b	8001155c <memset+0xf4>
80011538:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:44
		*(uint32_t *)dst = word;
8001153c:	8fc20018 	lw	v0,24(s8)
80011540:	8fc3000c 	lw	v1,12(s8)
80011544:	00000000 	nop
80011548:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/lib/string.c:45
		dst += 4;
8001154c:	8fc20018 	lw	v0,24(s8)
80011550:	00000000 	nop
80011554:	24420004 	addiu	v0,v0,4
80011558:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/lib/string.c:43
	while (dst + 4 <= max) {
8001155c:	8fc20018 	lw	v0,24(s8)
80011560:	00000000 	nop
80011564:	24420004 	addiu	v0,v0,4
80011568:	8fc30004 	lw	v1,4(s8)
8001156c:	00000000 	nop
80011570:	0062102b 	sltu	v0,v1,v0
80011574:	1040fff1 	beqz	v0,8001153c <memset+0xd4>
80011578:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:49
	}

	// finish the remaining 0-3 bytes
	while (dst < max) {
8001157c:	10000008 	b	800115a0 <memset+0x138>
80011580:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:50
		*(u_char *)dst++ = byte;
80011584:	8fc20018 	lw	v0,24(s8)
80011588:	00000000 	nop
8001158c:	24430001 	addiu	v1,v0,1
80011590:	afc30018 	sw	v1,24(s8)
80011594:	93c30008 	lbu	v1,8(s8)
80011598:	00000000 	nop
8001159c:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/lib/string.c:49
	while (dst < max) {
800115a0:	8fc30018 	lw	v1,24(s8)
800115a4:	8fc20004 	lw	v0,4(s8)
800115a8:	00000000 	nop
800115ac:	0062102b 	sltu	v0,v1,v0
800115b0:	1440fff4 	bnez	v0,80011584 <memset+0x11c>
800115b4:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:52
	}
	return dstaddr;
800115b8:	8fc20000 	lw	v0,0(s8)
/home/git/21373271/21373271/lib/string.c:53
}
800115bc:	03c0e825 	move	sp,s8
800115c0:	8fbe0014 	lw	s8,20(sp)
800115c4:	27bd0018 	addiu	sp,sp,24
800115c8:	03e00008 	jr	ra
800115cc:	00000000 	nop

800115d0 <strlen>:
strlen():
/home/git/21373271/21373271/lib/string.c:55

size_t strlen(const char *s) {
800115d0:	27bdfff0 	addiu	sp,sp,-16
800115d4:	afbe000c 	sw	s8,12(sp)
800115d8:	03a0f025 	move	s8,sp
800115dc:	afc40010 	sw	a0,16(s8)
/home/git/21373271/21373271/lib/string.c:58
	int n;

	for (n = 0; *s; s++) {
800115e0:	afc00000 	sw	zero,0(s8)
800115e4:	10000009 	b	8001160c <strlen+0x3c>
800115e8:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:59 (discriminator 3)
		n++;
800115ec:	8fc20000 	lw	v0,0(s8)
800115f0:	00000000 	nop
800115f4:	24420001 	addiu	v0,v0,1
800115f8:	afc20000 	sw	v0,0(s8)
/home/git/21373271/21373271/lib/string.c:58 (discriminator 3)
	for (n = 0; *s; s++) {
800115fc:	8fc20010 	lw	v0,16(s8)
80011600:	00000000 	nop
80011604:	24420001 	addiu	v0,v0,1
80011608:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/lib/string.c:58 (discriminator 1)
8001160c:	8fc20010 	lw	v0,16(s8)
80011610:	00000000 	nop
80011614:	80420000 	lb	v0,0(v0)
80011618:	00000000 	nop
8001161c:	1440fff3 	bnez	v0,800115ec <strlen+0x1c>
80011620:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:62
	}

	return n;
80011624:	8fc20000 	lw	v0,0(s8)
/home/git/21373271/21373271/lib/string.c:63
}
80011628:	03c0e825 	move	sp,s8
8001162c:	8fbe000c 	lw	s8,12(sp)
80011630:	27bd0010 	addiu	sp,sp,16
80011634:	03e00008 	jr	ra
80011638:	00000000 	nop

8001163c <strcpy>:
strcpy():
/home/git/21373271/21373271/lib/string.c:65

char *strcpy(char *dst, const char *src) {
8001163c:	27bdfff0 	addiu	sp,sp,-16
80011640:	afbe000c 	sw	s8,12(sp)
80011644:	03a0f025 	move	s8,sp
80011648:	afc40010 	sw	a0,16(s8)
8001164c:	afc50014 	sw	a1,20(s8)
/home/git/21373271/21373271/lib/string.c:66
	char *ret = dst;
80011650:	8fc20010 	lw	v0,16(s8)
80011654:	00000000 	nop
80011658:	afc20000 	sw	v0,0(s8)
/home/git/21373271/21373271/lib/string.c:68

	while ((*dst++ = *src++) != 0) {
8001165c:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:68 (discriminator 1)
80011660:	8fc30014 	lw	v1,20(s8)
80011664:	00000000 	nop
80011668:	24620001 	addiu	v0,v1,1
8001166c:	afc20014 	sw	v0,20(s8)
80011670:	8fc20010 	lw	v0,16(s8)
80011674:	00000000 	nop
80011678:	24440001 	addiu	a0,v0,1
8001167c:	afc40010 	sw	a0,16(s8)
80011680:	80630000 	lb	v1,0(v1)
80011684:	00000000 	nop
80011688:	a0430000 	sb	v1,0(v0)
8001168c:	80420000 	lb	v0,0(v0)
80011690:	00000000 	nop
80011694:	1440fff2 	bnez	v0,80011660 <strcpy+0x24>
80011698:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:71
	}

	return ret;
8001169c:	8fc20000 	lw	v0,0(s8)
/home/git/21373271/21373271/lib/string.c:72
}
800116a0:	03c0e825 	move	sp,s8
800116a4:	8fbe000c 	lw	s8,12(sp)
800116a8:	27bd0010 	addiu	sp,sp,16
800116ac:	03e00008 	jr	ra
800116b0:	00000000 	nop

800116b4 <strchr>:
strchr():
/home/git/21373271/21373271/lib/string.c:74

const char *strchr(const char *s, int c) {
800116b4:	27bdfff8 	addiu	sp,sp,-8
800116b8:	afbe0004 	sw	s8,4(sp)
800116bc:	03a0f025 	move	s8,sp
800116c0:	afc40008 	sw	a0,8(s8)
800116c4:	afc5000c 	sw	a1,12(s8)
/home/git/21373271/21373271/lib/string.c:75
	for (; *s; s++) {
800116c8:	10000011 	b	80011710 <strchr+0x5c>
800116cc:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:76
		if (*s == c) {
800116d0:	8fc20008 	lw	v0,8(s8)
800116d4:	00000000 	nop
800116d8:	80420000 	lb	v0,0(v0)
800116dc:	00000000 	nop
800116e0:	00401825 	move	v1,v0
800116e4:	8fc2000c 	lw	v0,12(s8)
800116e8:	00000000 	nop
800116ec:	14430004 	bne	v0,v1,80011700 <strchr+0x4c>
800116f0:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:77
			return s;
800116f4:	8fc20008 	lw	v0,8(s8)
800116f8:	1000000c 	b	8001172c <strchr+0x78>
800116fc:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:75
	for (; *s; s++) {
80011700:	8fc20008 	lw	v0,8(s8)
80011704:	00000000 	nop
80011708:	24420001 	addiu	v0,v0,1
8001170c:	afc20008 	sw	v0,8(s8)
/home/git/21373271/21373271/lib/string.c:75 (discriminator 1)
80011710:	8fc20008 	lw	v0,8(s8)
80011714:	00000000 	nop
80011718:	80420000 	lb	v0,0(v0)
8001171c:	00000000 	nop
80011720:	1440ffeb 	bnez	v0,800116d0 <strchr+0x1c>
80011724:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:80
		}
	}
	return 0;
80011728:	00001025 	move	v0,zero
/home/git/21373271/21373271/lib/string.c:81
}
8001172c:	03c0e825 	move	sp,s8
80011730:	8fbe0004 	lw	s8,4(sp)
80011734:	27bd0008 	addiu	sp,sp,8
80011738:	03e00008 	jr	ra
8001173c:	00000000 	nop

80011740 <strcmp>:
strcmp():
/home/git/21373271/21373271/lib/string.c:83

int strcmp(const char *p, const char *q) {
80011740:	27bdfff8 	addiu	sp,sp,-8
80011744:	afbe0004 	sw	s8,4(sp)
80011748:	03a0f025 	move	s8,sp
8001174c:	afc40008 	sw	a0,8(s8)
80011750:	afc5000c 	sw	a1,12(s8)
/home/git/21373271/21373271/lib/string.c:84
	while (*p && *p == *q) {
80011754:	10000009 	b	8001177c <strcmp+0x3c>
80011758:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:85
		p++, q++;
8001175c:	8fc20008 	lw	v0,8(s8)
80011760:	00000000 	nop
80011764:	24420001 	addiu	v0,v0,1
80011768:	afc20008 	sw	v0,8(s8)
8001176c:	8fc2000c 	lw	v0,12(s8)
80011770:	00000000 	nop
80011774:	24420001 	addiu	v0,v0,1
80011778:	afc2000c 	sw	v0,12(s8)
/home/git/21373271/21373271/lib/string.c:84
	while (*p && *p == *q) {
8001177c:	8fc20008 	lw	v0,8(s8)
80011780:	00000000 	nop
80011784:	80420000 	lb	v0,0(v0)
80011788:	00000000 	nop
8001178c:	1040000a 	beqz	v0,800117b8 <strcmp+0x78>
80011790:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:84 (discriminator 1)
80011794:	8fc20008 	lw	v0,8(s8)
80011798:	00000000 	nop
8001179c:	80430000 	lb	v1,0(v0)
800117a0:	8fc2000c 	lw	v0,12(s8)
800117a4:	00000000 	nop
800117a8:	80420000 	lb	v0,0(v0)
800117ac:	00000000 	nop
800117b0:	1062ffea 	beq	v1,v0,8001175c <strcmp+0x1c>
800117b4:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:88
	}

	if ((u_int)*p < (u_int)*q) {
800117b8:	8fc20008 	lw	v0,8(s8)
800117bc:	00000000 	nop
800117c0:	80420000 	lb	v0,0(v0)
800117c4:	00000000 	nop
800117c8:	304300ff 	andi	v1,v0,0xff
800117cc:	8fc2000c 	lw	v0,12(s8)
800117d0:	00000000 	nop
800117d4:	80420000 	lb	v0,0(v0)
800117d8:	00000000 	nop
800117dc:	304200ff 	andi	v0,v0,0xff
800117e0:	0062102b 	sltu	v0,v1,v0
800117e4:	10400004 	beqz	v0,800117f8 <strcmp+0xb8>
800117e8:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:89
		return -1;
800117ec:	2402ffff 	li	v0,-1
800117f0:	10000012 	b	8001183c <strcmp+0xfc>
800117f4:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:92
	}

	if ((u_int)*p > (u_int)*q) {
800117f8:	8fc20008 	lw	v0,8(s8)
800117fc:	00000000 	nop
80011800:	80420000 	lb	v0,0(v0)
80011804:	00000000 	nop
80011808:	304300ff 	andi	v1,v0,0xff
8001180c:	8fc2000c 	lw	v0,12(s8)
80011810:	00000000 	nop
80011814:	80420000 	lb	v0,0(v0)
80011818:	00000000 	nop
8001181c:	304200ff 	andi	v0,v0,0xff
80011820:	0043102b 	sltu	v0,v0,v1
80011824:	10400004 	beqz	v0,80011838 <strcmp+0xf8>
80011828:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:93
		return 1;
8001182c:	24020001 	li	v0,1
80011830:	10000002 	b	8001183c <strcmp+0xfc>
80011834:	00000000 	nop
/home/git/21373271/21373271/lib/string.c:96
	}

	return 0;
80011838:	00001025 	move	v0,zero
/home/git/21373271/21373271/lib/string.c:97
}
8001183c:	03c0e825 	move	sp,s8
80011840:	8fbe0004 	lw	s8,4(sp)
80011844:	27bd0008 	addiu	sp,sp,8
80011848:	03e00008 	jr	ra
8001184c:	00000000 	nop

80011850 <mips_init>:
mips_init():
/home/git/21373271/21373271/init/init.c:14
// 'tests/lab?_?'.
#ifdef MOS_INIT_OVERRIDDEN
#include <generated/init_override.h>
#else

void mips_init() {
80011850:	27bdffe8 	addiu	sp,sp,-24
80011854:	afbf0014 	sw	ra,20(sp)
80011858:	afbe0010 	sw	s8,16(sp)
8001185c:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/init/init.c:15
	printk("init.c:\tmips_init() is called\n");
80011860:	3c028002 	lui	v0,0x8002
80011864:	24448740 	addiu	a0,v0,-30912
80011868:	0c005a0d 	jal	80016834 <printk>
8001186c:	00000000 	nop
/home/git/21373271/21373271/init/init.c:23
	 //mips_detect_memory();
	 //mips_vm_init();
	 //page_init();

	// lab3:
	env_init();
80011870:	0c004876 	jal	800121d8 <env_init>
80011874:	00000000 	nop
/home/git/21373271/21373271/init/init.c:26

	// lab3:
	ENV_CREATE_PRIORITY(user_bare_loop, 1);
80011878:	3c028002 	lui	v0,0x8002
8001187c:	8c4296e0 	lw	v0,-26912(v0)
80011880:	24060001 	li	a2,1
80011884:	00402825 	move	a1,v0
80011888:	3c028002 	lui	v0,0x8002
8001188c:	244496e4 	addiu	a0,v0,-26908
80011890:	0c004aca 	jal	80012b28 <env_create>
80011894:	00000000 	nop
/home/git/21373271/21373271/init/init.c:27
	ENV_CREATE_PRIORITY(user_bare_loop, 2);
80011898:	3c028002 	lui	v0,0x8002
8001189c:	8c4296e0 	lw	v0,-26912(v0)
800118a0:	24060002 	li	a2,2
800118a4:	00402825 	move	a1,v0
800118a8:	3c028002 	lui	v0,0x8002
800118ac:	244496e4 	addiu	a0,v0,-26908
800118b0:	0c004aca 	jal	80012b28 <env_create>
800118b4:	00000000 	nop
/home/git/21373271/21373271/init/init.c:45 (discriminator 1)
	// ENV_CREATE(user_devtst);

	// lab3:
	// kclock_init();
	// enable_irq();
	while (1) {
800118b8:	1000ffff 	b	800118b8 <mips_init+0x68>
800118bc:	00000000 	nop

800118c0 <_start>:
_start():
/home/git/21373271/21373271/init/start.S:9
.text
EXPORT(_start)
.set at
.set reorder
	/* disable interrupts */
	mtc0    zero, CP0_STATUS
800118c0:	40806000 	mtc0	zero,c0_sr
/home/git/21373271/21373271/init/start.S:14

	/* hint: you can reference the memory layout in include/mmu.h */
	/* set up the kernel stack */
	/* Exercise 1.3: Your code here. (1/2) */
	lui sp,0x8040
800118c4:	3c1d8040 	lui	sp,0x8040
/home/git/21373271/21373271/init/start.S:17
	/* jump to mips_init */
	/* Exercise 1.3: Your code here. (2/2) */
	j mips_init
800118c8:	08004614 	j	80011850 <mips_init>
800118cc:	00000000 	nop

800118d0 <printcharc>:
printcharc():
/home/git/21373271/21373271/kern/console.c:4
#include <drivers/dev_cons.h>
#include <mmu.h>

void printcharc(char ch) {
800118d0:	27bdfff8 	addiu	sp,sp,-8
800118d4:	afbe0004 	sw	s8,4(sp)
800118d8:	03a0f025 	move	s8,sp
800118dc:	00801025 	move	v0,a0
800118e0:	a3c20008 	sb	v0,8(s8)
/home/git/21373271/21373271/kern/console.c:5
	*((volatile char *)(KSEG1 + DEV_CONS_ADDRESS + DEV_CONS_PUTGETCHAR)) = ch;
800118e4:	3c02b000 	lui	v0,0xb000
800118e8:	93c30008 	lbu	v1,8(s8)
800118ec:	00000000 	nop
800118f0:	a0430000 	sb	v1,0(v0)
/home/git/21373271/21373271/kern/console.c:6
}
800118f4:	00000000 	nop
800118f8:	03c0e825 	move	sp,s8
800118fc:	8fbe0004 	lw	s8,4(sp)
80011900:	27bd0008 	addiu	sp,sp,8
80011904:	03e00008 	jr	ra
80011908:	00000000 	nop

8001190c <scancharc>:
scancharc():
/home/git/21373271/21373271/kern/console.c:8

char scancharc(void) {
8001190c:	27bdfff8 	addiu	sp,sp,-8
80011910:	afbe0004 	sw	s8,4(sp)
80011914:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/console.c:9
	return *((volatile char *)(KSEG1 + DEV_CONS_ADDRESS + DEV_CONS_PUTGETCHAR));
80011918:	3c02b000 	lui	v0,0xb000
8001191c:	90420000 	lbu	v0,0(v0)
80011920:	00000000 	nop
80011924:	00021600 	sll	v0,v0,0x18
80011928:	00021603 	sra	v0,v0,0x18
/home/git/21373271/21373271/kern/console.c:10
}
8001192c:	03c0e825 	move	sp,s8
80011930:	8fbe0004 	lw	s8,4(sp)
80011934:	27bd0008 	addiu	sp,sp,8
80011938:	03e00008 	jr	ra
8001193c:	00000000 	nop

80011940 <halt>:
halt():
/home/git/21373271/21373271/kern/console.c:12

void halt(void) {
80011940:	27bdfff8 	addiu	sp,sp,-8
80011944:	afbe0004 	sw	s8,4(sp)
80011948:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/console.c:13
	*((volatile char *)(KSEG1 + DEV_CONS_ADDRESS + DEV_CONS_HALT)) = 0;
8001194c:	3c02b000 	lui	v0,0xb000
80011950:	34420010 	ori	v0,v0,0x10
80011954:	a0400000 	sb	zero,0(v0)
/home/git/21373271/21373271/kern/console.c:14
}
80011958:	00000000 	nop
8001195c:	03c0e825 	move	sp,s8
80011960:	8fbe0004 	lw	s8,4(sp)
80011964:	27bd0008 	addiu	sp,sp,8
80011968:	03e00008 	jr	ra
8001196c:	00000000 	nop

80011970 <page2ppn>:
page2ppn():
/home/git/21373271/21373271/kern/../include/pmap.h:28
};

extern struct Page *pages;
extern struct Page_list page_free_list;

static inline u_long page2ppn(struct Page *pp) {
80011970:	27bdfff8 	addiu	sp,sp,-8
80011974:	afbe0004 	sw	s8,4(sp)
80011978:	03a0f025 	move	s8,sp
8001197c:	afc40008 	sw	a0,8(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:29
	return pp - pages;
80011980:	3c028007 	lui	v0,0x8007
80011984:	8c42b028 	lw	v0,-20440(v0)
80011988:	8fc30008 	lw	v1,8(s8)
8001198c:	00000000 	nop
80011990:	00621023 	subu	v0,v1,v0
80011994:	00021883 	sra	v1,v0,0x2
80011998:	00601025 	move	v0,v1
8001199c:	00021080 	sll	v0,v0,0x2
800119a0:	00431021 	addu	v0,v0,v1
800119a4:	00021900 	sll	v1,v0,0x4
800119a8:	00431021 	addu	v0,v0,v1
800119ac:	00021a00 	sll	v1,v0,0x8
800119b0:	00431021 	addu	v0,v0,v1
800119b4:	00021c00 	sll	v1,v0,0x10
800119b8:	00431021 	addu	v0,v0,v1
800119bc:	00021023 	negu	v0,v0
/home/git/21373271/21373271/kern/../include/pmap.h:30
}
800119c0:	03c0e825 	move	sp,s8
800119c4:	8fbe0004 	lw	s8,4(sp)
800119c8:	27bd0008 	addiu	sp,sp,8
800119cc:	03e00008 	jr	ra
800119d0:	00000000 	nop

800119d4 <page2pa>:
page2pa():
/home/git/21373271/21373271/kern/../include/pmap.h:32

static inline u_long page2pa(struct Page *pp) {
800119d4:	27bdffe8 	addiu	sp,sp,-24
800119d8:	afbf0014 	sw	ra,20(sp)
800119dc:	afbe0010 	sw	s8,16(sp)
800119e0:	03a0f025 	move	s8,sp
800119e4:	afc40018 	sw	a0,24(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:33
	return page2ppn(pp) << PGSHIFT;
800119e8:	8fc40018 	lw	a0,24(s8)
800119ec:	0c00465c 	jal	80011970 <page2ppn>
800119f0:	00000000 	nop
800119f4:	00021300 	sll	v0,v0,0xc
/home/git/21373271/21373271/kern/../include/pmap.h:34
}
800119f8:	03c0e825 	move	sp,s8
800119fc:	8fbf0014 	lw	ra,20(sp)
80011a00:	8fbe0010 	lw	s8,16(sp)
80011a04:	27bd0018 	addiu	sp,sp,24
80011a08:	03e00008 	jr	ra
80011a0c:	00000000 	nop

80011a10 <pa2page>:
pa2page():
/home/git/21373271/21373271/kern/../include/pmap.h:36

static inline struct Page *pa2page(u_long pa) {
80011a10:	27bdffe0 	addiu	sp,sp,-32
80011a14:	afbf001c 	sw	ra,28(sp)
80011a18:	afbe0018 	sw	s8,24(sp)
80011a1c:	03a0f025 	move	s8,sp
80011a20:	afc40020 	sw	a0,32(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:37
	if (PPN(pa) >= npage) {
80011a24:	8fc20020 	lw	v0,32(s8)
80011a28:	00000000 	nop
80011a2c:	00021b02 	srl	v1,v0,0xc
80011a30:	3c028007 	lui	v0,0x8007
80011a34:	8c42b020 	lw	v0,-20448(v0)
80011a38:	00000000 	nop
80011a3c:	0062102b 	sltu	v0,v1,v0
80011a40:	1440000d 	bnez	v0,80011a78 <pa2page+0x68>
80011a44:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:38
		panic("pa2page called with invalid pa: %x", pa);
80011a48:	8fc20020 	lw	v0,32(s8)
80011a4c:	00000000 	nop
80011a50:	afa20010 	sw	v0,16(sp)
80011a54:	3c028002 	lui	v0,0x8002
80011a58:	24478760 	addiu	a3,v0,-30880
80011a5c:	3c028002 	lui	v0,0x8002
80011a60:	24468bbc 	addiu	a2,v0,-29764
80011a64:	24050026 	li	a1,38
80011a68:	3c028002 	lui	v0,0x8002
80011a6c:	24448784 	addiu	a0,v0,-30844
80011a70:	0c004f90 	jal	80013e40 <_panic>
80011a74:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:40
	}
	return &pages[PPN(pa)];
80011a78:	3c028007 	lui	v0,0x8007
80011a7c:	8c44b028 	lw	a0,-20440(v0)
80011a80:	8fc20020 	lw	v0,32(s8)
80011a84:	00000000 	nop
80011a88:	00021b02 	srl	v1,v0,0xc
80011a8c:	00601025 	move	v0,v1
80011a90:	00021040 	sll	v0,v0,0x1
80011a94:	00431021 	addu	v0,v0,v1
80011a98:	00021080 	sll	v0,v0,0x2
80011a9c:	00821021 	addu	v0,a0,v0
/home/git/21373271/21373271/kern/../include/pmap.h:41
}
80011aa0:	03c0e825 	move	sp,s8
80011aa4:	8fbf001c 	lw	ra,28(sp)
80011aa8:	8fbe0018 	lw	s8,24(sp)
80011aac:	27bd0020 	addiu	sp,sp,32
80011ab0:	03e00008 	jr	ra
80011ab4:	00000000 	nop

80011ab8 <page2kva>:
page2kva():
/home/git/21373271/21373271/kern/../include/pmap.h:43

static inline u_long page2kva(struct Page *pp) {
80011ab8:	27bdffd8 	addiu	sp,sp,-40
80011abc:	afbf0024 	sw	ra,36(sp)
80011ac0:	afbe0020 	sw	s8,32(sp)
80011ac4:	03a0f025 	move	s8,sp
80011ac8:	afc40028 	sw	a0,40(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:44
	return KADDR(page2pa(pp));
80011acc:	8fc40028 	lw	a0,40(s8)
80011ad0:	0c004675 	jal	800119d4 <page2pa>
80011ad4:	00000000 	nop
80011ad8:	00021302 	srl	v0,v0,0xc
80011adc:	afc20018 	sw	v0,24(s8)
80011ae0:	3c028007 	lui	v0,0x8007
80011ae4:	8c42b020 	lw	v0,-20448(v0)
80011ae8:	8fc30018 	lw	v1,24(s8)
80011aec:	00000000 	nop
80011af0:	0062102b 	sltu	v0,v1,v0
80011af4:	1440000e 	bnez	v0,80011b30 <page2kva+0x78>
80011af8:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:44 (discriminator 1)
80011afc:	8fc40028 	lw	a0,40(s8)
80011b00:	0c004675 	jal	800119d4 <page2pa>
80011b04:	00000000 	nop
80011b08:	afa20010 	sw	v0,16(sp)
80011b0c:	3c028002 	lui	v0,0x8002
80011b10:	24478798 	addiu	a3,v0,-30824
80011b14:	3c028002 	lui	v0,0x8002
80011b18:	24468bd0 	addiu	a2,v0,-29744
80011b1c:	2405002c 	li	a1,44
80011b20:	3c028002 	lui	v0,0x8002
80011b24:	24448784 	addiu	a0,v0,-30844
80011b28:	0c004f90 	jal	80013e40 <_panic>
80011b2c:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:44 (discriminator 3)
80011b30:	8fc40028 	lw	a0,40(s8)
80011b34:	0c004675 	jal	800119d4 <page2pa>
80011b38:	00000000 	nop
80011b3c:	00401825 	move	v1,v0
80011b40:	3c028000 	lui	v0,0x8000
80011b44:	00621021 	addu	v0,v1,v0
/home/git/21373271/21373271/kern/../include/pmap.h:45 (discriminator 3)
}
80011b48:	03c0e825 	move	sp,s8
80011b4c:	8fbf0024 	lw	ra,36(sp)
80011b50:	8fbe0020 	lw	s8,32(sp)
80011b54:	27bd0028 	addiu	sp,sp,40
80011b58:	03e00008 	jr	ra
80011b5c:	00000000 	nop

80011b60 <va2pa>:
va2pa():
/home/git/21373271/21373271/kern/../include/pmap.h:47

static inline u_long va2pa(Pde *pgdir, u_long va) {
80011b60:	27bdffd8 	addiu	sp,sp,-40
80011b64:	afbf0024 	sw	ra,36(sp)
80011b68:	afbe0020 	sw	s8,32(sp)
80011b6c:	03a0f025 	move	s8,sp
80011b70:	afc40028 	sw	a0,40(s8)
80011b74:	afc5002c 	sw	a1,44(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:50
	Pte *p;

	pgdir = &pgdir[PDX(va)];
80011b78:	8fc2002c 	lw	v0,44(s8)
80011b7c:	00000000 	nop
80011b80:	00021582 	srl	v0,v0,0x16
80011b84:	00021080 	sll	v0,v0,0x2
80011b88:	8fc30028 	lw	v1,40(s8)
80011b8c:	00000000 	nop
80011b90:	00621021 	addu	v0,v1,v0
80011b94:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:51
	if (!(*pgdir & PTE_V)) {
80011b98:	8fc20028 	lw	v0,40(s8)
80011b9c:	00000000 	nop
80011ba0:	8c420000 	lw	v0,0(v0)
80011ba4:	00000000 	nop
80011ba8:	30420200 	andi	v0,v0,0x200
80011bac:	14400004 	bnez	v0,80011bc0 <va2pa+0x60>
80011bb0:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:52
		return ~0;
80011bb4:	2402ffff 	li	v0,-1
80011bb8:	10000040 	b	80011cbc <va2pa+0x15c>
80011bbc:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:54
	}
	p = (Pte *)KADDR(PTE_ADDR(*pgdir));
80011bc0:	8fc20028 	lw	v0,40(s8)
80011bc4:	00000000 	nop
80011bc8:	8c420000 	lw	v0,0(v0)
80011bcc:	00000000 	nop
80011bd0:	00021302 	srl	v0,v0,0xc
80011bd4:	afc20018 	sw	v0,24(s8)
80011bd8:	3c028007 	lui	v0,0x8007
80011bdc:	8c42b020 	lw	v0,-20448(v0)
80011be0:	8fc30018 	lw	v1,24(s8)
80011be4:	00000000 	nop
80011be8:	0062102b 	sltu	v0,v1,v0
80011bec:	14400010 	bnez	v0,80011c30 <va2pa+0xd0>
80011bf0:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:54 (discriminator 1)
80011bf4:	8fc20028 	lw	v0,40(s8)
80011bf8:	00000000 	nop
80011bfc:	8c430000 	lw	v1,0(v0)
80011c00:	2402f000 	li	v0,-4096
80011c04:	00621024 	and	v0,v1,v0
80011c08:	afa20010 	sw	v0,16(sp)
80011c0c:	3c028002 	lui	v0,0x8002
80011c10:	24478798 	addiu	a3,v0,-30824
80011c14:	3c028002 	lui	v0,0x8002
80011c18:	24468c18 	addiu	a2,v0,-29672
80011c1c:	24050036 	li	a1,54
80011c20:	3c028002 	lui	v0,0x8002
80011c24:	24448784 	addiu	a0,v0,-30844
80011c28:	0c004f90 	jal	80013e40 <_panic>
80011c2c:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:54 (discriminator 3)
80011c30:	8fc20028 	lw	v0,40(s8)
80011c34:	00000000 	nop
80011c38:	8c430000 	lw	v1,0(v0)
80011c3c:	2402f000 	li	v0,-4096
80011c40:	00621824 	and	v1,v1,v0
80011c44:	3c028000 	lui	v0,0x8000
80011c48:	00621021 	addu	v0,v1,v0
80011c4c:	afc2001c 	sw	v0,28(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:55 (discriminator 3)
	if (!(p[PTX(va)] & PTE_V)) {
80011c50:	8fc2002c 	lw	v0,44(s8)
80011c54:	00000000 	nop
80011c58:	00021302 	srl	v0,v0,0xc
80011c5c:	304203ff 	andi	v0,v0,0x3ff
80011c60:	00021080 	sll	v0,v0,0x2
80011c64:	8fc3001c 	lw	v1,28(s8)
80011c68:	00000000 	nop
80011c6c:	00621021 	addu	v0,v1,v0
80011c70:	8c420000 	lw	v0,0(v0)
80011c74:	00000000 	nop
80011c78:	30420200 	andi	v0,v0,0x200
80011c7c:	14400004 	bnez	v0,80011c90 <va2pa+0x130>
80011c80:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:56
		return ~0;
80011c84:	2402ffff 	li	v0,-1
80011c88:	1000000c 	b	80011cbc <va2pa+0x15c>
80011c8c:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:58
	}
	return PTE_ADDR(p[PTX(va)]);
80011c90:	8fc2002c 	lw	v0,44(s8)
80011c94:	00000000 	nop
80011c98:	00021302 	srl	v0,v0,0xc
80011c9c:	304203ff 	andi	v0,v0,0x3ff
80011ca0:	00021080 	sll	v0,v0,0x2
80011ca4:	8fc3001c 	lw	v1,28(s8)
80011ca8:	00000000 	nop
80011cac:	00621021 	addu	v0,v1,v0
80011cb0:	8c430000 	lw	v1,0(v0)
80011cb4:	2402f000 	li	v0,-4096
80011cb8:	00621024 	and	v0,v1,v0
/home/git/21373271/21373271/kern/../include/pmap.h:59
}
80011cbc:	03c0e825 	move	sp,s8
80011cc0:	8fbf0024 	lw	ra,36(sp)
80011cc4:	8fbe0020 	lw	s8,32(sp)
80011cc8:	27bd0028 	addiu	sp,sp,40
80011ccc:	03e00008 	jr	ra
80011cd0:	00000000 	nop

80011cd4 <asid_alloc>:
asid_alloc():
/home/git/21373271/21373271/kern/env.c:32
 *
 * Post-Condition:
 *   return 0 and set '*asid' to the allocated ASID on success.
 *   return -E_NO_FREE_ENV if no ASID is available.
 */
static int asid_alloc(u_int *asid) {
80011cd4:	27bdffe8 	addiu	sp,sp,-24
80011cd8:	afbe0014 	sw	s8,20(sp)
80011cdc:	03a0f025 	move	s8,sp
80011ce0:	afc40018 	sw	a0,24(s8)
/home/git/21373271/21373271/kern/env.c:33
	for (u_int i = 0; i < NASID; ++i) {
80011ce4:	afc00000 	sw	zero,0(s8)
80011ce8:	10000035 	b	80011dc0 <asid_alloc+0xec>
80011cec:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:34
		int index = i >> 5;
80011cf0:	8fc20000 	lw	v0,0(s8)
80011cf4:	00000000 	nop
80011cf8:	00021142 	srl	v0,v0,0x5
80011cfc:	afc20004 	sw	v0,4(s8)
/home/git/21373271/21373271/kern/env.c:35
		int inner = i & 31;
80011d00:	8fc20000 	lw	v0,0(s8)
80011d04:	00000000 	nop
80011d08:	3042001f 	andi	v0,v0,0x1f
80011d0c:	afc20008 	sw	v0,8(s8)
/home/git/21373271/21373271/kern/env.c:36
		if ((asid_bitmap[index] & (1 << inner)) == 0) {
80011d10:	3c028007 	lui	v0,0x8007
80011d14:	8fc30004 	lw	v1,4(s8)
80011d18:	00000000 	nop
80011d1c:	00031880 	sll	v1,v1,0x2
80011d20:	2442b014 	addiu	v0,v0,-20460
80011d24:	00621021 	addu	v0,v1,v0
80011d28:	8c420000 	lw	v0,0(v0)
80011d2c:	24040001 	li	a0,1
80011d30:	8fc30008 	lw	v1,8(s8)
80011d34:	00000000 	nop
80011d38:	00641804 	sllv	v1,a0,v1
80011d3c:	00431024 	and	v0,v0,v1
80011d40:	1440001b 	bnez	v0,80011db0 <asid_alloc+0xdc>
80011d44:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:37
			asid_bitmap[index] |= 1 << inner;
80011d48:	3c028007 	lui	v0,0x8007
80011d4c:	8fc30004 	lw	v1,4(s8)
80011d50:	00000000 	nop
80011d54:	00031880 	sll	v1,v1,0x2
80011d58:	2442b014 	addiu	v0,v0,-20460
80011d5c:	00621021 	addu	v0,v1,v0
80011d60:	8c420000 	lw	v0,0(v0)
80011d64:	24040001 	li	a0,1
80011d68:	8fc30008 	lw	v1,8(s8)
80011d6c:	00000000 	nop
80011d70:	00641804 	sllv	v1,a0,v1
80011d74:	00431825 	or	v1,v0,v1
80011d78:	3c028007 	lui	v0,0x8007
80011d7c:	8fc40004 	lw	a0,4(s8)
80011d80:	00000000 	nop
80011d84:	00042080 	sll	a0,a0,0x2
80011d88:	2442b014 	addiu	v0,v0,-20460
80011d8c:	00821021 	addu	v0,a0,v0
80011d90:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/env.c:38
			*asid = i;
80011d94:	8fc20018 	lw	v0,24(s8)
80011d98:	8fc30000 	lw	v1,0(s8)
80011d9c:	00000000 	nop
80011da0:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/env.c:39
			return 0;
80011da4:	00001025 	move	v0,zero
80011da8:	1000000b 	b	80011dd8 <asid_alloc+0x104>
80011dac:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:33 (discriminator 2)
	for (u_int i = 0; i < NASID; ++i) {
80011db0:	8fc20000 	lw	v0,0(s8)
80011db4:	00000000 	nop
80011db8:	24420001 	addiu	v0,v0,1
80011dbc:	afc20000 	sw	v0,0(s8)
/home/git/21373271/21373271/kern/env.c:33 (discriminator 1)
80011dc0:	8fc20000 	lw	v0,0(s8)
80011dc4:	00000000 	nop
80011dc8:	2c420040 	sltiu	v0,v0,64
80011dcc:	1440ffc8 	bnez	v0,80011cf0 <asid_alloc+0x1c>
80011dd0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:42
		}
	}
	return -E_NO_FREE_ENV;
80011dd4:	2402fffa 	li	v0,-6
/home/git/21373271/21373271/kern/env.c:43
}
80011dd8:	03c0e825 	move	sp,s8
80011ddc:	8fbe0014 	lw	s8,20(sp)
80011de0:	27bd0018 	addiu	sp,sp,24
80011de4:	03e00008 	jr	ra
80011de8:	00000000 	nop

80011dec <asid_free>:
asid_free():
/home/git/21373271/21373271/kern/env.c:54
 *  The ASID is allocated by 'asid_alloc'.
 *
 * Post-Condition:
 *  The ASID is freed and may be allocated again later.
 */
static void asid_free(u_int i) {
80011dec:	27bdfff0 	addiu	sp,sp,-16
80011df0:	afbe000c 	sw	s8,12(sp)
80011df4:	03a0f025 	move	s8,sp
80011df8:	afc40010 	sw	a0,16(s8)
/home/git/21373271/21373271/kern/env.c:55
	int index = i >> 5;
80011dfc:	8fc20010 	lw	v0,16(s8)
80011e00:	00000000 	nop
80011e04:	00021142 	srl	v0,v0,0x5
80011e08:	afc20000 	sw	v0,0(s8)
/home/git/21373271/21373271/kern/env.c:56
	int inner = i & 31;
80011e0c:	8fc20010 	lw	v0,16(s8)
80011e10:	00000000 	nop
80011e14:	3042001f 	andi	v0,v0,0x1f
80011e18:	afc20004 	sw	v0,4(s8)
/home/git/21373271/21373271/kern/env.c:57
	asid_bitmap[index] &= ~(1 << inner);
80011e1c:	3c028007 	lui	v0,0x8007
80011e20:	8fc30000 	lw	v1,0(s8)
80011e24:	00000000 	nop
80011e28:	00031880 	sll	v1,v1,0x2
80011e2c:	2442b014 	addiu	v0,v0,-20460
80011e30:	00621021 	addu	v0,v1,v0
80011e34:	8c420000 	lw	v0,0(v0)
80011e38:	24040001 	li	a0,1
80011e3c:	8fc30004 	lw	v1,4(s8)
80011e40:	00000000 	nop
80011e44:	00641804 	sllv	v1,a0,v1
80011e48:	00031827 	nor	v1,zero,v1
80011e4c:	00431824 	and	v1,v0,v1
80011e50:	3c028007 	lui	v0,0x8007
80011e54:	8fc40000 	lw	a0,0(s8)
80011e58:	00000000 	nop
80011e5c:	00042080 	sll	a0,a0,0x2
80011e60:	2442b014 	addiu	v0,v0,-20460
80011e64:	00821021 	addu	v0,a0,v0
80011e68:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/env.c:58
}
80011e6c:	00000000 	nop
80011e70:	03c0e825 	move	sp,s8
80011e74:	8fbe000c 	lw	s8,12(sp)
80011e78:	27bd0010 	addiu	sp,sp,16
80011e7c:	03e00008 	jr	ra
80011e80:	00000000 	nop

80011e84 <map_segment>:
map_segment():
/home/git/21373271/21373271/kern/env.c:67
 *   permission bits 'perm | PTE_V' for the entries.
 *
 * Pre-Condition:
 *   'pa', 'va' and 'size' are aligned to 'BY2PG'.
 */
static void map_segment(Pde *pgdir, u_int asid, u_long pa, u_long va, u_int size, u_int perm) {
80011e84:	27bdffd8 	addiu	sp,sp,-40
80011e88:	afbf0024 	sw	ra,36(sp)
80011e8c:	afbe0020 	sw	s8,32(sp)
80011e90:	03a0f025 	move	s8,sp
80011e94:	afc40028 	sw	a0,40(s8)
80011e98:	afc5002c 	sw	a1,44(s8)
80011e9c:	afc60030 	sw	a2,48(s8)
80011ea0:	afc70034 	sw	a3,52(s8)
/home/git/21373271/21373271/kern/env.c:69

	assert(pa % BY2PG == 0);
80011ea4:	8fc20030 	lw	v0,48(s8)
80011ea8:	00000000 	nop
80011eac:	30420fff 	andi	v0,v0,0xfff
80011eb0:	1040000d 	beqz	v0,80011ee8 <map_segment+0x64>
80011eb4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:69 (discriminator 1)
80011eb8:	3c028002 	lui	v0,0x8002
80011ebc:	244287dc 	addiu	v0,v0,-30756
80011ec0:	afa20010 	sw	v0,16(sp)
80011ec4:	3c028002 	lui	v0,0x8002
80011ec8:	244787bc 	addiu	a3,v0,-30788
80011ecc:	3c028002 	lui	v0,0x8002
80011ed0:	24468bb0 	addiu	a2,v0,-29776
80011ed4:	24050045 	li	a1,69
80011ed8:	3c028002 	lui	v0,0x8002
80011edc:	244487d4 	addiu	a0,v0,-30764
80011ee0:	0c004f90 	jal	80013e40 <_panic>
80011ee4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:70
	assert(va % BY2PG == 0);
80011ee8:	8fc20034 	lw	v0,52(s8)
80011eec:	00000000 	nop
80011ef0:	30420fff 	andi	v0,v0,0xfff
80011ef4:	1040000d 	beqz	v0,80011f2c <map_segment+0xa8>
80011ef8:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:70 (discriminator 1)
80011efc:	3c028002 	lui	v0,0x8002
80011f00:	244287ec 	addiu	v0,v0,-30740
80011f04:	afa20010 	sw	v0,16(sp)
80011f08:	3c028002 	lui	v0,0x8002
80011f0c:	244787bc 	addiu	a3,v0,-30788
80011f10:	3c028002 	lui	v0,0x8002
80011f14:	24468bb0 	addiu	a2,v0,-29776
80011f18:	24050046 	li	a1,70
80011f1c:	3c028002 	lui	v0,0x8002
80011f20:	244487d4 	addiu	a0,v0,-30764
80011f24:	0c004f90 	jal	80013e40 <_panic>
80011f28:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:71
	assert(size % BY2PG == 0);
80011f2c:	8fc20038 	lw	v0,56(s8)
80011f30:	00000000 	nop
80011f34:	30420fff 	andi	v0,v0,0xfff
80011f38:	1040000d 	beqz	v0,80011f70 <map_segment+0xec>
80011f3c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:71 (discriminator 1)
80011f40:	3c028002 	lui	v0,0x8002
80011f44:	244287fc 	addiu	v0,v0,-30724
80011f48:	afa20010 	sw	v0,16(sp)
80011f4c:	3c028002 	lui	v0,0x8002
80011f50:	244787bc 	addiu	a3,v0,-30788
80011f54:	3c028002 	lui	v0,0x8002
80011f58:	24468bb0 	addiu	a2,v0,-29776
80011f5c:	24050047 	li	a1,71
80011f60:	3c028002 	lui	v0,0x8002
80011f64:	244487d4 	addiu	a0,v0,-30764
80011f68:	0c004f90 	jal	80013e40 <_panic>
80011f6c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:74

	/* Step 1: Map virtual address space to physical address space. */
	for (int i = 0; i < size; i += BY2PG) 
80011f70:	afc00018 	sw	zero,24(s8)
80011f74:	1000001a 	b	80011fe0 <map_segment+0x15c>
80011f78:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:76 (discriminator 3)
	{
		page_insert(pgdir,asid,pa2page(pa+i),va+i,perm);
80011f7c:	8fc30018 	lw	v1,24(s8)
80011f80:	8fc20030 	lw	v0,48(s8)
80011f84:	00000000 	nop
80011f88:	00621021 	addu	v0,v1,v0
80011f8c:	00402025 	move	a0,v0
80011f90:	0c004684 	jal	80011a10 <pa2page>
80011f94:	00000000 	nop
80011f98:	00402025 	move	a0,v0
80011f9c:	8fc30018 	lw	v1,24(s8)
80011fa0:	8fc20034 	lw	v0,52(s8)
80011fa4:	00000000 	nop
80011fa8:	00621821 	addu	v1,v1,v0
80011fac:	8fc2003c 	lw	v0,60(s8)
80011fb0:	00000000 	nop
80011fb4:	afa20010 	sw	v0,16(sp)
80011fb8:	00603825 	move	a3,v1
80011fbc:	00803025 	move	a2,a0
80011fc0:	8fc5002c 	lw	a1,44(s8)
80011fc4:	8fc40028 	lw	a0,40(s8)
80011fc8:	0c00533a 	jal	80014ce8 <page_insert>
80011fcc:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:74 (discriminator 3)
	for (int i = 0; i < size; i += BY2PG) 
80011fd0:	8fc20018 	lw	v0,24(s8)
80011fd4:	00000000 	nop
80011fd8:	24421000 	addiu	v0,v0,4096
80011fdc:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/env.c:74 (discriminator 1)
80011fe0:	8fc20018 	lw	v0,24(s8)
80011fe4:	8fc30038 	lw	v1,56(s8)
80011fe8:	00000000 	nop
80011fec:	0043102b 	sltu	v0,v0,v1
80011ff0:	1440ffe2 	bnez	v0,80011f7c <map_segment+0xf8>
80011ff4:	00000000 	nop
	...
/home/git/21373271/21373271/kern/env.c:84
		 *  Map the virtual page 'va + i' to the physical page 'pa + i' using 'page_insert'.
		 *  Use 'pa2page' to get the 'struct Page *' of the physical address.
		 */
		/* Exercise 3.2: Your code here. */
	}
}
80012000:	03c0e825 	move	sp,s8
80012004:	8fbf0024 	lw	ra,36(sp)
80012008:	8fbe0020 	lw	s8,32(sp)
8001200c:	27bd0028 	addiu	sp,sp,40
80012010:	03e00008 	jr	ra
80012014:	00000000 	nop

80012018 <mkenvid>:
mkenvid():
/home/git/21373271/21373271/kern/env.c:95
 *  e should be valid
 *
 * Post-Condition:
 *  return e's envid on success
 */
u_int mkenvid(struct Env *e) {
80012018:	27bdfff8 	addiu	sp,sp,-8
8001201c:	afbe0004 	sw	s8,4(sp)
80012020:	03a0f025 	move	s8,sp
80012024:	afc40008 	sw	a0,8(s8)
/home/git/21373271/21373271/kern/env.c:97
	static u_int i = 0;
	return ((++i) << (1 + LOG2NENV)) | (e - envs);
80012028:	3c028007 	lui	v0,0x8007
8001202c:	8c42b01c 	lw	v0,-20452(v0)
80012030:	00000000 	nop
80012034:	24430001 	addiu	v1,v0,1
80012038:	3c028007 	lui	v0,0x8007
8001203c:	ac43b01c 	sw	v1,-20452(v0)
80012040:	3c028007 	lui	v0,0x8007
80012044:	8c42b01c 	lw	v0,-20452(v0)
80012048:	00000000 	nop
8001204c:	000212c0 	sll	v0,v0,0xb
80012050:	8fc40008 	lw	a0,8(s8)
80012054:	3c038003 	lui	v1,0x8003
80012058:	24634000 	addiu	v1,v1,16384
8001205c:	00831823 	subu	v1,a0,v1
80012060:	00032083 	sra	a0,v1,0x2
80012064:	3c03586f 	lui	v1,0x586f
80012068:	3463b587 	ori	v1,v1,0xb587
8001206c:	00830018 	mult	a0,v1
80012070:	00001812 	mflo	v1
80012074:	00431025 	or	v0,v0,v1
/home/git/21373271/21373271/kern/env.c:98
}
80012078:	03c0e825 	move	sp,s8
8001207c:	8fbe0004 	lw	s8,4(sp)
80012080:	27bd0008 	addiu	sp,sp,8
80012084:	03e00008 	jr	ra
80012088:	00000000 	nop

8001208c <envid2env>:
envid2env():
/home/git/21373271/21373271/kern/env.c:113
 *
 * Post-Condition:
 *   return 0 on success, and set '*penv' to the env.
 *   return -E_BAD_ENV on error (invalid 'envid' or 'checkperm' violated).
 */
int envid2env(u_int envid, struct Env **penv, int checkperm) {
8001208c:	27bdfff0 	addiu	sp,sp,-16
80012090:	afbe000c 	sw	s8,12(sp)
80012094:	03a0f025 	move	s8,sp
80012098:	afc40010 	sw	a0,16(s8)
8001209c:	afc50014 	sw	a1,20(s8)
800120a0:	afc60018 	sw	a2,24(s8)
/home/git/21373271/21373271/kern/env.c:116
	struct Env *e;
	
	if (envid == 0)
800120a4:	8fc20010 	lw	v0,16(s8)
800120a8:	00000000 	nop
800120ac:	14400009 	bnez	v0,800120d4 <envid2env+0x48>
800120b0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:118
	{
		*penv = curenv;
800120b4:	3c028007 	lui	v0,0x8007
800120b8:	8c43b000 	lw	v1,-20480(v0)
800120bc:	8fc20014 	lw	v0,20(s8)
800120c0:	00000000 	nop
800120c4:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/env.c:119
		return 0;
800120c8:	00001025 	move	v0,zero
800120cc:	1000003d 	b	800121c4 <envid2env+0x138>
800120d0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:123
	}
	else
	{
		e  = &envs[ENVX(envid)];
800120d4:	8fc20010 	lw	v0,16(s8)
800120d8:	00000000 	nop
800120dc:	304303ff 	andi	v1,v0,0x3ff
800120e0:	00601025 	move	v0,v1
800120e4:	000210c0 	sll	v0,v0,0x3
800120e8:	00431023 	subu	v0,v0,v1
800120ec:	000210c0 	sll	v0,v0,0x3
800120f0:	00431023 	subu	v0,v0,v1
800120f4:	00021080 	sll	v0,v0,0x2
800120f8:	3c038003 	lui	v1,0x8003
800120fc:	24634000 	addiu	v1,v1,16384
80012100:	00431021 	addu	v0,v0,v1
80012104:	afc20000 	sw	v0,0(s8)
/home/git/21373271/21373271/kern/env.c:132
	 *   If envid is zero, set 'penv' to 'curenv'.
	 *   You may want to use 'ENVX'.
	 */
	/* Exercise 4.3: Your code here. (1/2) */

	if (e->env_status == ENV_FREE || e->env_id != envid) {
80012108:	8fc20000 	lw	v0,0(s8)
8001210c:	00000000 	nop
80012110:	8c4200ac 	lw	v0,172(v0)
80012114:	00000000 	nop
80012118:	10400008 	beqz	v0,8001213c <envid2env+0xb0>
8001211c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:132 (discriminator 1)
80012120:	8fc20000 	lw	v0,0(s8)
80012124:	00000000 	nop
80012128:	8c4200a0 	lw	v0,160(v0)
8001212c:	8fc30010 	lw	v1,16(s8)
80012130:	00000000 	nop
80012134:	10620004 	beq	v1,v0,80012148 <envid2env+0xbc>
80012138:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:133
		return -E_BAD_ENV;
8001213c:	2402fffe 	li	v0,-2
80012140:	10000020 	b	800121c4 <envid2env+0x138>
80012144:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:143
	 *   Check whether the calling env has sufficient permissions to manipulate the
	 *   specified env, i.e. 'e' is either 'curenv' or its immediate child.
	 *   If violated, return '-E_BAD_ENV'.
	 */
	/* Exercise 4.3: Your code here. (2/2) */
	if (checkperm != 0 && e != curenv && curenv->env_id != e->env_parent_id) 
80012148:	8fc20018 	lw	v0,24(s8)
8001214c:	00000000 	nop
80012150:	10400017 	beqz	v0,800121b0 <envid2env+0x124>
80012154:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:143 (discriminator 1)
80012158:	3c028007 	lui	v0,0x8007
8001215c:	8c42b000 	lw	v0,-20480(v0)
80012160:	8fc30000 	lw	v1,0(s8)
80012164:	00000000 	nop
80012168:	10620011 	beq	v1,v0,800121b0 <envid2env+0x124>
8001216c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:143 (discriminator 2)
80012170:	3c028007 	lui	v0,0x8007
80012174:	8c42b000 	lw	v0,-20480(v0)
80012178:	00000000 	nop
8001217c:	8c4300a0 	lw	v1,160(v0)
80012180:	8fc20000 	lw	v0,0(s8)
80012184:	00000000 	nop
80012188:	8c4200a8 	lw	v0,168(v0)
8001218c:	00000000 	nop
80012190:	10620007 	beq	v1,v0,800121b0 <envid2env+0x124>
80012194:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:145
	{
		*penv = NULL;
80012198:	8fc20014 	lw	v0,20(s8)
8001219c:	00000000 	nop
800121a0:	ac400000 	sw	zero,0(v0)
/home/git/21373271/21373271/kern/env.c:146
		return -E_BAD_ENV;
800121a4:	2402fffe 	li	v0,-2
800121a8:	10000006 	b	800121c4 <envid2env+0x138>
800121ac:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:149
	}
	/* Step 3: Assign 'e' to '*penv'. */
	*penv = e;
800121b0:	8fc20014 	lw	v0,20(s8)
800121b4:	8fc30000 	lw	v1,0(s8)
800121b8:	00000000 	nop
800121bc:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/env.c:150
	return 0;
800121c0:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/env.c:151
}
800121c4:	03c0e825 	move	sp,s8
800121c8:	8fbe000c 	lw	s8,12(sp)
800121cc:	27bd0010 	addiu	sp,sp,16
800121d0:	03e00008 	jr	ra
800121d4:	00000000 	nop

800121d8 <env_init>:
env_init():
/home/git/21373271/21373271/kern/env.c:160
 *   Insert in reverse order, so that the first call to 'env_alloc' returns 'envs[0]'.
 *
 * Hints:
 *   You may use these macro definitions below: 'LIST_INIT', 'TAILQ_INIT', 'LIST_INSERT_HEAD'
 */
void env_init(void) {
800121d8:	27bdffc0 	addiu	sp,sp,-64
800121dc:	afbf003c 	sw	ra,60(sp)
800121e0:	afbe0038 	sw	s8,56(sp)
800121e4:	afb00034 	sw	s0,52(sp)
800121e8:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/env.c:166
	int i;
	/* Step 1: Initialize 'env_free_list' with 'LIST_INIT' and 'env_sched_list' with
	 * 'TAILQ_INIT'. */
	/* Exercise 3.1: Your code here. (1/2) */
	
	LIST_INIT(&env_free_list);
800121ec:	3c028007 	lui	v0,0x8007
800121f0:	ac40b00c 	sw	zero,-20468(v0)
/home/git/21373271/21373271/kern/env.c:167
	TAILQ_INIT(&env_sched_list);
800121f4:	3c028007 	lui	v0,0x8007
800121f8:	ac40b004 	sw	zero,-20476(v0)
800121fc:	3c028007 	lui	v0,0x8007
80012200:	2442b004 	addiu	v0,v0,-20476
80012204:	3c038007 	lui	v1,0x8007
80012208:	2463b004 	addiu	v1,v1,-20476
8001220c:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/env.c:173
	/* Step 2: Traverse the elements of 'envs' array, set their status to 'ENV_FREE' and insert
	 * them into the 'env_free_list'. Make sure, after the insertion, the order of envs in the
	 * list should be the same as they are in the 'envs' array. */

	/* Exercise 3.1: Your code here. (2/2) */
	for ( i = NENV-1 ; i >= 0 ; i-- )
80012210:	240203ff 	li	v0,1023
80012214:	afc20018 	sw	v0,24(s8)
80012218:	10000056 	b	80012374 <env_init+0x19c>
8001221c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:175
	{
		LIST_INSERT_HEAD(&env_free_list,&envs[i],env_link);
80012220:	3c028007 	lui	v0,0x8007
80012224:	8c44b00c 	lw	a0,-20468(v0)
80012228:	3c058003 	lui	a1,0x8003
8001222c:	8fc30018 	lw	v1,24(s8)
80012230:	00000000 	nop
80012234:	00601025 	move	v0,v1
80012238:	000210c0 	sll	v0,v0,0x3
8001223c:	00431023 	subu	v0,v0,v1
80012240:	000210c0 	sll	v0,v0,0x3
80012244:	00431023 	subu	v0,v0,v1
80012248:	00021080 	sll	v0,v0,0x2
8001224c:	24a34000 	addiu	v1,a1,16384
80012250:	00431021 	addu	v0,v0,v1
80012254:	ac440098 	sw	a0,152(v0)
80012258:	3c048003 	lui	a0,0x8003
8001225c:	8fc30018 	lw	v1,24(s8)
80012260:	00000000 	nop
80012264:	00601025 	move	v0,v1
80012268:	000210c0 	sll	v0,v0,0x3
8001226c:	00431023 	subu	v0,v0,v1
80012270:	000210c0 	sll	v0,v0,0x3
80012274:	00431023 	subu	v0,v0,v1
80012278:	00021080 	sll	v0,v0,0x2
8001227c:	24834000 	addiu	v1,a0,16384
80012280:	00431021 	addu	v0,v0,v1
80012284:	8c420098 	lw	v0,152(v0)
80012288:	00000000 	nop
8001228c:	10400010 	beqz	v0,800122d0 <env_init+0xf8>
80012290:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:175 (discriminator 1)
80012294:	3c028007 	lui	v0,0x8007
80012298:	8c44b00c 	lw	a0,-20468(v0)
8001229c:	8fc30018 	lw	v1,24(s8)
800122a0:	00000000 	nop
800122a4:	00601025 	move	v0,v1
800122a8:	000210c0 	sll	v0,v0,0x3
800122ac:	00431023 	subu	v0,v0,v1
800122b0:	000210c0 	sll	v0,v0,0x3
800122b4:	00431023 	subu	v0,v0,v1
800122b8:	00021080 	sll	v0,v0,0x2
800122bc:	24430098 	addiu	v1,v0,152
800122c0:	3c028003 	lui	v0,0x8003
800122c4:	24424000 	addiu	v0,v0,16384
800122c8:	00621021 	addu	v0,v1,v0
800122cc:	ac82009c 	sw	v0,156(a0)
/home/git/21373271/21373271/kern/env.c:175 (discriminator 3)
800122d0:	8fc30018 	lw	v1,24(s8)
800122d4:	00000000 	nop
800122d8:	00601025 	move	v0,v1
800122dc:	000210c0 	sll	v0,v0,0x3
800122e0:	00431023 	subu	v0,v0,v1
800122e4:	000210c0 	sll	v0,v0,0x3
800122e8:	00431023 	subu	v0,v0,v1
800122ec:	00021080 	sll	v0,v0,0x2
800122f0:	3c038003 	lui	v1,0x8003
800122f4:	24634000 	addiu	v1,v1,16384
800122f8:	00431821 	addu	v1,v0,v1
800122fc:	3c028007 	lui	v0,0x8007
80012300:	ac43b00c 	sw	v1,-20468(v0)
80012304:	3c028003 	lui	v0,0x8003
80012308:	8fc30018 	lw	v1,24(s8)
8001230c:	24444000 	addiu	a0,v0,16384
80012310:	00601025 	move	v0,v1
80012314:	000210c0 	sll	v0,v0,0x3
80012318:	00431023 	subu	v0,v0,v1
8001231c:	000210c0 	sll	v0,v0,0x3
80012320:	00431023 	subu	v0,v0,v1
80012324:	00021080 	sll	v0,v0,0x2
80012328:	00821021 	addu	v0,a0,v0
8001232c:	3c038007 	lui	v1,0x8007
80012330:	2463b00c 	addiu	v1,v1,-20468
80012334:	ac43009c 	sw	v1,156(v0)
/home/git/21373271/21373271/kern/env.c:176 (discriminator 3)
		envs[i].env_status = ENV_FREE;
80012338:	3c028003 	lui	v0,0x8003
8001233c:	8fc30018 	lw	v1,24(s8)
80012340:	24444000 	addiu	a0,v0,16384
80012344:	00601025 	move	v0,v1
80012348:	000210c0 	sll	v0,v0,0x3
8001234c:	00431023 	subu	v0,v0,v1
80012350:	000210c0 	sll	v0,v0,0x3
80012354:	00431023 	subu	v0,v0,v1
80012358:	00021080 	sll	v0,v0,0x2
8001235c:	00821021 	addu	v0,a0,v0
80012360:	ac4000ac 	sw	zero,172(v0)
/home/git/21373271/21373271/kern/env.c:173 (discriminator 3)
	for ( i = NENV-1 ; i >= 0 ; i-- )
80012364:	8fc20018 	lw	v0,24(s8)
80012368:	00000000 	nop
8001236c:	2442ffff 	addiu	v0,v0,-1
80012370:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/env.c:173 (discriminator 2)
80012374:	8fc20018 	lw	v0,24(s8)
80012378:	00000000 	nop
8001237c:	0441ffa8 	bgez	v0,80012220 <env_init+0x48>
80012380:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:187
	 *
	 * Here we first map them into the *template* page directory 'base_pgdir'.
	 * Later in 'env_setup_vm', we will copy them into each 'env_pgdir'.
	 */
	struct Page *p;
	panic_on(page_alloc(&p));
80012384:	27c20028 	addiu	v0,s8,40
80012388:	00402025 	move	a0,v0
8001238c:	0c00525c 	jal	80014970 <page_alloc>
80012390:	00000000 	nop
80012394:	afc2001c 	sw	v0,28(s8)
80012398:	8fc2001c 	lw	v0,28(s8)
8001239c:	00000000 	nop
800123a0:	1040000d 	beqz	v0,800123d8 <env_init+0x200>
800123a4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:187 (discriminator 1)
800123a8:	8fc2001c 	lw	v0,28(s8)
800123ac:	00000000 	nop
800123b0:	afa20010 	sw	v0,16(sp)
800123b4:	3c028002 	lui	v0,0x8002
800123b8:	24478810 	addiu	a3,v0,-30704
800123bc:	3c028002 	lui	v0,0x8002
800123c0:	24468bc4 	addiu	a2,v0,-29756
800123c4:	240500bb 	li	a1,187
800123c8:	3c028002 	lui	v0,0x8002
800123cc:	244487d4 	addiu	a0,v0,-30764
800123d0:	0c004f90 	jal	80013e40 <_panic>
800123d4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:188
	p->pp_ref++;
800123d8:	8fc20028 	lw	v0,40(s8)
800123dc:	00000000 	nop
800123e0:	94430008 	lhu	v1,8(v0)
800123e4:	00000000 	nop
800123e8:	24630001 	addiu	v1,v1,1
800123ec:	3063ffff 	andi	v1,v1,0xffff
800123f0:	a4430008 	sh	v1,8(v0)
/home/git/21373271/21373271/kern/env.c:190

	base_pgdir = (Pde *)page2kva(p);
800123f4:	8fc20028 	lw	v0,40(s8)
800123f8:	00000000 	nop
800123fc:	00402025 	move	a0,v0
80012400:	0c0046ae 	jal	80011ab8 <page2kva>
80012404:	00000000 	nop
80012408:	00401825 	move	v1,v0
8001240c:	3c028007 	lui	v0,0x8007
80012410:	ac43b010 	sw	v1,-20464(v0)
/home/git/21373271/21373271/kern/env.c:191
	map_segment(base_pgdir, 0, PADDR(pages), UPAGES, ROUND(npage * sizeof(struct Page), BY2PG),
80012414:	3c028007 	lui	v0,0x8007
80012418:	8c50b010 	lw	s0,-20464(v0)
8001241c:	3c028007 	lui	v0,0x8007
80012420:	8c42b028 	lw	v0,-20440(v0)
80012424:	00000000 	nop
80012428:	afc20020 	sw	v0,32(s8)
8001242c:	8fc20020 	lw	v0,32(s8)
80012430:	00000000 	nop
80012434:	0440000d 	bltz	v0,8001246c <env_init+0x294>
80012438:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:191 (discriminator 1)
8001243c:	8fc20020 	lw	v0,32(s8)
80012440:	00000000 	nop
80012444:	afa20010 	sw	v0,16(sp)
80012448:	3c028002 	lui	v0,0x8002
8001244c:	24478830 	addiu	a3,v0,-30672
80012450:	3c028002 	lui	v0,0x8002
80012454:	24468bc4 	addiu	a2,v0,-29756
80012458:	240500bf 	li	a1,191
8001245c:	3c028002 	lui	v0,0x8002
80012460:	244487d4 	addiu	a0,v0,-30764
80012464:	0c004f90 	jal	80013e40 <_panic>
80012468:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:191 (discriminator 3)
8001246c:	8fc30020 	lw	v1,32(s8)
80012470:	3c028000 	lui	v0,0x8000
80012474:	00622021 	addu	a0,v1,v0
80012478:	3c028007 	lui	v0,0x8007
8001247c:	8c43b020 	lw	v1,-20448(v0)
80012480:	00000000 	nop
80012484:	00601025 	move	v0,v1
80012488:	00021040 	sll	v0,v0,0x1
8001248c:	00431021 	addu	v0,v0,v1
80012490:	00021080 	sll	v0,v0,0x2
80012494:	24430fff 	addiu	v1,v0,4095
80012498:	2402f000 	li	v0,-4096
8001249c:	00621024 	and	v0,v1,v0
800124a0:	24030100 	li	v1,256
800124a4:	afa30014 	sw	v1,20(sp)
800124a8:	afa20010 	sw	v0,16(sp)
800124ac:	3c077f80 	lui	a3,0x7f80
800124b0:	00803025 	move	a2,a0
800124b4:	00002825 	move	a1,zero
800124b8:	02002025 	move	a0,s0
800124bc:	0c0047a1 	jal	80011e84 <map_segment>
800124c0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:193 (discriminator 3)
		    PTE_G);
	map_segment(base_pgdir, 0, PADDR(envs), UENVS, ROUND(NENV * sizeof(struct Env), BY2PG),
800124c4:	3c028007 	lui	v0,0x8007
800124c8:	8c50b010 	lw	s0,-20464(v0)
800124cc:	3c028003 	lui	v0,0x8003
800124d0:	24424000 	addiu	v0,v0,16384
800124d4:	afc20024 	sw	v0,36(s8)
800124d8:	8fc20024 	lw	v0,36(s8)
800124dc:	00000000 	nop
800124e0:	0440000d 	bltz	v0,80012518 <env_init+0x340>
800124e4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:193 (discriminator 1)
800124e8:	8fc20024 	lw	v0,36(s8)
800124ec:	00000000 	nop
800124f0:	afa20010 	sw	v0,16(sp)
800124f4:	3c028002 	lui	v0,0x8002
800124f8:	24478830 	addiu	a3,v0,-30672
800124fc:	3c028002 	lui	v0,0x8002
80012500:	24468bc4 	addiu	a2,v0,-29756
80012504:	240500c1 	li	a1,193
80012508:	3c028002 	lui	v0,0x8002
8001250c:	244487d4 	addiu	a0,v0,-30764
80012510:	0c004f90 	jal	80013e40 <_panic>
80012514:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:193 (discriminator 3)
80012518:	8fc30024 	lw	v1,36(s8)
8001251c:	3c028000 	lui	v0,0x8000
80012520:	00621821 	addu	v1,v1,v0
80012524:	24020100 	li	v0,256
80012528:	afa20014 	sw	v0,20(sp)
8001252c:	3c020003 	lui	v0,0x3
80012530:	34427000 	ori	v0,v0,0x7000
80012534:	afa20010 	sw	v0,16(sp)
80012538:	3c077f40 	lui	a3,0x7f40
8001253c:	00603025 	move	a2,v1
80012540:	00002825 	move	a1,zero
80012544:	02002025 	move	a0,s0
80012548:	0c0047a1 	jal	80011e84 <map_segment>
8001254c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:195 (discriminator 3)
		    PTE_G);
}
80012550:	00000000 	nop
80012554:	03c0e825 	move	sp,s8
80012558:	8fbf003c 	lw	ra,60(sp)
8001255c:	8fbe0038 	lw	s8,56(sp)
80012560:	8fb00034 	lw	s0,52(sp)
80012564:	27bd0040 	addiu	sp,sp,64
80012568:	03e00008 	jr	ra
8001256c:	00000000 	nop

80012570 <env_setup_vm>:
env_setup_vm():
/home/git/21373271/21373271/kern/env.c:200

/* Overview:
 *   Initialize the user address space for 'e'.
 */
static int env_setup_vm(struct Env *e) {
80012570:	27bdffd0 	addiu	sp,sp,-48
80012574:	afbf002c 	sw	ra,44(sp)
80012578:	afbe0028 	sw	s8,40(sp)
8001257c:	03a0f025 	move	s8,sp
80012580:	afc40030 	sw	a0,48(s8)
/home/git/21373271/21373271/kern/env.c:209
	 *
	 * Hint:
	 *   You can get the kernel address of a specified physical page using 'page2kva'.
	 */
	struct Page *p;
	try(page_alloc(&p));
80012584:	27c20020 	addiu	v0,s8,32
80012588:	00402025 	move	a0,v0
8001258c:	0c00525c 	jal	80014970 <page_alloc>
80012590:	00000000 	nop
80012594:	afc20018 	sw	v0,24(s8)
80012598:	8fc20018 	lw	v0,24(s8)
8001259c:	00000000 	nop
800125a0:	10400004 	beqz	v0,800125b4 <env_setup_vm+0x44>
800125a4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:209 (discriminator 1)
800125a8:	8fc20018 	lw	v0,24(s8)
800125ac:	1000003f 	b	800126ac <env_setup_vm+0x13c>
800125b0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:211
	/* Exercise 3.3: Your code here. */
	p->pp_ref++;
800125b4:	8fc20020 	lw	v0,32(s8)
800125b8:	00000000 	nop
800125bc:	94430008 	lhu	v1,8(v0)
800125c0:	00000000 	nop
800125c4:	24630001 	addiu	v1,v1,1
800125c8:	3063ffff 	andi	v1,v1,0xffff
800125cc:	a4430008 	sh	v1,8(v0)
/home/git/21373271/21373271/kern/env.c:212
	e->env_pgdir = (Pde*)page2kva(p);
800125d0:	8fc20020 	lw	v0,32(s8)
800125d4:	00000000 	nop
800125d8:	00402025 	move	a0,v0
800125dc:	0c0046ae 	jal	80011ab8 <page2kva>
800125e0:	00000000 	nop
800125e4:	00401825 	move	v1,v0
800125e8:	8fc20030 	lw	v0,48(s8)
800125ec:	00000000 	nop
800125f0:	ac4300b0 	sw	v1,176(v0)
/home/git/21373271/21373271/kern/env.c:218
	/* Step 2: Copy the template page directory 'base_pgdir' to 'e->env_pgdir'. */
	/* Hint:
	 *   As a result, the address space of all envs is identical in [UTOP, UVPT).
	 *   See include/mmu.h for layout.
	 */
	memcpy(e->env_pgdir + PDX(UTOP), base_pgdir + PDX(UTOP),
800125f4:	8fc20030 	lw	v0,48(s8)
800125f8:	00000000 	nop
800125fc:	8c4200b0 	lw	v0,176(v0)
80012600:	00000000 	nop
80012604:	244307f4 	addiu	v1,v0,2036
80012608:	3c028007 	lui	v0,0x8007
8001260c:	8c42b010 	lw	v0,-20464(v0)
80012610:	00000000 	nop
80012614:	244207f4 	addiu	v0,v0,2036
80012618:	24060008 	li	a2,8
8001261c:	00402825 	move	a1,v0
80012620:	00602025 	move	a0,v1
80012624:	0c0044a8 	jal	800112a0 <memcpy>
80012628:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:223
	       sizeof(Pde) * (PDX(UVPT) - PDX(UTOP)));

	/* Step 3: Map its own page table at 'UVPT' with readonly permission.
	 * As a result, user programs can read its page table through 'UVPT' */
	e->env_pgdir[PDX(UVPT)] = PADDR(e->env_pgdir) | PTE_V;
8001262c:	8fc20030 	lw	v0,48(s8)
80012630:	00000000 	nop
80012634:	8c4200b0 	lw	v0,176(v0)
80012638:	00000000 	nop
8001263c:	afc2001c 	sw	v0,28(s8)
80012640:	8fc2001c 	lw	v0,28(s8)
80012644:	00000000 	nop
80012648:	0440000d 	bltz	v0,80012680 <env_setup_vm+0x110>
8001264c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:223 (discriminator 1)
80012650:	8fc2001c 	lw	v0,28(s8)
80012654:	00000000 	nop
80012658:	afa20010 	sw	v0,16(sp)
8001265c:	3c028002 	lui	v0,0x8002
80012660:	24478830 	addiu	a3,v0,-30672
80012664:	3c028002 	lui	v0,0x8002
80012668:	24468bdc 	addiu	a2,v0,-29732
8001266c:	240500df 	li	a1,223
80012670:	3c028002 	lui	v0,0x8002
80012674:	244487d4 	addiu	a0,v0,-30764
80012678:	0c004f90 	jal	80013e40 <_panic>
8001267c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:223 (discriminator 3)
80012680:	8fc3001c 	lw	v1,28(s8)
80012684:	3c028000 	lui	v0,0x8000
80012688:	00621821 	addu	v1,v1,v0
8001268c:	8fc20030 	lw	v0,48(s8)
80012690:	00000000 	nop
80012694:	8c4200b0 	lw	v0,176(v0)
80012698:	00000000 	nop
8001269c:	244207fc 	addiu	v0,v0,2044
800126a0:	34630200 	ori	v1,v1,0x200
800126a4:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/env.c:224 (discriminator 3)
	return 0;
800126a8:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/env.c:225 (discriminator 1)
}
800126ac:	03c0e825 	move	sp,s8
800126b0:	8fbf002c 	lw	ra,44(sp)
800126b4:	8fbe0028 	lw	s8,40(sp)
800126b8:	27bd0030 	addiu	sp,sp,48
800126bc:	03e00008 	jr	ra
800126c0:	00000000 	nop

800126c4 <env_alloc>:
env_alloc():
/home/git/21373271/21373271/kern/env.c:246
 *     'LIST_FIRST', 'LIST_REMOVE', 'mkenvid', 'asid_alloc', 'env_setup_vm'
 *   Following fields of Env should be set up:
 *     'env_id', 'env_asid', 'env_parent_id', 'env_tf.regs[29]', 'env_tf.cp0_status',
 *     'env_user_tlb_mod_entry', 'env_runs'
 */
int env_alloc(struct Env **new, u_int parent_id) {
800126c4:	27bdffe0 	addiu	sp,sp,-32
800126c8:	afbf001c 	sw	ra,28(sp)
800126cc:	afbe0018 	sw	s8,24(sp)
800126d0:	03a0f025 	move	s8,sp
800126d4:	afc40020 	sw	a0,32(s8)
800126d8:	afc50024 	sw	a1,36(s8)
/home/git/21373271/21373271/kern/env.c:252
	int r;
	struct Env *e;

	/* Step 1: Get a free Env from 'env_free_list' */
	/* Exercise 3.4: Your code here. (1/4) */
	if (LIST_EMPTY(&env_free_list))
800126dc:	3c028007 	lui	v0,0x8007
800126e0:	8c42b00c 	lw	v0,-20468(v0)
800126e4:	00000000 	nop
800126e8:	14400007 	bnez	v0,80012708 <env_alloc+0x44>
800126ec:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:254
	{
		*new = NULL;
800126f0:	8fc20020 	lw	v0,32(s8)
800126f4:	00000000 	nop
800126f8:	ac400000 	sw	zero,0(v0)
/home/git/21373271/21373271/kern/env.c:255
		return -E_NO_FREE_ENV;
800126fc:	2402fffa 	li	v0,-6
80012700:	10000049 	b	80012828 <env_alloc+0x164>
80012704:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:257
	}
	e = LIST_FIRST(&env_free_list);
80012708:	3c028007 	lui	v0,0x8007
8001270c:	8c42b00c 	lw	v0,-20468(v0)
80012710:	00000000 	nop
80012714:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/kern/env.c:260
	/* Step 2: Call a 'env_setup_vm' to initialize the user address space for this new Env. */
	/* Exercise 3.4: Your code here. (2/4) */
	env_setup_vm(e);
80012718:	8fc40010 	lw	a0,16(s8)
8001271c:	0c00495c 	jal	80012570 <env_setup_vm>
80012720:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:269
	 *
	 * Hint:
	 *   Use 'asid_alloc' to allocate a free asid.
	 *   Use 'mkenvid' to allocate a free envid.
	 */
	e->env_user_tlb_mod_entry = 0; // for lab4
80012724:	8fc20010 	lw	v0,16(s8)
80012728:	00000000 	nop
8001272c:	ac4000d4 	sw	zero,212(v0)
/home/git/21373271/21373271/kern/env.c:270
	e->env_runs = 0;	       // for lab6
80012730:	8fc20010 	lw	v0,16(s8)
80012734:	00000000 	nop
80012738:	ac4000d8 	sw	zero,216(v0)
/home/git/21373271/21373271/kern/env.c:272
	/* Exercise 3.4: Your code here. (3/4) */
	e->env_id = mkenvid(e);
8001273c:	8fc40010 	lw	a0,16(s8)
80012740:	0c004806 	jal	80012018 <mkenvid>
80012744:	00000000 	nop
80012748:	00401825 	move	v1,v0
8001274c:	8fc20010 	lw	v0,16(s8)
80012750:	00000000 	nop
80012754:	ac4300a0 	sw	v1,160(v0)
/home/git/21373271/21373271/kern/env.c:273
	if ( (r=asid_alloc(&(e->env_asid)))!= 0) {
80012758:	8fc20010 	lw	v0,16(s8)
8001275c:	00000000 	nop
80012760:	244200a4 	addiu	v0,v0,164
80012764:	00402025 	move	a0,v0
80012768:	0c004735 	jal	80011cd4 <asid_alloc>
8001276c:	00000000 	nop
80012770:	afc20014 	sw	v0,20(s8)
80012774:	8fc20014 	lw	v0,20(s8)
80012778:	00000000 	nop
8001277c:	10400004 	beqz	v0,80012790 <env_alloc+0xcc>
80012780:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:274
		return r;
80012784:	8fc20014 	lw	v0,20(s8)
80012788:	10000027 	b	80012828 <env_alloc+0x164>
8001278c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:276
	}
	e->env_parent_id = parent_id;
80012790:	8fc20010 	lw	v0,16(s8)
80012794:	8fc30024 	lw	v1,36(s8)
80012798:	00000000 	nop
8001279c:	ac4300a8 	sw	v1,168(v0)
/home/git/21373271/21373271/kern/env.c:279
	/* Step 4: Initialize the sp and 'cp0_status' in 'e->env_tf'. */
	// Timer interrupt (STATUS_IM4) will be enabled.
	e->env_tf.cp0_status = STATUS_IM4 | STATUS_KUp | STATUS_IEp;
800127a0:	8fc20010 	lw	v0,16(s8)
800127a4:	2403100c 	li	v1,4108
800127a8:	ac430080 	sw	v1,128(v0)
/home/git/21373271/21373271/kern/env.c:281
	// Keep space for 'argc' and 'argv'.
	e->env_tf.regs[29] = USTACKTOP - sizeof(int) - sizeof(char **);
800127ac:	8fc20010 	lw	v0,16(s8)
800127b0:	3c037f3f 	lui	v1,0x7f3f
800127b4:	3463dff8 	ori	v1,v1,0xdff8
800127b8:	ac430074 	sw	v1,116(v0)
/home/git/21373271/21373271/kern/env.c:285

	/* Step 5: Remove the new Env from env_free_list. */
	/* Exercise 3.4: Your code here. (4/4) */
	LIST_REMOVE(e,env_link);
800127bc:	8fc20010 	lw	v0,16(s8)
800127c0:	00000000 	nop
800127c4:	8c420098 	lw	v0,152(v0)
800127c8:	00000000 	nop
800127cc:	10400009 	beqz	v0,800127f4 <env_alloc+0x130>
800127d0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:285 (discriminator 1)
800127d4:	8fc20010 	lw	v0,16(s8)
800127d8:	00000000 	nop
800127dc:	8c420098 	lw	v0,152(v0)
800127e0:	8fc30010 	lw	v1,16(s8)
800127e4:	00000000 	nop
800127e8:	8c63009c 	lw	v1,156(v1)
800127ec:	00000000 	nop
800127f0:	ac43009c 	sw	v1,156(v0)
/home/git/21373271/21373271/kern/env.c:285 (discriminator 3)
800127f4:	8fc20010 	lw	v0,16(s8)
800127f8:	00000000 	nop
800127fc:	8c42009c 	lw	v0,156(v0)
80012800:	8fc30010 	lw	v1,16(s8)
80012804:	00000000 	nop
80012808:	8c630098 	lw	v1,152(v1)
8001280c:	00000000 	nop
80012810:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/env.c:286 (discriminator 3)
	*new = e;
80012814:	8fc20020 	lw	v0,32(s8)
80012818:	8fc30010 	lw	v1,16(s8)
8001281c:	00000000 	nop
80012820:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/env.c:287 (discriminator 3)
	return 0;
80012824:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/env.c:288
}
80012828:	03c0e825 	move	sp,s8
8001282c:	8fbf001c 	lw	ra,28(sp)
80012830:	8fbe0018 	lw	s8,24(sp)
80012834:	27bd0020 	addiu	sp,sp,32
80012838:	03e00008 	jr	ra
8001283c:	00000000 	nop

80012840 <get_envs>:
get_envs():
/home/git/21373271/21373271/kern/env.c:290

struct Env * get_envs() {
80012840:	27bdfff8 	addiu	sp,sp,-8
80012844:	afbe0004 	sw	s8,4(sp)
80012848:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/env.c:291
	return envs;
8001284c:	3c028003 	lui	v0,0x8003
80012850:	24424000 	addiu	v0,v0,16384
/home/git/21373271/21373271/kern/env.c:292
}
80012854:	03c0e825 	move	sp,s8
80012858:	8fbe0004 	lw	s8,4(sp)
8001285c:	27bd0008 	addiu	sp,sp,8
80012860:	03e00008 	jr	ra
80012864:	00000000 	nop

80012868 <load_icode_mapper>:
load_icode_mapper():
/home/git/21373271/21373271/kern/env.c:306
 *   The address of env structure is passed through 'data' from 'elf_load_seg', where this function
 *   works as a callback.
 *
 */
static int load_icode_mapper(void *data, u_long va, size_t offset, u_int perm, const void *src,
			     size_t len) {
80012868:	27bdffd0 	addiu	sp,sp,-48
8001286c:	afbf002c 	sw	ra,44(sp)
80012870:	afbe0028 	sw	s8,40(sp)
80012874:	03a0f025 	move	s8,sp
80012878:	afc40030 	sw	a0,48(s8)
8001287c:	afc50034 	sw	a1,52(s8)
80012880:	afc60038 	sw	a2,56(s8)
80012884:	afc7003c 	sw	a3,60(s8)
/home/git/21373271/21373271/kern/env.c:307
	struct Env *env = (struct Env *)data;
80012888:	8fc20030 	lw	v0,48(s8)
8001288c:	00000000 	nop
80012890:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/env.c:313
	struct Page *p;
	int r;

	/* Step 1: Allocate a page with 'page_alloc'. */
	/* Exercise 3.5: Your code here. (1/2) */
	if ( (r = page_alloc(&p)) != 0 )
80012894:	27c20020 	addiu	v0,s8,32
80012898:	00402025 	move	a0,v0
8001289c:	0c00525c 	jal	80014970 <page_alloc>
800128a0:	00000000 	nop
800128a4:	afc2001c 	sw	v0,28(s8)
800128a8:	8fc2001c 	lw	v0,28(s8)
800128ac:	00000000 	nop
800128b0:	10400004 	beqz	v0,800128c4 <load_icode_mapper+0x5c>
800128b4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:315
	{
		return r;
800128b8:	8fc2001c 	lw	v0,28(s8)
800128bc:	10000023 	b	8001294c <load_icode_mapper+0xe4>
800128c0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:320
	}
	/* Step 2: If 'src' is not NULL, copy the 'len' bytes started at 'src' into 'offset' at this
	 * page. */
	// Hint: You may want to use 'memcpy'.
	if (src != NULL) {
800128c4:	8fc20040 	lw	v0,64(s8)
800128c8:	00000000 	nop
800128cc:	1040000f 	beqz	v0,8001290c <load_icode_mapper+0xa4>
800128d0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:322
		/* Exercise 3.5: Your code here. (2/2) */
		memcpy( (void*)(page2kva(p) + offset) , src  , len );
800128d4:	8fc20020 	lw	v0,32(s8)
800128d8:	00000000 	nop
800128dc:	00402025 	move	a0,v0
800128e0:	0c0046ae 	jal	80011ab8 <page2kva>
800128e4:	00000000 	nop
800128e8:	00401825 	move	v1,v0
800128ec:	8fc20038 	lw	v0,56(s8)
800128f0:	00000000 	nop
800128f4:	00621021 	addu	v0,v1,v0
800128f8:	8fc60044 	lw	a2,68(s8)
800128fc:	8fc50040 	lw	a1,64(s8)
80012900:	00402025 	move	a0,v0
80012904:	0c0044a8 	jal	800112a0 <memcpy>
80012908:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:327
		//memcpy(src, page2kva(p) + offset, len);
	}

	/* Step 3: Insert 'p' into 'env->env_pgdir' at 'va' with 'perm'. */
	return page_insert(env->env_pgdir, env->env_asid, p, va, perm);
8001290c:	8fc20018 	lw	v0,24(s8)
80012910:	00000000 	nop
80012914:	8c4300b0 	lw	v1,176(v0)
80012918:	8fc20018 	lw	v0,24(s8)
8001291c:	00000000 	nop
80012920:	8c4400a4 	lw	a0,164(v0)
80012924:	8fc50020 	lw	a1,32(s8)
80012928:	8fc2003c 	lw	v0,60(s8)
8001292c:	00000000 	nop
80012930:	afa20010 	sw	v0,16(sp)
80012934:	8fc70034 	lw	a3,52(s8)
80012938:	00a03025 	move	a2,a1
8001293c:	00802825 	move	a1,a0
80012940:	00602025 	move	a0,v1
80012944:	0c00533a 	jal	80014ce8 <page_insert>
80012948:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:328 (discriminator 1)
}
8001294c:	03c0e825 	move	sp,s8
80012950:	8fbf002c 	lw	ra,44(sp)
80012954:	8fbe0028 	lw	s8,40(sp)
80012958:	27bd0030 	addiu	sp,sp,48
8001295c:	03e00008 	jr	ra
80012960:	00000000 	nop

80012964 <load_icode>:
load_icode():
/home/git/21373271/21373271/kern/env.c:335
/* Overview:
 *   Load program segments from 'binary' into user space of the env 'e'.
 *   'binary' points to an ELF executable image of 'size' bytes, which contains both text and data
 *   segments.
 */
static void load_icode(struct Env *e, const void *binary, size_t size) {
80012964:	27bdffc8 	addiu	sp,sp,-56
80012968:	afbf0034 	sw	ra,52(sp)
8001296c:	afbe0030 	sw	s8,48(sp)
80012970:	03a0f025 	move	s8,sp
80012974:	afc40038 	sw	a0,56(s8)
80012978:	afc5003c 	sw	a1,60(s8)
8001297c:	afc60040 	sw	a2,64(s8)
/home/git/21373271/21373271/kern/env.c:337
	/* Step 1: Use 'elf_from' to parse an ELF header from 'binary'. */
	const Elf32_Ehdr *ehdr = elf_from(binary, size);
80012980:	8fc50040 	lw	a1,64(s8)
80012984:	8fc4003c 	lw	a0,60(s8)
80012988:	0c004000 	jal	80010000 <elf_from>
8001298c:	00000000 	nop
80012990:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/kern/env.c:338
	if (!ehdr) {
80012994:	8fc20020 	lw	v0,32(s8)
80012998:	00000000 	nop
8001299c:	1440000d 	bnez	v0,800129d4 <load_icode+0x70>
800129a0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:339
		panic("bad elf at %x", binary);
800129a4:	8fc2003c 	lw	v0,60(s8)
800129a8:	00000000 	nop
800129ac:	afa20010 	sw	v0,16(sp)
800129b0:	3c028002 	lui	v0,0x8002
800129b4:	24478854 	addiu	a3,v0,-30636
800129b8:	3c028002 	lui	v0,0x8002
800129bc:	24468bec 	addiu	a2,v0,-29716
800129c0:	24050153 	li	a1,339
800129c4:	3c028002 	lui	v0,0x8002
800129c8:	244487d4 	addiu	a0,v0,-30764
800129cc:	0c004f90 	jal	80013e40 <_panic>
800129d0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:346

	/* Step 2: Load the segments using 'ELF_FOREACH_PHDR_OFF' and 'elf_load_seg'.
	 * As a loader, we just care about loadable segments, so parse only program headers here.
	 */
	size_t ph_off;
	ELF_FOREACH_PHDR_OFF (ph_off, ehdr) {
800129d4:	8fc20020 	lw	v0,32(s8)
800129d8:	00000000 	nop
800129dc:	8c42001c 	lw	v0,28(v0)
800129e0:	00000000 	nop
800129e4:	afc20018 	sw	v0,24(s8)
800129e8:	afc0001c 	sw	zero,28(s8)
800129ec:	10000037 	b	80012acc <load_icode+0x168>
800129f0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:347
		Elf32_Phdr *ph = (Elf32_Phdr *)(binary + ph_off);
800129f4:	8fc3003c 	lw	v1,60(s8)
800129f8:	8fc20018 	lw	v0,24(s8)
800129fc:	00000000 	nop
80012a00:	00621021 	addu	v0,v1,v0
80012a04:	afc20024 	sw	v0,36(s8)
/home/git/21373271/21373271/kern/env.c:348
		if (ph->p_type == PT_LOAD) {
80012a08:	8fc20024 	lw	v0,36(s8)
80012a0c:	00000000 	nop
80012a10:	8c430000 	lw	v1,0(v0)
80012a14:	24020001 	li	v0,1
80012a18:	1462001f 	bne	v1,v0,80012a98 <load_icode+0x134>
80012a1c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:352
			// 'elf_load_seg' is defined in lib/elfloader.c
			// 'load_icode_mapper' defines the way in which a page in this segment
			// should be mapped.
			panic_on(elf_load_seg(ph, binary + ph->p_offset, load_icode_mapper, e));
80012a20:	8fc20024 	lw	v0,36(s8)
80012a24:	00000000 	nop
80012a28:	8c420004 	lw	v0,4(v0)
80012a2c:	8fc3003c 	lw	v1,60(s8)
80012a30:	00000000 	nop
80012a34:	00621821 	addu	v1,v1,v0
80012a38:	8fc70038 	lw	a3,56(s8)
80012a3c:	3c028001 	lui	v0,0x8001
80012a40:	24462868 	addiu	a2,v0,10344
80012a44:	00602825 	move	a1,v1
80012a48:	8fc40024 	lw	a0,36(s8)
80012a4c:	0c004034 	jal	800100d0 <elf_load_seg>
80012a50:	00000000 	nop
80012a54:	afc20028 	sw	v0,40(s8)
80012a58:	8fc20028 	lw	v0,40(s8)
80012a5c:	00000000 	nop
80012a60:	1040000d 	beqz	v0,80012a98 <load_icode+0x134>
80012a64:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:352 (discriminator 1)
80012a68:	8fc20028 	lw	v0,40(s8)
80012a6c:	00000000 	nop
80012a70:	afa20010 	sw	v0,16(sp)
80012a74:	3c028002 	lui	v0,0x8002
80012a78:	24478864 	addiu	a3,v0,-30620
80012a7c:	3c028002 	lui	v0,0x8002
80012a80:	24468bec 	addiu	a2,v0,-29716
80012a84:	24050160 	li	a1,352
80012a88:	3c028002 	lui	v0,0x8002
80012a8c:	244487d4 	addiu	a0,v0,-30764
80012a90:	0c004f90 	jal	80013e40 <_panic>
80012a94:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:346 (discriminator 2)
	ELF_FOREACH_PHDR_OFF (ph_off, ehdr) {
80012a98:	8fc2001c 	lw	v0,28(s8)
80012a9c:	00000000 	nop
80012aa0:	24420001 	addiu	v0,v0,1
80012aa4:	afc2001c 	sw	v0,28(s8)
80012aa8:	8fc20020 	lw	v0,32(s8)
80012aac:	00000000 	nop
80012ab0:	9442002a 	lhu	v0,42(v0)
80012ab4:	00000000 	nop
80012ab8:	00401825 	move	v1,v0
80012abc:	8fc20018 	lw	v0,24(s8)
80012ac0:	00000000 	nop
80012ac4:	00431021 	addu	v0,v0,v1
80012ac8:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/env.c:346 (discriminator 1)
80012acc:	8fc20020 	lw	v0,32(s8)
80012ad0:	00000000 	nop
80012ad4:	9442002c 	lhu	v0,44(v0)
80012ad8:	00000000 	nop
80012adc:	00401825 	move	v1,v0
80012ae0:	8fc2001c 	lw	v0,28(s8)
80012ae4:	00000000 	nop
80012ae8:	0043102a 	slt	v0,v0,v1
80012aec:	1440ffc1 	bnez	v0,800129f4 <load_icode+0x90>
80012af0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:358
		}
	}

	/* Step 3: Set 'e->env_tf.cp0_epc' to 'ehdr->e_entry'. */
	/* Exercise 3.6: Your code here. */
	e->env_tf.cp0_epc = ehdr->e_entry;
80012af4:	8fc20020 	lw	v0,32(s8)
80012af8:	00000000 	nop
80012afc:	8c430018 	lw	v1,24(v0)
80012b00:	8fc20038 	lw	v0,56(s8)
80012b04:	00000000 	nop
80012b08:	ac430094 	sw	v1,148(v0)
/home/git/21373271/21373271/kern/env.c:360

}
80012b0c:	00000000 	nop
80012b10:	03c0e825 	move	sp,s8
80012b14:	8fbf0034 	lw	ra,52(sp)
80012b18:	8fbe0030 	lw	s8,48(sp)
80012b1c:	27bd0038 	addiu	sp,sp,56
80012b20:	03e00008 	jr	ra
80012b24:	00000000 	nop

80012b28 <env_create>:
env_create():
/home/git/21373271/21373271/kern/env.c:370
 *   first created env is scheduled.
 *
 * Hint:
 *   'binary' is an ELF executable image in memory.
 */
struct Env *env_create(const void *binary, size_t size, int priority) {
80012b28:	27bdffe0 	addiu	sp,sp,-32
80012b2c:	afbf001c 	sw	ra,28(sp)
80012b30:	afbe0018 	sw	s8,24(sp)
80012b34:	03a0f025 	move	s8,sp
80012b38:	afc40020 	sw	a0,32(s8)
80012b3c:	afc50024 	sw	a1,36(s8)
80012b40:	afc60028 	sw	a2,40(s8)
/home/git/21373271/21373271/kern/env.c:374
	struct Env *e;
	/* Step 1: Use 'env_alloc' to alloc a new env, with 0 as 'parent_id'. */
	/* Exercise 3.7: Your code here. (1/3) */
	env_alloc(&e,0);
80012b44:	00002825 	move	a1,zero
80012b48:	27c20010 	addiu	v0,s8,16
80012b4c:	00402025 	move	a0,v0
80012b50:	0c0049b1 	jal	800126c4 <env_alloc>
80012b54:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:377
	/* Step 2: Assign the 'priority' to 'e' and mark its 'env_status' as runnable. */
	/* Exercise 3.7: Your code here. (2/3) */
	e->env_pri = priority;
80012b58:	8fc20010 	lw	v0,16(s8)
80012b5c:	8fc30028 	lw	v1,40(s8)
80012b60:	00000000 	nop
80012b64:	ac4300bc 	sw	v1,188(v0)
/home/git/21373271/21373271/kern/env.c:378
	e->env_status = ENV_RUNNABLE;
80012b68:	8fc20010 	lw	v0,16(s8)
80012b6c:	24030001 	li	v1,1
80012b70:	ac4300ac 	sw	v1,172(v0)
/home/git/21373271/21373271/kern/env.c:382
	/* Step 3: Use 'load_icode' to load the image from 'binary', and insert 'e' into
	 * 'env_sched_list' using 'TAILQ_INSERT_HEAD'. */
	/* Exercise 3.7: Your code here. (3/3) */
	load_icode(e, binary, size);
80012b74:	8fc20010 	lw	v0,16(s8)
80012b78:	8fc60024 	lw	a2,36(s8)
80012b7c:	8fc50020 	lw	a1,32(s8)
80012b80:	00402025 	move	a0,v0
80012b84:	0c004a59 	jal	80012964 <load_icode>
80012b88:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:383
	TAILQ_INSERT_HEAD(&env_sched_list,e,env_sched_link);
80012b8c:	8fc20010 	lw	v0,16(s8)
80012b90:	3c038007 	lui	v1,0x8007
80012b94:	8c63b004 	lw	v1,-20476(v1)
80012b98:	00000000 	nop
80012b9c:	ac4300b4 	sw	v1,180(v0)
80012ba0:	8c4200b4 	lw	v0,180(v0)
80012ba4:	00000000 	nop
80012ba8:	10400008 	beqz	v0,80012bcc <env_create+0xa4>
80012bac:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:383 (discriminator 1)
80012bb0:	8fc30010 	lw	v1,16(s8)
80012bb4:	3c028007 	lui	v0,0x8007
80012bb8:	8c42b004 	lw	v0,-20476(v0)
80012bbc:	246300b4 	addiu	v1,v1,180
80012bc0:	ac4300b8 	sw	v1,184(v0)
80012bc4:	10000007 	b	80012be4 <env_create+0xbc>
80012bc8:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:383 (discriminator 2)
80012bcc:	8fc20010 	lw	v0,16(s8)
80012bd0:	00000000 	nop
80012bd4:	244300b4 	addiu	v1,v0,180
80012bd8:	3c028007 	lui	v0,0x8007
80012bdc:	2442b004 	addiu	v0,v0,-20476
80012be0:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/env.c:383 (discriminator 4)
80012be4:	8fc30010 	lw	v1,16(s8)
80012be8:	3c028007 	lui	v0,0x8007
80012bec:	ac43b004 	sw	v1,-20476(v0)
80012bf0:	8fc20010 	lw	v0,16(s8)
80012bf4:	3c038007 	lui	v1,0x8007
80012bf8:	2463b004 	addiu	v1,v1,-20476
80012bfc:	ac4300b8 	sw	v1,184(v0)
/home/git/21373271/21373271/kern/env.c:384 (discriminator 4)
	return e;
80012c00:	8fc20010 	lw	v0,16(s8)
/home/git/21373271/21373271/kern/env.c:385 (discriminator 4)
}
80012c04:	03c0e825 	move	sp,s8
80012c08:	8fbf001c 	lw	ra,28(sp)
80012c0c:	8fbe0018 	lw	s8,24(sp)
80012c10:	27bd0020 	addiu	sp,sp,32
80012c14:	03e00008 	jr	ra
80012c18:	00000000 	nop

80012c1c <env_free>:
env_free():
/home/git/21373271/21373271/kern/env.c:390

/* Overview:
 *  Free env e and all memory it uses.
 */
void env_free(struct Env *e) {
80012c1c:	27bdffc8 	addiu	sp,sp,-56
80012c20:	afbf0034 	sw	ra,52(sp)
80012c24:	afbe0030 	sw	s8,48(sp)
80012c28:	03a0f025 	move	s8,sp
80012c2c:	afc40038 	sw	a0,56(s8)
/home/git/21373271/21373271/kern/env.c:395
	Pte *pt;
	u_int pdeno, pteno, pa;

	/* Hint: Note the environment's demise.*/
	printk("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
80012c30:	3c028007 	lui	v0,0x8007
80012c34:	8c42b000 	lw	v0,-20480(v0)
80012c38:	00000000 	nop
80012c3c:	10400007 	beqz	v0,80012c5c <env_free+0x40>
80012c40:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:395 (discriminator 1)
80012c44:	3c028007 	lui	v0,0x8007
80012c48:	8c42b000 	lw	v0,-20480(v0)
80012c4c:	00000000 	nop
80012c50:	8c4300a0 	lw	v1,160(v0)
80012c54:	10000002 	b	80012c60 <env_free+0x44>
80012c58:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:395 (discriminator 2)
80012c5c:	00001825 	move	v1,zero
/home/git/21373271/21373271/kern/env.c:395 (discriminator 4)
80012c60:	8fc20038 	lw	v0,56(s8)
80012c64:	00000000 	nop
80012c68:	8c4200a0 	lw	v0,160(v0)
80012c6c:	00000000 	nop
80012c70:	00403025 	move	a2,v0
80012c74:	00602825 	move	a1,v1
80012c78:	3c028002 	lui	v0,0x8002
80012c7c:	244488b0 	addiu	a0,v0,-30544
80012c80:	0c005a0d 	jal	80016834 <printk>
80012c84:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:398 (discriminator 4)

	/* Hint: Flush all mapped pages in the user portion of the address space */
	for (pdeno = 0; pdeno < PDX(UTOP); pdeno++) {
80012c88:	afc00018 	sw	zero,24(s8)
80012c8c:	1000007a 	b	80012e78 <env_free+0x25c>
80012c90:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:400
		/* Hint: only look at mapped page tables. */
		if (!(e->env_pgdir[pdeno] & PTE_V)) {
80012c94:	8fc20038 	lw	v0,56(s8)
80012c98:	00000000 	nop
80012c9c:	8c4300b0 	lw	v1,176(v0)
80012ca0:	8fc20018 	lw	v0,24(s8)
80012ca4:	00000000 	nop
80012ca8:	00021080 	sll	v0,v0,0x2
80012cac:	00621021 	addu	v0,v1,v0
80012cb0:	8c420000 	lw	v0,0(v0)
80012cb4:	00000000 	nop
80012cb8:	30420200 	andi	v0,v0,0x200
80012cbc:	10400069 	beqz	v0,80012e64 <env_free+0x248>
80012cc0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:404
			continue;
		}
		/* Hint: find the pa and va of the page table. */
		pa = PTE_ADDR(e->env_pgdir[pdeno]);
80012cc4:	8fc20038 	lw	v0,56(s8)
80012cc8:	00000000 	nop
80012ccc:	8c4300b0 	lw	v1,176(v0)
80012cd0:	8fc20018 	lw	v0,24(s8)
80012cd4:	00000000 	nop
80012cd8:	00021080 	sll	v0,v0,0x2
80012cdc:	00621021 	addu	v0,v1,v0
80012ce0:	8c430000 	lw	v1,0(v0)
80012ce4:	2402f000 	li	v0,-4096
80012ce8:	00621024 	and	v0,v1,v0
80012cec:	afc20024 	sw	v0,36(s8)
/home/git/21373271/21373271/kern/env.c:405
		pt = (Pte *)KADDR(pa);
80012cf0:	8fc20024 	lw	v0,36(s8)
80012cf4:	00000000 	nop
80012cf8:	00021302 	srl	v0,v0,0xc
80012cfc:	afc20028 	sw	v0,40(s8)
80012d00:	3c028007 	lui	v0,0x8007
80012d04:	8c42b020 	lw	v0,-20448(v0)
80012d08:	8fc30028 	lw	v1,40(s8)
80012d0c:	00000000 	nop
80012d10:	0062102b 	sltu	v0,v1,v0
80012d14:	1440000d 	bnez	v0,80012d4c <env_free+0x130>
80012d18:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:405 (discriminator 1)
80012d1c:	8fc20024 	lw	v0,36(s8)
80012d20:	00000000 	nop
80012d24:	afa20010 	sw	v0,16(sp)
80012d28:	3c028002 	lui	v0,0x8002
80012d2c:	24478798 	addiu	a3,v0,-30824
80012d30:	3c028002 	lui	v0,0x8002
80012d34:	24468bf8 	addiu	a2,v0,-29704
80012d38:	24050195 	li	a1,405
80012d3c:	3c028002 	lui	v0,0x8002
80012d40:	244487d4 	addiu	a0,v0,-30764
80012d44:	0c004f90 	jal	80013e40 <_panic>
80012d48:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:405 (discriminator 3)
80012d4c:	8fc30024 	lw	v1,36(s8)
80012d50:	3c028000 	lui	v0,0x8000
80012d54:	00621021 	addu	v0,v1,v0
80012d58:	afc2002c 	sw	v0,44(s8)
/home/git/21373271/21373271/kern/env.c:407 (discriminator 3)
		/* Hint: Unmap all PTEs in this page table. */
		for (pteno = 0; pteno <= PTX(~0); pteno++) {
80012d5c:	afc0001c 	sw	zero,28(s8)
80012d60:	10000020 	b	80012de4 <env_free+0x1c8>
80012d64:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:408
			if (pt[pteno] & PTE_V) {
80012d68:	8fc2001c 	lw	v0,28(s8)
80012d6c:	00000000 	nop
80012d70:	00021080 	sll	v0,v0,0x2
80012d74:	8fc3002c 	lw	v1,44(s8)
80012d78:	00000000 	nop
80012d7c:	00621021 	addu	v0,v1,v0
80012d80:	8c420000 	lw	v0,0(v0)
80012d84:	00000000 	nop
80012d88:	30420200 	andi	v0,v0,0x200
80012d8c:	10400011 	beqz	v0,80012dd4 <env_free+0x1b8>
80012d90:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:409
				page_remove(e->env_pgdir, e->env_asid,
80012d94:	8fc20038 	lw	v0,56(s8)
80012d98:	00000000 	nop
80012d9c:	8c4400b0 	lw	a0,176(v0)
80012da0:	8fc20038 	lw	v0,56(s8)
80012da4:	00000000 	nop
80012da8:	8c4500a4 	lw	a1,164(v0)
/home/git/21373271/21373271/kern/env.c:410
					    (pdeno << PDSHIFT) | (pteno << PGSHIFT));
80012dac:	8fc20018 	lw	v0,24(s8)
80012db0:	00000000 	nop
80012db4:	00021d80 	sll	v1,v0,0x16
80012db8:	8fc2001c 	lw	v0,28(s8)
80012dbc:	00000000 	nop
80012dc0:	00021300 	sll	v0,v0,0xc
80012dc4:	00621025 	or	v0,v1,v0
/home/git/21373271/21373271/kern/env.c:409
				page_remove(e->env_pgdir, e->env_asid,
80012dc8:	00403025 	move	a2,v0
80012dcc:	0c005405 	jal	80015014 <page_remove>
80012dd0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:407 (discriminator 2)
		for (pteno = 0; pteno <= PTX(~0); pteno++) {
80012dd4:	8fc2001c 	lw	v0,28(s8)
80012dd8:	00000000 	nop
80012ddc:	24420001 	addiu	v0,v0,1
80012de0:	afc2001c 	sw	v0,28(s8)
/home/git/21373271/21373271/kern/env.c:407 (discriminator 1)
80012de4:	8fc2001c 	lw	v0,28(s8)
80012de8:	00000000 	nop
80012dec:	2c420400 	sltiu	v0,v0,1024
80012df0:	1440ffdd 	bnez	v0,80012d68 <env_free+0x14c>
80012df4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:414
			}
		}
		/* Hint: free the page table itself. */
		e->env_pgdir[pdeno] = 0;
80012df8:	8fc20038 	lw	v0,56(s8)
80012dfc:	00000000 	nop
80012e00:	8c4300b0 	lw	v1,176(v0)
80012e04:	8fc20018 	lw	v0,24(s8)
80012e08:	00000000 	nop
80012e0c:	00021080 	sll	v0,v0,0x2
80012e10:	00621021 	addu	v0,v1,v0
80012e14:	ac400000 	sw	zero,0(v0)
/home/git/21373271/21373271/kern/env.c:415
		page_decref(pa2page(pa));
80012e18:	8fc40024 	lw	a0,36(s8)
80012e1c:	0c004684 	jal	80011a10 <pa2page>
80012e20:	00000000 	nop
80012e24:	00402025 	move	a0,v0
80012e28:	0c0053d5 	jal	80014f54 <page_decref>
80012e2c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:417
		/* Hint: invalidate page table in TLB */
		tlb_invalidate(e->env_asid, UVPT + (pdeno << PGSHIFT));
80012e30:	8fc20038 	lw	v0,56(s8)
80012e34:	00000000 	nop
80012e38:	8c4400a4 	lw	a0,164(v0)
80012e3c:	8fc20018 	lw	v0,24(s8)
80012e40:	00000000 	nop
80012e44:	00021b00 	sll	v1,v0,0xc
80012e48:	3c027fc0 	lui	v0,0x7fc0
80012e4c:	00621021 	addu	v0,v1,v0
80012e50:	00402825 	move	a1,v0
80012e54:	0c00542a 	jal	800150a8 <tlb_invalidate>
80012e58:	00000000 	nop
80012e5c:	10000002 	b	80012e68 <env_free+0x24c>
80012e60:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:401
			continue;
80012e64:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:398 (discriminator 2)
	for (pdeno = 0; pdeno < PDX(UTOP); pdeno++) {
80012e68:	8fc20018 	lw	v0,24(s8)
80012e6c:	00000000 	nop
80012e70:	24420001 	addiu	v0,v0,1
80012e74:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/env.c:398 (discriminator 1)
80012e78:	8fc20018 	lw	v0,24(s8)
80012e7c:	00000000 	nop
80012e80:	2c4201fd 	sltiu	v0,v0,509
80012e84:	1440ff83 	bnez	v0,80012c94 <env_free+0x78>
80012e88:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:420
	}
	/* Hint: free the page directory. */
	page_decref(pa2page(PADDR(e->env_pgdir)));
80012e8c:	8fc20038 	lw	v0,56(s8)
80012e90:	00000000 	nop
80012e94:	8c4200b0 	lw	v0,176(v0)
80012e98:	00000000 	nop
80012e9c:	afc20020 	sw	v0,32(s8)
80012ea0:	8fc20020 	lw	v0,32(s8)
80012ea4:	00000000 	nop
80012ea8:	0440000d 	bltz	v0,80012ee0 <env_free+0x2c4>
80012eac:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:420 (discriminator 1)
80012eb0:	8fc20020 	lw	v0,32(s8)
80012eb4:	00000000 	nop
80012eb8:	afa20010 	sw	v0,16(sp)
80012ebc:	3c028002 	lui	v0,0x8002
80012ec0:	24478830 	addiu	a3,v0,-30672
80012ec4:	3c028002 	lui	v0,0x8002
80012ec8:	24468bf8 	addiu	a2,v0,-29704
80012ecc:	240501a4 	li	a1,420
80012ed0:	3c028002 	lui	v0,0x8002
80012ed4:	244487d4 	addiu	a0,v0,-30764
80012ed8:	0c004f90 	jal	80013e40 <_panic>
80012edc:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:420 (discriminator 3)
80012ee0:	8fc30020 	lw	v1,32(s8)
80012ee4:	3c028000 	lui	v0,0x8000
80012ee8:	00621021 	addu	v0,v1,v0
80012eec:	00402025 	move	a0,v0
80012ef0:	0c004684 	jal	80011a10 <pa2page>
80012ef4:	00000000 	nop
80012ef8:	00402025 	move	a0,v0
80012efc:	0c0053d5 	jal	80014f54 <page_decref>
80012f00:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:422 (discriminator 3)
	/* Hint: free the ASID */
	asid_free(e->env_asid);
80012f04:	8fc20038 	lw	v0,56(s8)
80012f08:	00000000 	nop
80012f0c:	8c4200a4 	lw	v0,164(v0)
80012f10:	00000000 	nop
80012f14:	00402025 	move	a0,v0
80012f18:	0c00477b 	jal	80011dec <asid_free>
80012f1c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:424 (discriminator 3)
	/* Hint: invalidate page directory in TLB */
	tlb_invalidate(e->env_asid, UVPT + (PDX(UVPT) << PGSHIFT));
80012f20:	8fc20038 	lw	v0,56(s8)
80012f24:	00000000 	nop
80012f28:	8c4300a4 	lw	v1,164(v0)
80012f2c:	3c027fdf 	lui	v0,0x7fdf
80012f30:	3445f000 	ori	a1,v0,0xf000
80012f34:	00602025 	move	a0,v1
80012f38:	0c00542a 	jal	800150a8 <tlb_invalidate>
80012f3c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:426 (discriminator 3)
	/* Hint: return the environment to the free list. */
	e->env_status = ENV_FREE;
80012f40:	8fc20038 	lw	v0,56(s8)
80012f44:	00000000 	nop
80012f48:	ac4000ac 	sw	zero,172(v0)
/home/git/21373271/21373271/kern/env.c:427 (discriminator 3)
	LIST_INSERT_HEAD((&env_free_list), (e), env_link);
80012f4c:	3c028007 	lui	v0,0x8007
80012f50:	8c43b00c 	lw	v1,-20468(v0)
80012f54:	8fc20038 	lw	v0,56(s8)
80012f58:	00000000 	nop
80012f5c:	ac430098 	sw	v1,152(v0)
80012f60:	8fc20038 	lw	v0,56(s8)
80012f64:	00000000 	nop
80012f68:	8c420098 	lw	v0,152(v0)
80012f6c:	00000000 	nop
80012f70:	10400007 	beqz	v0,80012f90 <env_free+0x374>
80012f74:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:427 (discriminator 1)
80012f78:	3c028007 	lui	v0,0x8007
80012f7c:	8c42b00c 	lw	v0,-20468(v0)
80012f80:	8fc30038 	lw	v1,56(s8)
80012f84:	00000000 	nop
80012f88:	24630098 	addiu	v1,v1,152
80012f8c:	ac43009c 	sw	v1,156(v0)
/home/git/21373271/21373271/kern/env.c:427 (discriminator 3)
80012f90:	3c028007 	lui	v0,0x8007
80012f94:	8fc30038 	lw	v1,56(s8)
80012f98:	00000000 	nop
80012f9c:	ac43b00c 	sw	v1,-20468(v0)
80012fa0:	8fc20038 	lw	v0,56(s8)
80012fa4:	3c038007 	lui	v1,0x8007
80012fa8:	2463b00c 	addiu	v1,v1,-20468
80012fac:	ac43009c 	sw	v1,156(v0)
/home/git/21373271/21373271/kern/env.c:428 (discriminator 3)
	TAILQ_REMOVE(&env_sched_list, (e), env_sched_link);
80012fb0:	8fc20038 	lw	v0,56(s8)
80012fb4:	00000000 	nop
80012fb8:	8c4200b4 	lw	v0,180(v0)
80012fbc:	00000000 	nop
80012fc0:	1040000b 	beqz	v0,80012ff0 <env_free+0x3d4>
80012fc4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:428 (discriminator 1)
80012fc8:	8fc20038 	lw	v0,56(s8)
80012fcc:	00000000 	nop
80012fd0:	8c4200b4 	lw	v0,180(v0)
80012fd4:	8fc30038 	lw	v1,56(s8)
80012fd8:	00000000 	nop
80012fdc:	8c6300b8 	lw	v1,184(v1)
80012fe0:	00000000 	nop
80012fe4:	ac4300b8 	sw	v1,184(v0)
80012fe8:	10000007 	b	80013008 <env_free+0x3ec>
80012fec:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:428 (discriminator 2)
80012ff0:	8fc20038 	lw	v0,56(s8)
80012ff4:	00000000 	nop
80012ff8:	8c4300b8 	lw	v1,184(v0)
80012ffc:	3c028007 	lui	v0,0x8007
80013000:	2442b004 	addiu	v0,v0,-20476
80013004:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/env.c:428 (discriminator 4)
80013008:	8fc20038 	lw	v0,56(s8)
8001300c:	00000000 	nop
80013010:	8c4200b8 	lw	v0,184(v0)
80013014:	8fc30038 	lw	v1,56(s8)
80013018:	00000000 	nop
8001301c:	8c6300b4 	lw	v1,180(v1)
80013020:	00000000 	nop
80013024:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/env.c:429 (discriminator 4)
}
80013028:	00000000 	nop
8001302c:	03c0e825 	move	sp,s8
80013030:	8fbf0034 	lw	ra,52(sp)
80013034:	8fbe0030 	lw	s8,48(sp)
80013038:	27bd0038 	addiu	sp,sp,56
8001303c:	03e00008 	jr	ra
80013040:	00000000 	nop

80013044 <env_destroy>:
env_destroy():
/home/git/21373271/21373271/kern/env.c:434

/* Overview:
 *  Free env e, and schedule to run a new env if e is the current env.
 */
void env_destroy(struct Env *e) {
80013044:	27bdffe8 	addiu	sp,sp,-24
80013048:	afbf0014 	sw	ra,20(sp)
8001304c:	afbe0010 	sw	s8,16(sp)
80013050:	03a0f025 	move	s8,sp
80013054:	afc40018 	sw	a0,24(s8)
/home/git/21373271/21373271/kern/env.c:436
	/* Hint: free e. */
	env_free(e);
80013058:	8fc40018 	lw	a0,24(s8)
8001305c:	0c004b07 	jal	80012c1c <env_free>
80013060:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:439

	/* Hint: schedule to run a new environment. */
	if (curenv == e) {
80013064:	3c028007 	lui	v0,0x8007
80013068:	8c42b000 	lw	v0,-20480(v0)
8001306c:	8fc30018 	lw	v1,24(s8)
80013070:	00000000 	nop
80013074:	1462000a 	bne	v1,v0,800130a0 <env_destroy+0x5c>
80013078:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:440
		curenv = NULL;
8001307c:	3c028007 	lui	v0,0x8007
80013080:	ac40b000 	sw	zero,-20480(v0)
/home/git/21373271/21373271/kern/env.c:441
		printk("i am killed ... \n");
80013084:	3c028002 	lui	v0,0x8002
80013088:	244488c8 	addiu	a0,v0,-30520
8001308c:	0c005a0d 	jal	80016834 <printk>
80013090:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:442
		schedule(1);
80013094:	24040001 	li	a0,1
80013098:	0c005a84 	jal	80016a10 <schedule>
8001309c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:444
	}
}
800130a0:	00000000 	nop
800130a4:	03c0e825 	move	sp,s8
800130a8:	8fbf0014 	lw	ra,20(sp)
800130ac:	8fbe0010 	lw	s8,16(sp)
800130b0:	27bd0018 	addiu	sp,sp,24
800130b4:	03e00008 	jr	ra
800130b8:	00000000 	nop

800130bc <pre_env_run>:
pre_env_run():
/home/git/21373271/21373271/kern/env.c:449

/* Overview:
 *   This function is depended by our judge framework. Please do not modify it.
 */
static inline void pre_env_run(struct Env *e) {
800130bc:	27bdfff8 	addiu	sp,sp,-8
800130c0:	afbe0004 	sw	s8,4(sp)
800130c4:	03a0f025 	move	s8,sp
800130c8:	afc40008 	sw	a0,8(s8)
/home/git/21373271/21373271/kern/env.c:469
		       tf->regs[2]);
		env_destroy(e);
		schedule(0);
	}
#endif
}
800130cc:	00000000 	nop
800130d0:	03c0e825 	move	sp,s8
800130d4:	8fbe0004 	lw	s8,4(sp)
800130d8:	27bd0008 	addiu	sp,sp,8
800130dc:	03e00008 	jr	ra
800130e0:	00000000 	nop

800130e4 <env_run>:
env_run():
/home/git/21373271/21373271/kern/env.c:482
 *   Set 'e' as the current running env 'curenv'.
 *
 * Hints:
 *   You may use these functions: 'env_pop_tf'.
 */
void env_run(struct Env *e) {
800130e4:	27bdffe0 	addiu	sp,sp,-32
800130e8:	afbf001c 	sw	ra,28(sp)
800130ec:	afbe0018 	sw	s8,24(sp)
800130f0:	03a0f025 	move	s8,sp
800130f4:	afc40020 	sw	a0,32(s8)
/home/git/21373271/21373271/kern/env.c:483
	assert(e->env_status == ENV_RUNNABLE);
800130f8:	8fc20020 	lw	v0,32(s8)
800130fc:	00000000 	nop
80013100:	8c4300ac 	lw	v1,172(v0)
80013104:	24020001 	li	v0,1
80013108:	1062000d 	beq	v1,v0,80013140 <env_run+0x5c>
8001310c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:483 (discriminator 1)
80013110:	3c028002 	lui	v0,0x8002
80013114:	244288dc 	addiu	v0,v0,-30500
80013118:	afa20010 	sw	v0,16(sp)
8001311c:	3c028002 	lui	v0,0x8002
80013120:	244787bc 	addiu	a3,v0,-30788
80013124:	3c028002 	lui	v0,0x8002
80013128:	24468c04 	addiu	a2,v0,-29692
8001312c:	240501e3 	li	a1,483
80013130:	3c028002 	lui	v0,0x8002
80013134:	244487d4 	addiu	a0,v0,-30764
80013138:	0c004f90 	jal	80013e40 <_panic>
8001313c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:484
	pre_env_run(e); // WARNING: DO NOT MODIFY THIS LINE!
80013140:	8fc40020 	lw	a0,32(s8)
80013144:	0c004c2f 	jal	800130bc <pre_env_run>
80013148:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:491
	/* Step 1:
	 *   If 'curenv' is NULL, this is the first time through.
	 *   If not, we may be switching from a previous env, so save its context into
	 *   'curenv->env_tf' first.
	 */
	if (curenv) {
8001314c:	3c028007 	lui	v0,0x8007
80013150:	8c42b000 	lw	v0,-20480(v0)
80013154:	00000000 	nop
80013158:	1040000c 	beqz	v0,8001318c <env_run+0xa8>
8001315c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:492
		curenv->env_tf = *((struct Trapframe *)KSTACKTOP - 1);
80013160:	3c02803f 	lui	v0,0x803f
80013164:	3443ff68 	ori	v1,v0,0xff68
80013168:	3c028007 	lui	v0,0x8007
8001316c:	8c42b000 	lw	v0,-20480(v0)
80013170:	00000000 	nop
80013174:	00402025 	move	a0,v0
80013178:	24020098 	li	v0,152
8001317c:	00403025 	move	a2,v0
80013180:	00602825 	move	a1,v1
80013184:	0c0044a8 	jal	800112a0 <memcpy>
80013188:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:496
	}

	/* Step 2: Change 'curenv' to 'e'. */
	curenv = e;
8001318c:	3c028007 	lui	v0,0x8007
80013190:	8fc30020 	lw	v1,32(s8)
80013194:	00000000 	nop
80013198:	ac43b000 	sw	v1,-20480(v0)
/home/git/21373271/21373271/kern/env.c:497
	curenv->env_runs++; // lab6
8001319c:	3c028007 	lui	v0,0x8007
800131a0:	8c42b000 	lw	v0,-20480(v0)
800131a4:	00000000 	nop
800131a8:	8c4300d8 	lw	v1,216(v0)
800131ac:	00000000 	nop
800131b0:	24630001 	addiu	v1,v1,1
800131b4:	ac4300d8 	sw	v1,216(v0)
/home/git/21373271/21373271/kern/env.c:501

	/* Step 3: Change 'cur_pgdir' to 'curenv->env_pgdir', switching to its address space. */
	/* Exercise 3.8: Your code here. (1/2) */
	cur_pgdir = curenv->env_pgdir;
800131b8:	3c028007 	lui	v0,0x8007
800131bc:	8c42b000 	lw	v0,-20480(v0)
800131c0:	00000000 	nop
800131c4:	8c4300b0 	lw	v1,176(v0)
800131c8:	3c028007 	lui	v0,0x8007
800131cc:	ac43b024 	sw	v1,-20444(v0)
/home/git/21373271/21373271/kern/env.c:511
	 *  - You should use 'curenv->env_asid' here.
	 *  - 'env_pop_tf' is a 'noreturn' function: it restores PC from 'cp0_epc' thus not
	 *    returning to the kernel caller, making 'env_run' a 'noreturn' function as well.
	 */
	/* Exercise 3.8: Your code here. (2/2) */
	env_pop_tf(&(curenv->env_tf) , curenv->env_asid);
800131d0:	3c028007 	lui	v0,0x8007
800131d4:	8c42b000 	lw	v0,-20480(v0)
800131d8:	00000000 	nop
800131dc:	00401825 	move	v1,v0
800131e0:	3c028007 	lui	v0,0x8007
800131e4:	8c42b000 	lw	v0,-20480(v0)
800131e8:	00000000 	nop
800131ec:	8c4200a4 	lw	v0,164(v0)
800131f0:	00000000 	nop
800131f4:	00402825 	move	a1,v0
800131f8:	00602025 	move	a0,v1
800131fc:	0c004f2c 	jal	80013cb0 <env_pop_tf>
80013200:	00000000 	nop

80013204 <env_check>:
env_check():
/home/git/21373271/21373271/kern/env.c:514
}

void env_check() {
80013204:	27bdffb8 	addiu	sp,sp,-72
80013208:	afbf0044 	sw	ra,68(sp)
8001320c:	afbe0040 	sw	s8,64(sp)
80013210:	afb0003c 	sw	s0,60(sp)
80013214:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/env.c:519
	struct Env *pe, *pe0, *pe1, *pe2;
	struct Env_list fl;
	u_long page_addr;
	/* should be able to allocate three envs */
	pe0 = 0;
80013218:	afc00028 	sw	zero,40(s8)
/home/git/21373271/21373271/kern/env.c:520
	pe1 = 0;
8001321c:	afc0002c 	sw	zero,44(s8)
/home/git/21373271/21373271/kern/env.c:521
	pe2 = 0;
80013220:	afc00030 	sw	zero,48(s8)
/home/git/21373271/21373271/kern/env.c:522
	assert(env_alloc(&pe0, 0) == 0);
80013224:	27c20028 	addiu	v0,s8,40
80013228:	00002825 	move	a1,zero
8001322c:	00402025 	move	a0,v0
80013230:	0c0049b1 	jal	800126c4 <env_alloc>
80013234:	00000000 	nop
80013238:	1040000d 	beqz	v0,80013270 <env_check+0x6c>
8001323c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:522 (discriminator 1)
80013240:	3c028002 	lui	v0,0x8002
80013244:	244288fc 	addiu	v0,v0,-30468
80013248:	afa20010 	sw	v0,16(sp)
8001324c:	3c028002 	lui	v0,0x8002
80013250:	244787bc 	addiu	a3,v0,-30788
80013254:	3c028002 	lui	v0,0x8002
80013258:	24468c0c 	addiu	a2,v0,-29684
8001325c:	2405020a 	li	a1,522
80013260:	3c028002 	lui	v0,0x8002
80013264:	244487d4 	addiu	a0,v0,-30764
80013268:	0c004f90 	jal	80013e40 <_panic>
8001326c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:523
	assert(env_alloc(&pe1, 0) == 0);
80013270:	27c2002c 	addiu	v0,s8,44
80013274:	00002825 	move	a1,zero
80013278:	00402025 	move	a0,v0
8001327c:	0c0049b1 	jal	800126c4 <env_alloc>
80013280:	00000000 	nop
80013284:	1040000d 	beqz	v0,800132bc <env_check+0xb8>
80013288:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:523 (discriminator 1)
8001328c:	3c028002 	lui	v0,0x8002
80013290:	24428914 	addiu	v0,v0,-30444
80013294:	afa20010 	sw	v0,16(sp)
80013298:	3c028002 	lui	v0,0x8002
8001329c:	244787bc 	addiu	a3,v0,-30788
800132a0:	3c028002 	lui	v0,0x8002
800132a4:	24468c0c 	addiu	a2,v0,-29684
800132a8:	2405020b 	li	a1,523
800132ac:	3c028002 	lui	v0,0x8002
800132b0:	244487d4 	addiu	a0,v0,-30764
800132b4:	0c004f90 	jal	80013e40 <_panic>
800132b8:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:524
	assert(env_alloc(&pe2, 0) == 0);
800132bc:	27c20030 	addiu	v0,s8,48
800132c0:	00002825 	move	a1,zero
800132c4:	00402025 	move	a0,v0
800132c8:	0c0049b1 	jal	800126c4 <env_alloc>
800132cc:	00000000 	nop
800132d0:	1040000d 	beqz	v0,80013308 <env_check+0x104>
800132d4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:524 (discriminator 1)
800132d8:	3c028002 	lui	v0,0x8002
800132dc:	2442892c 	addiu	v0,v0,-30420
800132e0:	afa20010 	sw	v0,16(sp)
800132e4:	3c028002 	lui	v0,0x8002
800132e8:	244787bc 	addiu	a3,v0,-30788
800132ec:	3c028002 	lui	v0,0x8002
800132f0:	24468c0c 	addiu	a2,v0,-29684
800132f4:	2405020c 	li	a1,524
800132f8:	3c028002 	lui	v0,0x8002
800132fc:	244487d4 	addiu	a0,v0,-30764
80013300:	0c004f90 	jal	80013e40 <_panic>
80013304:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:526

	assert(pe0);
80013308:	8fc20028 	lw	v0,40(s8)
8001330c:	00000000 	nop
80013310:	1440000d 	bnez	v0,80013348 <env_check+0x144>
80013314:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:526 (discriminator 1)
80013318:	3c028002 	lui	v0,0x8002
8001331c:	24428944 	addiu	v0,v0,-30396
80013320:	afa20010 	sw	v0,16(sp)
80013324:	3c028002 	lui	v0,0x8002
80013328:	244787bc 	addiu	a3,v0,-30788
8001332c:	3c028002 	lui	v0,0x8002
80013330:	24468c0c 	addiu	a2,v0,-29684
80013334:	2405020e 	li	a1,526
80013338:	3c028002 	lui	v0,0x8002
8001333c:	244487d4 	addiu	a0,v0,-30764
80013340:	0c004f90 	jal	80013e40 <_panic>
80013344:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:527
	assert(pe1 && pe1 != pe0);
80013348:	8fc2002c 	lw	v0,44(s8)
8001334c:	00000000 	nop
80013350:	10400006 	beqz	v0,8001336c <env_check+0x168>
80013354:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:527 (discriminator 2)
80013358:	8fc3002c 	lw	v1,44(s8)
8001335c:	8fc20028 	lw	v0,40(s8)
80013360:	00000000 	nop
80013364:	1462000d 	bne	v1,v0,8001339c <env_check+0x198>
80013368:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:527 (discriminator 3)
8001336c:	3c028002 	lui	v0,0x8002
80013370:	24428948 	addiu	v0,v0,-30392
80013374:	afa20010 	sw	v0,16(sp)
80013378:	3c028002 	lui	v0,0x8002
8001337c:	244787bc 	addiu	a3,v0,-30788
80013380:	3c028002 	lui	v0,0x8002
80013384:	24468c0c 	addiu	a2,v0,-29684
80013388:	2405020f 	li	a1,527
8001338c:	3c028002 	lui	v0,0x8002
80013390:	244487d4 	addiu	a0,v0,-30764
80013394:	0c004f90 	jal	80013e40 <_panic>
80013398:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:528
	assert(pe2 && pe2 != pe1 && pe2 != pe0);
8001339c:	8fc20030 	lw	v0,48(s8)
800133a0:	00000000 	nop
800133a4:	1040000b 	beqz	v0,800133d4 <env_check+0x1d0>
800133a8:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:528 (discriminator 2)
800133ac:	8fc30030 	lw	v1,48(s8)
800133b0:	8fc2002c 	lw	v0,44(s8)
800133b4:	00000000 	nop
800133b8:	10620006 	beq	v1,v0,800133d4 <env_check+0x1d0>
800133bc:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:528 (discriminator 4)
800133c0:	8fc30030 	lw	v1,48(s8)
800133c4:	8fc20028 	lw	v0,40(s8)
800133c8:	00000000 	nop
800133cc:	1462000d 	bne	v1,v0,80013404 <env_check+0x200>
800133d0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:528 (discriminator 5)
800133d4:	3c028002 	lui	v0,0x8002
800133d8:	2442895c 	addiu	v0,v0,-30372
800133dc:	afa20010 	sw	v0,16(sp)
800133e0:	3c028002 	lui	v0,0x8002
800133e4:	244787bc 	addiu	a3,v0,-30788
800133e8:	3c028002 	lui	v0,0x8002
800133ec:	24468c0c 	addiu	a2,v0,-29684
800133f0:	24050210 	li	a1,528
800133f4:	3c028002 	lui	v0,0x8002
800133f8:	244487d4 	addiu	a0,v0,-30764
800133fc:	0c004f90 	jal	80013e40 <_panic>
80013400:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:531

	/* temporarily steal the rest of the free envs */
	fl = env_free_list;
80013404:	3c028007 	lui	v0,0x8007
80013408:	8c42b00c 	lw	v0,-20468(v0)
8001340c:	00000000 	nop
80013410:	afc20034 	sw	v0,52(s8)
/home/git/21373271/21373271/kern/env.c:533
	/* now this env_free list must be empty! */
	LIST_INIT(&env_free_list);
80013414:	3c028007 	lui	v0,0x8007
80013418:	ac40b00c 	sw	zero,-20468(v0)
/home/git/21373271/21373271/kern/env.c:536

	/* should be no free memory */
	assert(env_alloc(&pe, 0) == -E_NO_FREE_ENV);
8001341c:	27c20024 	addiu	v0,s8,36
80013420:	00002825 	move	a1,zero
80013424:	00402025 	move	a0,v0
80013428:	0c0049b1 	jal	800126c4 <env_alloc>
8001342c:	00000000 	nop
80013430:	00401825 	move	v1,v0
80013434:	2402fffa 	li	v0,-6
80013438:	1062000d 	beq	v1,v0,80013470 <env_check+0x26c>
8001343c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:536 (discriminator 1)
80013440:	3c028002 	lui	v0,0x8002
80013444:	2442897c 	addiu	v0,v0,-30340
80013448:	afa20010 	sw	v0,16(sp)
8001344c:	3c028002 	lui	v0,0x8002
80013450:	244787bc 	addiu	a3,v0,-30788
80013454:	3c028002 	lui	v0,0x8002
80013458:	24468c0c 	addiu	a2,v0,-29684
8001345c:	24050218 	li	a1,536
80013460:	3c028002 	lui	v0,0x8002
80013464:	244487d4 	addiu	a0,v0,-30764
80013468:	0c004f90 	jal	80013e40 <_panic>
8001346c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:539

	/* recover env_free_list */
	env_free_list = fl;
80013470:	3c028007 	lui	v0,0x8007
80013474:	8fc30034 	lw	v1,52(s8)
80013478:	00000000 	nop
8001347c:	ac43b00c 	sw	v1,-20468(v0)
/home/git/21373271/21373271/kern/env.c:541

	printk("pe0->env_id %d\n", pe0->env_id);
80013480:	8fc20028 	lw	v0,40(s8)
80013484:	00000000 	nop
80013488:	8c4200a0 	lw	v0,160(v0)
8001348c:	00000000 	nop
80013490:	00402825 	move	a1,v0
80013494:	3c028002 	lui	v0,0x8002
80013498:	244489a0 	addiu	a0,v0,-30304
8001349c:	0c005a0d 	jal	80016834 <printk>
800134a0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:542
	printk("pe1->env_id %d\n", pe1->env_id);
800134a4:	8fc2002c 	lw	v0,44(s8)
800134a8:	00000000 	nop
800134ac:	8c4200a0 	lw	v0,160(v0)
800134b0:	00000000 	nop
800134b4:	00402825 	move	a1,v0
800134b8:	3c028002 	lui	v0,0x8002
800134bc:	244489b0 	addiu	a0,v0,-30288
800134c0:	0c005a0d 	jal	80016834 <printk>
800134c4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:543
	printk("pe2->env_id %d\n", pe2->env_id);
800134c8:	8fc20030 	lw	v0,48(s8)
800134cc:	00000000 	nop
800134d0:	8c4200a0 	lw	v0,160(v0)
800134d4:	00000000 	nop
800134d8:	00402825 	move	a1,v0
800134dc:	3c028002 	lui	v0,0x8002
800134e0:	244489c0 	addiu	a0,v0,-30272
800134e4:	0c005a0d 	jal	80016834 <printk>
800134e8:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:545

	assert(pe0->env_id == 2048);
800134ec:	8fc20028 	lw	v0,40(s8)
800134f0:	00000000 	nop
800134f4:	8c4300a0 	lw	v1,160(v0)
800134f8:	24020800 	li	v0,2048
800134fc:	1062000d 	beq	v1,v0,80013534 <env_check+0x330>
80013500:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:545 (discriminator 1)
80013504:	3c028002 	lui	v0,0x8002
80013508:	244289d0 	addiu	v0,v0,-30256
8001350c:	afa20010 	sw	v0,16(sp)
80013510:	3c028002 	lui	v0,0x8002
80013514:	244787bc 	addiu	a3,v0,-30788
80013518:	3c028002 	lui	v0,0x8002
8001351c:	24468c0c 	addiu	a2,v0,-29684
80013520:	24050221 	li	a1,545
80013524:	3c028002 	lui	v0,0x8002
80013528:	244487d4 	addiu	a0,v0,-30764
8001352c:	0c004f90 	jal	80013e40 <_panic>
80013530:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:546
	assert(pe1->env_id == 4097);
80013534:	8fc2002c 	lw	v0,44(s8)
80013538:	00000000 	nop
8001353c:	8c4300a0 	lw	v1,160(v0)
80013540:	24021001 	li	v0,4097
80013544:	1062000d 	beq	v1,v0,8001357c <env_check+0x378>
80013548:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:546 (discriminator 1)
8001354c:	3c028002 	lui	v0,0x8002
80013550:	244289e4 	addiu	v0,v0,-30236
80013554:	afa20010 	sw	v0,16(sp)
80013558:	3c028002 	lui	v0,0x8002
8001355c:	244787bc 	addiu	a3,v0,-30788
80013560:	3c028002 	lui	v0,0x8002
80013564:	24468c0c 	addiu	a2,v0,-29684
80013568:	24050222 	li	a1,546
8001356c:	3c028002 	lui	v0,0x8002
80013570:	244487d4 	addiu	a0,v0,-30764
80013574:	0c004f90 	jal	80013e40 <_panic>
80013578:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:547
	assert(pe2->env_id == 6146);
8001357c:	8fc20030 	lw	v0,48(s8)
80013580:	00000000 	nop
80013584:	8c4300a0 	lw	v1,160(v0)
80013588:	24021802 	li	v0,6146
8001358c:	1062000d 	beq	v1,v0,800135c4 <env_check+0x3c0>
80013590:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:547 (discriminator 1)
80013594:	3c028002 	lui	v0,0x8002
80013598:	244289f8 	addiu	v0,v0,-30216
8001359c:	afa20010 	sw	v0,16(sp)
800135a0:	3c028002 	lui	v0,0x8002
800135a4:	244787bc 	addiu	a3,v0,-30788
800135a8:	3c028002 	lui	v0,0x8002
800135ac:	24468c0c 	addiu	a2,v0,-29684
800135b0:	24050223 	li	a1,547
800135b4:	3c028002 	lui	v0,0x8002
800135b8:	244487d4 	addiu	a0,v0,-30764
800135bc:	0c004f90 	jal	80013e40 <_panic>
800135c0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:548
	printk("env_init() work well!\n");
800135c4:	3c028002 	lui	v0,0x8002
800135c8:	24448a0c 	addiu	a0,v0,-30196
800135cc:	0c005a0d 	jal	80016834 <printk>
800135d0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:552

	/* 'UENVS' and 'UPAGES' should have been correctly mapped in *template* page directory
	 * 'base_pgdir'. */
	for (page_addr = 0; page_addr < npage * sizeof(struct Page); page_addr += BY2PG) {
800135d4:	afc00018 	sw	zero,24(s8)
800135d8:	10000036 	b	800136b4 <env_check+0x4b0>
800135dc:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:553
		assert(va2pa(base_pgdir, UPAGES + page_addr) == PADDR(pages) + page_addr);
800135e0:	3c028007 	lui	v0,0x8007
800135e4:	8c44b010 	lw	a0,-20464(v0)
800135e8:	8fc30018 	lw	v1,24(s8)
800135ec:	3c027f80 	lui	v0,0x7f80
800135f0:	00621021 	addu	v0,v1,v0
800135f4:	00402825 	move	a1,v0
800135f8:	0c0046d8 	jal	80011b60 <va2pa>
800135fc:	00000000 	nop
80013600:	00408025 	move	s0,v0
80013604:	3c028007 	lui	v0,0x8007
80013608:	8c42b028 	lw	v0,-20440(v0)
8001360c:	00000000 	nop
80013610:	afc20020 	sw	v0,32(s8)
80013614:	8fc20020 	lw	v0,32(s8)
80013618:	00000000 	nop
8001361c:	0440000d 	bltz	v0,80013654 <env_check+0x450>
80013620:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:553 (discriminator 1)
80013624:	8fc20020 	lw	v0,32(s8)
80013628:	00000000 	nop
8001362c:	afa20010 	sw	v0,16(sp)
80013630:	3c028002 	lui	v0,0x8002
80013634:	24478830 	addiu	a3,v0,-30672
80013638:	3c028002 	lui	v0,0x8002
8001363c:	24468c0c 	addiu	a2,v0,-29684
80013640:	24050229 	li	a1,553
80013644:	3c028002 	lui	v0,0x8002
80013648:	244487d4 	addiu	a0,v0,-30764
8001364c:	0c004f90 	jal	80013e40 <_panic>
80013650:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:553 (discriminator 3)
80013654:	8fc30020 	lw	v1,32(s8)
80013658:	3c028000 	lui	v0,0x8000
8001365c:	00621821 	addu	v1,v1,v0
80013660:	8fc20018 	lw	v0,24(s8)
80013664:	00000000 	nop
80013668:	00621021 	addu	v0,v1,v0
8001366c:	1202000d 	beq	s0,v0,800136a4 <env_check+0x4a0>
80013670:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:553 (discriminator 4)
80013674:	3c028002 	lui	v0,0x8002
80013678:	24428a24 	addiu	v0,v0,-30172
8001367c:	afa20010 	sw	v0,16(sp)
80013680:	3c028002 	lui	v0,0x8002
80013684:	244787bc 	addiu	a3,v0,-30788
80013688:	3c028002 	lui	v0,0x8002
8001368c:	24468c0c 	addiu	a2,v0,-29684
80013690:	24050229 	li	a1,553
80013694:	3c028002 	lui	v0,0x8002
80013698:	244487d4 	addiu	a0,v0,-30764
8001369c:	0c004f90 	jal	80013e40 <_panic>
800136a0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:552 (discriminator 2)
	for (page_addr = 0; page_addr < npage * sizeof(struct Page); page_addr += BY2PG) {
800136a4:	8fc20018 	lw	v0,24(s8)
800136a8:	00000000 	nop
800136ac:	24421000 	addiu	v0,v0,4096
800136b0:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/env.c:552 (discriminator 1)
800136b4:	3c028007 	lui	v0,0x8007
800136b8:	8c43b020 	lw	v1,-20448(v0)
800136bc:	00000000 	nop
800136c0:	00601025 	move	v0,v1
800136c4:	00021040 	sll	v0,v0,0x1
800136c8:	00431021 	addu	v0,v0,v1
800136cc:	00021080 	sll	v0,v0,0x2
800136d0:	00401825 	move	v1,v0
800136d4:	8fc20018 	lw	v0,24(s8)
800136d8:	00000000 	nop
800136dc:	0043102b 	sltu	v0,v0,v1
800136e0:	1440ffbf 	bnez	v0,800135e0 <env_check+0x3dc>
800136e4:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:555
	}
	for (page_addr = 0; page_addr < NENV * sizeof(struct Env); page_addr += BY2PG) {
800136e8:	afc00018 	sw	zero,24(s8)
800136ec:	10000035 	b	800137c4 <env_check+0x5c0>
800136f0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:556
		assert(va2pa(base_pgdir, UENVS + page_addr) == PADDR(envs) + page_addr);
800136f4:	3c028007 	lui	v0,0x8007
800136f8:	8c44b010 	lw	a0,-20464(v0)
800136fc:	8fc30018 	lw	v1,24(s8)
80013700:	3c027f40 	lui	v0,0x7f40
80013704:	00621021 	addu	v0,v1,v0
80013708:	00402825 	move	a1,v0
8001370c:	0c0046d8 	jal	80011b60 <va2pa>
80013710:	00000000 	nop
80013714:	00408025 	move	s0,v0
80013718:	3c028003 	lui	v0,0x8003
8001371c:	24424000 	addiu	v0,v0,16384
80013720:	afc2001c 	sw	v0,28(s8)
80013724:	8fc2001c 	lw	v0,28(s8)
80013728:	00000000 	nop
8001372c:	0440000d 	bltz	v0,80013764 <env_check+0x560>
80013730:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:556 (discriminator 1)
80013734:	8fc2001c 	lw	v0,28(s8)
80013738:	00000000 	nop
8001373c:	afa20010 	sw	v0,16(sp)
80013740:	3c028002 	lui	v0,0x8002
80013744:	24478830 	addiu	a3,v0,-30672
80013748:	3c028002 	lui	v0,0x8002
8001374c:	24468c0c 	addiu	a2,v0,-29684
80013750:	2405022c 	li	a1,556
80013754:	3c028002 	lui	v0,0x8002
80013758:	244487d4 	addiu	a0,v0,-30764
8001375c:	0c004f90 	jal	80013e40 <_panic>
80013760:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:556 (discriminator 3)
80013764:	8fc3001c 	lw	v1,28(s8)
80013768:	3c028000 	lui	v0,0x8000
8001376c:	00621821 	addu	v1,v1,v0
80013770:	8fc20018 	lw	v0,24(s8)
80013774:	00000000 	nop
80013778:	00621021 	addu	v0,v1,v0
8001377c:	1202000d 	beq	s0,v0,800137b4 <env_check+0x5b0>
80013780:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:556 (discriminator 4)
80013784:	3c028002 	lui	v0,0x8002
80013788:	24428a68 	addiu	v0,v0,-30104
8001378c:	afa20010 	sw	v0,16(sp)
80013790:	3c028002 	lui	v0,0x8002
80013794:	244787bc 	addiu	a3,v0,-30788
80013798:	3c028002 	lui	v0,0x8002
8001379c:	24468c0c 	addiu	a2,v0,-29684
800137a0:	2405022c 	li	a1,556
800137a4:	3c028002 	lui	v0,0x8002
800137a8:	244487d4 	addiu	a0,v0,-30764
800137ac:	0c004f90 	jal	80013e40 <_panic>
800137b0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:555 (discriminator 2)
	for (page_addr = 0; page_addr < NENV * sizeof(struct Env); page_addr += BY2PG) {
800137b4:	8fc20018 	lw	v0,24(s8)
800137b8:	00000000 	nop
800137bc:	24421000 	addiu	v0,v0,4096
800137c0:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/env.c:555 (discriminator 1)
800137c4:	8fc30018 	lw	v1,24(s8)
800137c8:	3c020003 	lui	v0,0x3
800137cc:	34427000 	ori	v0,v0,0x7000
800137d0:	0062102b 	sltu	v0,v1,v0
800137d4:	1440ffc7 	bnez	v0,800136f4 <env_check+0x4f0>
800137d8:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:559
	}
	/* check env_setup_vm() work well */
	printk("pe1->env_pgdir %x\n", pe1->env_pgdir);
800137dc:	8fc2002c 	lw	v0,44(s8)
800137e0:	00000000 	nop
800137e4:	8c4200b0 	lw	v0,176(v0)
800137e8:	00000000 	nop
800137ec:	00402825 	move	a1,v0
800137f0:	3c028002 	lui	v0,0x8002
800137f4:	24448aa8 	addiu	a0,v0,-30040
800137f8:	0c005a0d 	jal	80016834 <printk>
800137fc:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:561

	assert(pe2->env_pgdir[PDX(UTOP)] == base_pgdir[PDX(UTOP)]);
80013800:	8fc20030 	lw	v0,48(s8)
80013804:	00000000 	nop
80013808:	8c4200b0 	lw	v0,176(v0)
8001380c:	00000000 	nop
80013810:	244207f4 	addiu	v0,v0,2036
80013814:	8c430000 	lw	v1,0(v0)
80013818:	3c028007 	lui	v0,0x8007
8001381c:	8c42b010 	lw	v0,-20464(v0)
80013820:	00000000 	nop
80013824:	244207f4 	addiu	v0,v0,2036
80013828:	8c420000 	lw	v0,0(v0)
8001382c:	00000000 	nop
80013830:	1062000d 	beq	v1,v0,80013868 <env_check+0x664>
80013834:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:561 (discriminator 1)
80013838:	3c028002 	lui	v0,0x8002
8001383c:	24428abc 	addiu	v0,v0,-30020
80013840:	afa20010 	sw	v0,16(sp)
80013844:	3c028002 	lui	v0,0x8002
80013848:	244787bc 	addiu	a3,v0,-30788
8001384c:	3c028002 	lui	v0,0x8002
80013850:	24468c0c 	addiu	a2,v0,-29684
80013854:	24050231 	li	a1,561
80013858:	3c028002 	lui	v0,0x8002
8001385c:	244487d4 	addiu	a0,v0,-30764
80013860:	0c004f90 	jal	80013e40 <_panic>
80013864:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:562
	assert(pe2->env_pgdir[PDX(UTOP) - 1] == 0);
80013868:	8fc20030 	lw	v0,48(s8)
8001386c:	00000000 	nop
80013870:	8c4200b0 	lw	v0,176(v0)
80013874:	00000000 	nop
80013878:	244207f0 	addiu	v0,v0,2032
8001387c:	8c420000 	lw	v0,0(v0)
80013880:	00000000 	nop
80013884:	1040000d 	beqz	v0,800138bc <env_check+0x6b8>
80013888:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:562 (discriminator 1)
8001388c:	3c028002 	lui	v0,0x8002
80013890:	24428af0 	addiu	v0,v0,-29968
80013894:	afa20010 	sw	v0,16(sp)
80013898:	3c028002 	lui	v0,0x8002
8001389c:	244787bc 	addiu	a3,v0,-30788
800138a0:	3c028002 	lui	v0,0x8002
800138a4:	24468c0c 	addiu	a2,v0,-29684
800138a8:	24050232 	li	a1,562
800138ac:	3c028002 	lui	v0,0x8002
800138b0:	244487d4 	addiu	a0,v0,-30764
800138b4:	0c004f90 	jal	80013e40 <_panic>
800138b8:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:563
	printk("env_setup_vm passed!\n");
800138bc:	3c028002 	lui	v0,0x8002
800138c0:	24448b14 	addiu	a0,v0,-29932
800138c4:	0c005a0d 	jal	80016834 <printk>
800138c8:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:565

	printk("pe2`s sp register %x\n", pe2->env_tf.regs[29]);
800138cc:	8fc20030 	lw	v0,48(s8)
800138d0:	00000000 	nop
800138d4:	8c420074 	lw	v0,116(v0)
800138d8:	00000000 	nop
800138dc:	00402825 	move	a1,v0
800138e0:	3c028002 	lui	v0,0x8002
800138e4:	24448b2c 	addiu	a0,v0,-29908
800138e8:	0c005a0d 	jal	80016834 <printk>
800138ec:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:568

	/* free all env allocated in this function */
	TAILQ_INSERT_TAIL(&env_sched_list, pe0, env_sched_link);
800138f0:	8fc20028 	lw	v0,40(s8)
800138f4:	00000000 	nop
800138f8:	ac4000b4 	sw	zero,180(v0)
800138fc:	8fc20028 	lw	v0,40(s8)
80013900:	3c038007 	lui	v1,0x8007
80013904:	2463b004 	addiu	v1,v1,-20476
80013908:	8c630004 	lw	v1,4(v1)
8001390c:	00000000 	nop
80013910:	ac4300b8 	sw	v1,184(v0)
80013914:	3c028007 	lui	v0,0x8007
80013918:	2442b004 	addiu	v0,v0,-20476
8001391c:	8c420004 	lw	v0,4(v0)
80013920:	8fc30028 	lw	v1,40(s8)
80013924:	00000000 	nop
80013928:	ac430000 	sw	v1,0(v0)
8001392c:	8fc20028 	lw	v0,40(s8)
80013930:	00000000 	nop
80013934:	244300b4 	addiu	v1,v0,180
80013938:	3c028007 	lui	v0,0x8007
8001393c:	2442b004 	addiu	v0,v0,-20476
80013940:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/env.c:569
	TAILQ_INSERT_TAIL(&env_sched_list, pe1, env_sched_link);
80013944:	8fc2002c 	lw	v0,44(s8)
80013948:	00000000 	nop
8001394c:	ac4000b4 	sw	zero,180(v0)
80013950:	8fc2002c 	lw	v0,44(s8)
80013954:	3c038007 	lui	v1,0x8007
80013958:	2463b004 	addiu	v1,v1,-20476
8001395c:	8c630004 	lw	v1,4(v1)
80013960:	00000000 	nop
80013964:	ac4300b8 	sw	v1,184(v0)
80013968:	3c028007 	lui	v0,0x8007
8001396c:	2442b004 	addiu	v0,v0,-20476
80013970:	8c420004 	lw	v0,4(v0)
80013974:	8fc3002c 	lw	v1,44(s8)
80013978:	00000000 	nop
8001397c:	ac430000 	sw	v1,0(v0)
80013980:	8fc2002c 	lw	v0,44(s8)
80013984:	00000000 	nop
80013988:	244300b4 	addiu	v1,v0,180
8001398c:	3c028007 	lui	v0,0x8007
80013990:	2442b004 	addiu	v0,v0,-20476
80013994:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/env.c:570
	TAILQ_INSERT_TAIL(&env_sched_list, pe2, env_sched_link);
80013998:	8fc20030 	lw	v0,48(s8)
8001399c:	00000000 	nop
800139a0:	ac4000b4 	sw	zero,180(v0)
800139a4:	8fc20030 	lw	v0,48(s8)
800139a8:	3c038007 	lui	v1,0x8007
800139ac:	2463b004 	addiu	v1,v1,-20476
800139b0:	8c630004 	lw	v1,4(v1)
800139b4:	00000000 	nop
800139b8:	ac4300b8 	sw	v1,184(v0)
800139bc:	3c028007 	lui	v0,0x8007
800139c0:	2442b004 	addiu	v0,v0,-20476
800139c4:	8c420004 	lw	v0,4(v0)
800139c8:	8fc30030 	lw	v1,48(s8)
800139cc:	00000000 	nop
800139d0:	ac430000 	sw	v1,0(v0)
800139d4:	8fc20030 	lw	v0,48(s8)
800139d8:	00000000 	nop
800139dc:	244300b4 	addiu	v1,v0,180
800139e0:	3c028007 	lui	v0,0x8007
800139e4:	2442b004 	addiu	v0,v0,-20476
800139e8:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/env.c:572

	env_free(pe2);
800139ec:	8fc20030 	lw	v0,48(s8)
800139f0:	00000000 	nop
800139f4:	00402025 	move	a0,v0
800139f8:	0c004b07 	jal	80012c1c <env_free>
800139fc:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:573
	env_free(pe1);
80013a00:	8fc2002c 	lw	v0,44(s8)
80013a04:	00000000 	nop
80013a08:	00402025 	move	a0,v0
80013a0c:	0c004b07 	jal	80012c1c <env_free>
80013a10:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:574
	env_free(pe0);
80013a14:	8fc20028 	lw	v0,40(s8)
80013a18:	00000000 	nop
80013a1c:	00402025 	move	a0,v0
80013a20:	0c004b07 	jal	80012c1c <env_free>
80013a24:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:576

	printk("env_check() succeeded!\n");
80013a28:	3c028002 	lui	v0,0x8002
80013a2c:	24448b44 	addiu	a0,v0,-29884
80013a30:	0c005a0d 	jal	80016834 <printk>
80013a34:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:577
}
80013a38:	00000000 	nop
80013a3c:	03c0e825 	move	sp,s8
80013a40:	8fbf0044 	lw	ra,68(sp)
80013a44:	8fbe0040 	lw	s8,64(sp)
80013a48:	8fb0003c 	lw	s0,60(sp)
80013a4c:	27bd0048 	addiu	sp,sp,72
80013a50:	03e00008 	jr	ra
80013a54:	00000000 	nop

80013a58 <envid2env_check>:
envid2env_check():
/home/git/21373271/21373271/kern/env.c:579

void envid2env_check() {
80013a58:	27bdffd0 	addiu	sp,sp,-48
80013a5c:	afbf002c 	sw	ra,44(sp)
80013a60:	afbe0028 	sw	s8,40(sp)
80013a64:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/env.c:581
	struct Env *pe, *pe0, *pe2;
	assert(env_alloc(&pe0, 0) == 0);
80013a68:	27c20020 	addiu	v0,s8,32
80013a6c:	00002825 	move	a1,zero
80013a70:	00402025 	move	a0,v0
80013a74:	0c0049b1 	jal	800126c4 <env_alloc>
80013a78:	00000000 	nop
80013a7c:	1040000d 	beqz	v0,80013ab4 <envid2env_check+0x5c>
80013a80:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:581 (discriminator 1)
80013a84:	3c028002 	lui	v0,0x8002
80013a88:	244288fc 	addiu	v0,v0,-30468
80013a8c:	afa20010 	sw	v0,16(sp)
80013a90:	3c028002 	lui	v0,0x8002
80013a94:	244787bc 	addiu	a3,v0,-30788
80013a98:	3c028002 	lui	v0,0x8002
80013a9c:	24468c20 	addiu	a2,v0,-29664
80013aa0:	24050245 	li	a1,581
80013aa4:	3c028002 	lui	v0,0x8002
80013aa8:	244487d4 	addiu	a0,v0,-30764
80013aac:	0c004f90 	jal	80013e40 <_panic>
80013ab0:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:582
	assert(env_alloc(&pe2, 0) == 0);
80013ab4:	27c20024 	addiu	v0,s8,36
80013ab8:	00002825 	move	a1,zero
80013abc:	00402025 	move	a0,v0
80013ac0:	0c0049b1 	jal	800126c4 <env_alloc>
80013ac4:	00000000 	nop
80013ac8:	1040000d 	beqz	v0,80013b00 <envid2env_check+0xa8>
80013acc:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:582 (discriminator 1)
80013ad0:	3c028002 	lui	v0,0x8002
80013ad4:	2442892c 	addiu	v0,v0,-30420
80013ad8:	afa20010 	sw	v0,16(sp)
80013adc:	3c028002 	lui	v0,0x8002
80013ae0:	244787bc 	addiu	a3,v0,-30788
80013ae4:	3c028002 	lui	v0,0x8002
80013ae8:	24468c20 	addiu	a2,v0,-29664
80013aec:	24050246 	li	a1,582
80013af0:	3c028002 	lui	v0,0x8002
80013af4:	244487d4 	addiu	a0,v0,-30764
80013af8:	0c004f90 	jal	80013e40 <_panic>
80013afc:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:584
	int re;
	pe2->env_status = ENV_FREE;
80013b00:	8fc20024 	lw	v0,36(s8)
80013b04:	00000000 	nop
80013b08:	ac4000ac 	sw	zero,172(v0)
/home/git/21373271/21373271/kern/env.c:585
	re = envid2env(pe2->env_id, &pe, 0);
80013b0c:	8fc20024 	lw	v0,36(s8)
80013b10:	00000000 	nop
80013b14:	8c4200a0 	lw	v0,160(v0)
80013b18:	27c3001c 	addiu	v1,s8,28
80013b1c:	00003025 	move	a2,zero
80013b20:	00602825 	move	a1,v1
80013b24:	00402025 	move	a0,v0
80013b28:	0c004823 	jal	8001208c <envid2env>
80013b2c:	00000000 	nop
80013b30:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/env.c:587

	assert(re == -E_BAD_ENV);
80013b34:	8fc30018 	lw	v1,24(s8)
80013b38:	2402fffe 	li	v0,-2
80013b3c:	1062000d 	beq	v1,v0,80013b74 <envid2env_check+0x11c>
80013b40:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:587 (discriminator 1)
80013b44:	3c028002 	lui	v0,0x8002
80013b48:	24428b5c 	addiu	v0,v0,-29860
80013b4c:	afa20010 	sw	v0,16(sp)
80013b50:	3c028002 	lui	v0,0x8002
80013b54:	244787bc 	addiu	a3,v0,-30788
80013b58:	3c028002 	lui	v0,0x8002
80013b5c:	24468c20 	addiu	a2,v0,-29664
80013b60:	2405024b 	li	a1,587
80013b64:	3c028002 	lui	v0,0x8002
80013b68:	244487d4 	addiu	a0,v0,-30764
80013b6c:	0c004f90 	jal	80013e40 <_panic>
80013b70:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:589

	pe2->env_status = ENV_RUNNABLE;
80013b74:	8fc20024 	lw	v0,36(s8)
80013b78:	24030001 	li	v1,1
80013b7c:	ac4300ac 	sw	v1,172(v0)
/home/git/21373271/21373271/kern/env.c:590
	re = envid2env(pe2->env_id, &pe, 0);
80013b80:	8fc20024 	lw	v0,36(s8)
80013b84:	00000000 	nop
80013b88:	8c4200a0 	lw	v0,160(v0)
80013b8c:	27c3001c 	addiu	v1,s8,28
80013b90:	00003025 	move	a2,zero
80013b94:	00602825 	move	a1,v1
80013b98:	00402025 	move	a0,v0
80013b9c:	0c004823 	jal	8001208c <envid2env>
80013ba0:	00000000 	nop
80013ba4:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/env.c:592

	assert(pe->env_id == pe2->env_id && re == 0);
80013ba8:	8fc2001c 	lw	v0,28(s8)
80013bac:	00000000 	nop
80013bb0:	8c4300a0 	lw	v1,160(v0)
80013bb4:	8fc20024 	lw	v0,36(s8)
80013bb8:	00000000 	nop
80013bbc:	8c4200a0 	lw	v0,160(v0)
80013bc0:	00000000 	nop
80013bc4:	14620005 	bne	v1,v0,80013bdc <envid2env_check+0x184>
80013bc8:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:592 (discriminator 2)
80013bcc:	8fc20018 	lw	v0,24(s8)
80013bd0:	00000000 	nop
80013bd4:	1040000d 	beqz	v0,80013c0c <envid2env_check+0x1b4>
80013bd8:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:592 (discriminator 3)
80013bdc:	3c028002 	lui	v0,0x8002
80013be0:	24428b70 	addiu	v0,v0,-29840
80013be4:	afa20010 	sw	v0,16(sp)
80013be8:	3c028002 	lui	v0,0x8002
80013bec:	244787bc 	addiu	a3,v0,-30788
80013bf0:	3c028002 	lui	v0,0x8002
80013bf4:	24468c20 	addiu	a2,v0,-29664
80013bf8:	24050250 	li	a1,592
80013bfc:	3c028002 	lui	v0,0x8002
80013c00:	244487d4 	addiu	a0,v0,-30764
80013c04:	0c004f90 	jal	80013e40 <_panic>
80013c08:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:594

	curenv = pe0;
80013c0c:	8fc30020 	lw	v1,32(s8)
80013c10:	3c028007 	lui	v0,0x8007
80013c14:	ac43b000 	sw	v1,-20480(v0)
/home/git/21373271/21373271/kern/env.c:595
	re = envid2env(pe2->env_id, &pe, 1);
80013c18:	8fc20024 	lw	v0,36(s8)
80013c1c:	00000000 	nop
80013c20:	8c4200a0 	lw	v0,160(v0)
80013c24:	27c3001c 	addiu	v1,s8,28
80013c28:	24060001 	li	a2,1
80013c2c:	00602825 	move	a1,v1
80013c30:	00402025 	move	a0,v0
80013c34:	0c004823 	jal	8001208c <envid2env>
80013c38:	00000000 	nop
80013c3c:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/env.c:596
	assert(re == -E_BAD_ENV);
80013c40:	8fc30018 	lw	v1,24(s8)
80013c44:	2402fffe 	li	v0,-2
80013c48:	1062000d 	beq	v1,v0,80013c80 <envid2env_check+0x228>
80013c4c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:596 (discriminator 1)
80013c50:	3c028002 	lui	v0,0x8002
80013c54:	24428b5c 	addiu	v0,v0,-29860
80013c58:	afa20010 	sw	v0,16(sp)
80013c5c:	3c028002 	lui	v0,0x8002
80013c60:	244787bc 	addiu	a3,v0,-30788
80013c64:	3c028002 	lui	v0,0x8002
80013c68:	24468c20 	addiu	a2,v0,-29664
80013c6c:	24050254 	li	a1,596
80013c70:	3c028002 	lui	v0,0x8002
80013c74:	244487d4 	addiu	a0,v0,-30764
80013c78:	0c004f90 	jal	80013e40 <_panic>
80013c7c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:597
	printk("envid2env() work well!\n");
80013c80:	3c028002 	lui	v0,0x8002
80013c84:	24448b98 	addiu	a0,v0,-29800
80013c88:	0c005a0d 	jal	80016834 <printk>
80013c8c:	00000000 	nop
/home/git/21373271/21373271/kern/env.c:598
}
80013c90:	00000000 	nop
80013c94:	03c0e825 	move	sp,s8
80013c98:	8fbf002c 	lw	ra,44(sp)
80013c9c:	8fbe0028 	lw	s8,40(sp)
80013ca0:	27bd0030 	addiu	sp,sp,48
80013ca4:	03e00008 	jr	ra
80013ca8:	00000000 	nop
80013cac:	00000000 	nop

80013cb0 <env_pop_tf>:
env_pop_tf():
/home/git/21373271/21373271/kern/env_asm.S:9

.text
LEAF(env_pop_tf)
.set reorder
.set at
	sll     a1, a1, 6
80013cb0:	00052980 	sll	a1,a1,0x6
/home/git/21373271/21373271/kern/env_asm.S:10
	mtc0    a1, CP0_ENTRYHI
80013cb4:	40855000 	mtc0	a1,c0_entryhi
/home/git/21373271/21373271/kern/env_asm.S:11
	move    sp, a0
80013cb8:	0080e825 	move	sp,a0
/home/git/21373271/21373271/kern/env_asm.S:12
	j       ret_from_exception
80013cbc:	08004f38 	j	80013ce0 <ret_from_exception>
80013cc0:	00000000 	nop

80013cc4 <enable_irq>:
enable_irq():
/home/git/21373271/21373271/kern/env_asm.S:16
END(env_pop_tf)

LEAF(enable_irq)
	li      t0, (STATUS_CU0 | STATUS_IM4 | STATUS_IEc)
80013cc4:	3c081000 	lui	t0,0x1000
80013cc8:	35081001 	ori	t0,t0,0x1001
/home/git/21373271/21373271/kern/env_asm.S:17
	mtc0    t0, CP0_STATUS
80013ccc:	40886000 	mtc0	t0,c0_sr
/home/git/21373271/21373271/kern/env_asm.S:18
	jr      ra
80013cd0:	03e00008 	jr	ra
80013cd4:	00000000 	nop
	...

80013ce0 <ret_from_exception>:
ret_from_exception():
/home/git/21373271/21373271/kern/genex.S:18
.endm

.text

FEXPORT(ret_from_exception)
	RESTORE_SOME
80013ce0:	8fa20080 	lw	v0,128(sp)
80013ce4:	40826000 	mtc0	v0,c0_sr
80013ce8:	8fa30088 	lw	v1,136(sp)
80013cec:	00600013 	mtlo	v1
80013cf0:	8fa20084 	lw	v0,132(sp)
80013cf4:	8fa30094 	lw	v1,148(sp)
80013cf8:	00400011 	mthi	v0
80013cfc:	40837000 	mtc0	v1,c0_epc
80013d00:	8fbf007c 	lw	ra,124(sp)
80013d04:	8fbe0078 	lw	s8,120(sp)
80013d08:	8fbc0070 	lw	gp,112(sp)
80013d0c:	8fb90064 	lw	t9,100(sp)
80013d10:	8fb80060 	lw	t8,96(sp)
80013d14:	8fb7005c 	lw	s7,92(sp)
80013d18:	8fb60058 	lw	s6,88(sp)
80013d1c:	8fb50054 	lw	s5,84(sp)
80013d20:	8fb40050 	lw	s4,80(sp)
80013d24:	8fb3004c 	lw	s3,76(sp)
80013d28:	8fb20048 	lw	s2,72(sp)
80013d2c:	8fb10044 	lw	s1,68(sp)
80013d30:	8fb00040 	lw	s0,64(sp)
80013d34:	8faf003c 	lw	t7,60(sp)
80013d38:	8fae0038 	lw	t6,56(sp)
80013d3c:	8fad0034 	lw	t5,52(sp)
80013d40:	8fac0030 	lw	t4,48(sp)
80013d44:	8fab002c 	lw	t3,44(sp)
80013d48:	8faa0028 	lw	t2,40(sp)
80013d4c:	8fa90024 	lw	t1,36(sp)
80013d50:	8fa80020 	lw	t0,32(sp)
80013d54:	8fa7001c 	lw	a3,28(sp)
80013d58:	8fa60018 	lw	a2,24(sp)
80013d5c:	8fa50014 	lw	a1,20(sp)
80013d60:	8fa40010 	lw	a0,16(sp)
80013d64:	8fa3000c 	lw	v1,12(sp)
80013d68:	8fa20008 	lw	v0,8(sp)
80013d6c:	8fa10004 	lw	at,4(sp)
/home/git/21373271/21373271/kern/genex.S:19
	lw      k0, TF_EPC(sp)
80013d70:	8fba0094 	lw	k0,148(sp)
/home/git/21373271/21373271/kern/genex.S:20
	lw      sp, TF_REG29(sp) /* Deallocate stack */
80013d74:	8fbd0074 	lw	sp,116(sp)
/home/git/21373271/21373271/kern/genex.S:22
.set noreorder
	jr      k0
80013d78:	03400008 	jr	k0
/home/git/21373271/21373271/kern/genex.S:23
	rfe
80013d7c:	42000010 	rfe

80013d80 <handle_int>:
handle_int():
/home/git/21373271/21373271/kern/genex.S:27
.set reorder

NESTED(handle_int, TF_SIZE, zero)
	mfc0    t0, CP0_CAUSE
80013d80:	40086800 	mfc0	t0,c0_cause
/home/git/21373271/21373271/kern/genex.S:28
	mfc0    t2, CP0_STATUS
80013d84:	400a6000 	mfc0	t2,c0_sr
80013d88:	00000000 	nop
/home/git/21373271/21373271/kern/genex.S:29
	and     t0, t2
80013d8c:	010a4024 	and	t0,t0,t2
/home/git/21373271/21373271/kern/genex.S:30
	andi    t1, t0, STATUS_IM4
80013d90:	31091000 	andi	t1,t0,0x1000
/home/git/21373271/21373271/kern/genex.S:31
	bnez    t1, timer_irq
80013d94:	15200001 	bnez	t1,80013d9c <timer_irq>
80013d98:	00000000 	nop

80013d9c <timer_irq>:
/home/git/21373271/21373271/kern/genex.S:34
	// TODO: handle other irqs
timer_irq:
	sw      zero, (KSEG1 | DEV_RTC_ADDRESS | DEV_RTC_INTERRUPT_ACK)
80013d9c:	3c01b500 	lui	at,0xb500
80013da0:	ac200110 	sw	zero,272(at)
/home/git/21373271/21373271/kern/genex.S:35
	li      a0, 0
80013da4:	24040000 	li	a0,0
/home/git/21373271/21373271/kern/genex.S:36
	j       schedule
80013da8:	08005a84 	j	80016a10 <schedule>
80013dac:	00000000 	nop

80013db0 <handle_tlb>:
handle_tlb():
/home/git/21373271/21373271/kern/genex.S:39
END(handle_int)

BUILD_HANDLER tlb do_tlb_refill
80013db0:	03a02025 	move	a0,sp
80013db4:	27bdfff8 	addiu	sp,sp,-8
80013db8:	0c00603d 	jal	800180f4 <do_tlb_refill>
80013dbc:	00000000 	nop
80013dc0:	27bd0008 	addiu	sp,sp,8
80013dc4:	08004f38 	j	80013ce0 <ret_from_exception>
80013dc8:	00000000 	nop

80013dcc <handle_mod>:
handle_mod():
/home/git/21373271/21373271/kern/genex.S:42

#if !defined(LAB) || LAB >= 4
BUILD_HANDLER mod do_tlb_mod
80013dcc:	03a02025 	move	a0,sp
80013dd0:	27bdfff8 	addiu	sp,sp,-8
80013dd4:	0c00610a 	jal	80018428 <do_tlb_mod>
80013dd8:	00000000 	nop
80013ddc:	27bd0008 	addiu	sp,sp,8
80013de0:	08004f38 	j	80013ce0 <ret_from_exception>
80013de4:	00000000 	nop

80013de8 <handle_sys>:
handle_sys():
/home/git/21373271/21373271/kern/genex.S:43
BUILD_HANDLER sys do_syscall
80013de8:	03a02025 	move	a0,sp
80013dec:	27bdfff8 	addiu	sp,sp,-8
80013df0:	0c005fcf 	jal	80017f3c <do_syscall>
80013df4:	00000000 	nop
80013df8:	27bd0008 	addiu	sp,sp,8
80013dfc:	08004f38 	j	80013ce0 <ret_from_exception>
80013e00:	00000000 	nop

80013e04 <handle_reserved>:
handle_reserved():
/home/git/21373271/21373271/kern/genex.S:46
#endif

BUILD_HANDLER reserved do_reserved
80013e04:	03a02025 	move	a0,sp
80013e08:	27bdfff8 	addiu	sp,sp,-8
80013e0c:	0c00616c 	jal	800185b0 <do_reserved>
80013e10:	00000000 	nop
80013e14:	27bd0008 	addiu	sp,sp,8
80013e18:	08004f38 	j	80013ce0 <ret_from_exception>
80013e1c:	00000000 	nop

80013e20 <kclock_init>:
kclock_init():
/home/git/21373271/21373271/kern/kclock.S:7
#include <drivers/dev_rtc.h>
#include <kclock.h>
#include <mmu.h>

LEAF(kclock_init)
	li      t0, 200 // the timer interrupt frequency in Hz
80013e20:	240800c8 	li	t0,200
/home/git/21373271/21373271/kern/kclock.S:20
	 *   kseg1 address.
	 *
	 * Reference: http://gavare.se/gxemul/gxemul-stable/doc/experiments.html#expdevices
	 */
	/* Exercise 3.11: Your code here. */
	sw t0,( KSEG1 | DEV_RTC_ADDRESS | DEV_RTC_HZ )
80013e24:	3c01b500 	lui	at,0xb500
80013e28:	ac280100 	sw	t0,256(at)
/home/git/21373271/21373271/kern/kclock.S:21
	jr      ra
80013e2c:	03e00008 	jr	ra
80013e30:	00000000 	nop
	...

80013e40 <_panic>:
_panic():
/home/git/21373271/21373271/kern/panic.c:7
#include <print.h>
#include <printk.h>

void outputk(void *data, const char *buf, size_t len);

void _panic(const char *file, int line, const char *func, const char *fmt, ...) {
80013e40:	27bdffb8 	addiu	sp,sp,-72
80013e44:	afbf0044 	sw	ra,68(sp)
80013e48:	afbe0040 	sw	s8,64(sp)
80013e4c:	03a0f025 	move	s8,sp
80013e50:	afc40048 	sw	a0,72(s8)
80013e54:	afc5004c 	sw	a1,76(s8)
80013e58:	afc60050 	sw	a2,80(s8)
80013e5c:	afc70054 	sw	a3,84(s8)
/home/git/21373271/21373271/kern/panic.c:9
	u_long sp, ra, badva, sr, cause, epc;
	asm("move %0, $29" : "=r"(sp) :);
80013e60:	03a01025 	move	v0,sp
80013e64:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/kern/panic.c:10
	asm("move %0, $31" : "=r"(ra) :);
80013e68:	03e01025 	move	v0,ra
80013e6c:	afc20024 	sw	v0,36(s8)
/home/git/21373271/21373271/kern/panic.c:11
	asm("mfc0 %0, $8" : "=r"(badva) :);
80013e70:	40024000 	mfc0	v0,c0_badvaddr
80013e74:	00000000 	nop
80013e78:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/kern/panic.c:12
	asm("mfc0 %0, $12" : "=r"(sr) :);
80013e7c:	40026000 	mfc0	v0,c0_sr
80013e80:	00000000 	nop
80013e84:	afc2002c 	sw	v0,44(s8)
/home/git/21373271/21373271/kern/panic.c:13
	asm("mfc0 %0, $13" : "=r"(cause) :);
80013e88:	40026800 	mfc0	v0,c0_cause
80013e8c:	00000000 	nop
80013e90:	afc20030 	sw	v0,48(s8)
/home/git/21373271/21373271/kern/panic.c:14
	asm("mfc0 %0, $14" : "=r"(epc) :);
80013e94:	40027000 	mfc0	v0,c0_epc
80013e98:	00000000 	nop
80013e9c:	afc20034 	sw	v0,52(s8)
/home/git/21373271/21373271/kern/panic.c:16

	printk("panic at %s:%d (%s): ", file, line, func);
80013ea0:	8fc70050 	lw	a3,80(s8)
80013ea4:	8fc6004c 	lw	a2,76(s8)
80013ea8:	8fc50048 	lw	a1,72(s8)
80013eac:	3c028002 	lui	v0,0x8002
80013eb0:	24448c30 	addiu	a0,v0,-29648
80013eb4:	0c005a0d 	jal	80016834 <printk>
80013eb8:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:19

	va_list ap;
	va_start(ap, fmt);
80013ebc:	27c20058 	addiu	v0,s8,88
80013ec0:	afc20038 	sw	v0,56(s8)
/home/git/21373271/21373271/kern/panic.c:20
	vprintfmt(outputk, NULL, fmt, ap);
80013ec4:	8fc20038 	lw	v0,56(s8)
80013ec8:	00000000 	nop
80013ecc:	00403825 	move	a3,v0
80013ed0:	8fc60054 	lw	a2,84(s8)
80013ed4:	00002825 	move	a1,zero
80013ed8:	3c028001 	lui	v0,0x8001
80013edc:	244467a0 	addiu	a0,v0,26528
80013ee0:	0c004104 	jal	80010410 <vprintfmt>
80013ee4:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:23
	va_end(ap);

	printk("\n"
80013ee8:	8fc20028 	lw	v0,40(s8)
80013eec:	00000000 	nop
80013ef0:	afa20018 	sw	v0,24(sp)
80013ef4:	8fc20034 	lw	v0,52(s8)
80013ef8:	00000000 	nop
80013efc:	afa20014 	sw	v0,20(sp)
80013f00:	8fc20030 	lw	v0,48(s8)
80013f04:	00000000 	nop
80013f08:	afa20010 	sw	v0,16(sp)
80013f0c:	8fc7002c 	lw	a3,44(s8)
80013f10:	8fc60020 	lw	a2,32(s8)
80013f14:	8fc50024 	lw	a1,36(s8)
80013f18:	3c028002 	lui	v0,0x8002
80013f1c:	24448c48 	addiu	a0,v0,-29624
80013f20:	0c005a0d 	jal	80016834 <printk>
80013f24:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:33
#if !defined(LAB) || LAB >= 3
	extern struct Env envs[];
	extern struct Env *curenv;
	extern struct Pde *cur_pgdir;

	if ((u_long)curenv >= KERNBASE) {
80013f28:	3c028007 	lui	v0,0x8007
80013f2c:	8c42b000 	lw	v0,-20480(v0)
80013f30:	00000000 	nop
80013f34:	00401825 	move	v1,v0
80013f38:	3c028001 	lui	v0,0x8001
80013f3c:	0062102b 	sltu	v0,v1,v0
80013f40:	1440001a 	bnez	v0,80013fac <_panic+0x16c>
80013f44:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:34
		printk("curenv:    %x (id = 0x%x, off = %d)\n", curenv, curenv->env_id,
80013f48:	3c028007 	lui	v0,0x8007
80013f4c:	8c44b000 	lw	a0,-20480(v0)
80013f50:	3c028007 	lui	v0,0x8007
80013f54:	8c42b000 	lw	v0,-20480(v0)
80013f58:	00000000 	nop
80013f5c:	8c4500a0 	lw	a1,160(v0)
/home/git/21373271/21373271/kern/panic.c:35
		       curenv - envs);
80013f60:	3c028007 	lui	v0,0x8007
80013f64:	8c43b000 	lw	v1,-20480(v0)
80013f68:	3c028003 	lui	v0,0x8003
80013f6c:	24424000 	addiu	v0,v0,16384
80013f70:	00621023 	subu	v0,v1,v0
/home/git/21373271/21373271/kern/panic.c:34
		printk("curenv:    %x (id = 0x%x, off = %d)\n", curenv, curenv->env_id,
80013f74:	00021883 	sra	v1,v0,0x2
80013f78:	3c02586f 	lui	v0,0x586f
80013f7c:	3442b587 	ori	v0,v0,0xb587
80013f80:	00620018 	mult	v1,v0
80013f84:	00001012 	mflo	v0
80013f88:	00403825 	move	a3,v0
80013f8c:	00a03025 	move	a2,a1
80013f90:	00802825 	move	a1,a0
80013f94:	3c028002 	lui	v0,0x8002
80013f98:	24448c94 	addiu	a0,v0,-29548
80013f9c:	0c005a0d 	jal	80016834 <printk>
80013fa0:	00000000 	nop
80013fa4:	10000014 	b	80013ff8 <_panic+0x1b8>
80013fa8:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:36
	} else if (curenv) {
80013fac:	3c028007 	lui	v0,0x8007
80013fb0:	8c42b000 	lw	v0,-20480(v0)
80013fb4:	00000000 	nop
80013fb8:	1040000b 	beqz	v0,80013fe8 <_panic+0x1a8>
80013fbc:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:37
		printk("curenv:    %x (invalid)\n", curenv);
80013fc0:	3c028007 	lui	v0,0x8007
80013fc4:	8c42b000 	lw	v0,-20480(v0)
80013fc8:	00000000 	nop
80013fcc:	00402825 	move	a1,v0
80013fd0:	3c028002 	lui	v0,0x8002
80013fd4:	24448cbc 	addiu	a0,v0,-29508
80013fd8:	0c005a0d 	jal	80016834 <printk>
80013fdc:	00000000 	nop
80013fe0:	10000005 	b	80013ff8 <_panic+0x1b8>
80013fe4:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:39
	} else {
		printk("curenv:    NULL\n");
80013fe8:	3c028002 	lui	v0,0x8002
80013fec:	24448cd8 	addiu	a0,v0,-29480
80013ff0:	0c005a0d 	jal	80016834 <printk>
80013ff4:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:42
	}

	if ((u_long)cur_pgdir >= KERNBASE) {
80013ff8:	3c028007 	lui	v0,0x8007
80013ffc:	8c42b024 	lw	v0,-20444(v0)
80014000:	00000000 	nop
80014004:	00401825 	move	v1,v0
80014008:	3c028001 	lui	v0,0x8001
8001400c:	0062102b 	sltu	v0,v1,v0
80014010:	1440000b 	bnez	v0,80014040 <_panic+0x200>
80014014:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:43
		printk("cur_pgdir: %x\n", cur_pgdir);
80014018:	3c028007 	lui	v0,0x8007
8001401c:	8c42b024 	lw	v0,-20444(v0)
80014020:	00000000 	nop
80014024:	00402825 	move	a1,v0
80014028:	3c028002 	lui	v0,0x8002
8001402c:	24448cec 	addiu	a0,v0,-29460
80014030:	0c005a0d 	jal	80016834 <printk>
80014034:	00000000 	nop
80014038:	10000018 	b	8001409c <_panic+0x25c>
8001403c:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:44
	} else if (cur_pgdir) {
80014040:	3c028007 	lui	v0,0x8007
80014044:	8c42b024 	lw	v0,-20444(v0)
80014048:	00000000 	nop
8001404c:	1040000b 	beqz	v0,8001407c <_panic+0x23c>
80014050:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:45
		printk("cur_pgdir: %x (invalid)\n", cur_pgdir);
80014054:	3c028007 	lui	v0,0x8007
80014058:	8c42b024 	lw	v0,-20444(v0)
8001405c:	00000000 	nop
80014060:	00402825 	move	a1,v0
80014064:	3c028002 	lui	v0,0x8002
80014068:	24448cfc 	addiu	a0,v0,-29444
8001406c:	0c005a0d 	jal	80016834 <printk>
80014070:	00000000 	nop
80014074:	10000009 	b	8001409c <_panic+0x25c>
80014078:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:47
	} else {
		printk("cur_pgdir: NULL\n", cur_pgdir);
8001407c:	3c028007 	lui	v0,0x8007
80014080:	8c42b024 	lw	v0,-20444(v0)
80014084:	00000000 	nop
80014088:	00402825 	move	a1,v0
8001408c:	3c028002 	lui	v0,0x8002
80014090:	24448d18 	addiu	a0,v0,-29416
80014094:	0c005a0d 	jal	80016834 <printk>
80014098:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:55

#ifdef MOS_HANG_ON_PANIC
	while (1) {
	}
#else
	halt();
8001409c:	0c004650 	jal	80011940 <halt>
800140a0:	00000000 	nop
/home/git/21373271/21373271/kern/panic.c:57
#endif
}
800140a4:	00000000 	nop
800140a8:	03c0e825 	move	sp,s8
800140ac:	8fbf0044 	lw	ra,68(sp)
800140b0:	8fbe0040 	lw	s8,64(sp)
800140b4:	27bd0048 	addiu	sp,sp,72
800140b8:	03e00008 	jr	ra
800140bc:	00000000 	nop

800140c0 <page2ppn>:
page2ppn():
/home/git/21373271/21373271/kern/../include/pmap.h:28
static inline u_long page2ppn(struct Page *pp) {
800140c0:	27bdfff8 	addiu	sp,sp,-8
800140c4:	afbe0004 	sw	s8,4(sp)
800140c8:	03a0f025 	move	s8,sp
800140cc:	afc40008 	sw	a0,8(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:29
	return pp - pages;
800140d0:	3c028007 	lui	v0,0x8007
800140d4:	8c42b028 	lw	v0,-20440(v0)
800140d8:	8fc30008 	lw	v1,8(s8)
800140dc:	00000000 	nop
800140e0:	00621023 	subu	v0,v1,v0
800140e4:	00021883 	sra	v1,v0,0x2
800140e8:	00601025 	move	v0,v1
800140ec:	00021080 	sll	v0,v0,0x2
800140f0:	00431021 	addu	v0,v0,v1
800140f4:	00021900 	sll	v1,v0,0x4
800140f8:	00431021 	addu	v0,v0,v1
800140fc:	00021a00 	sll	v1,v0,0x8
80014100:	00431021 	addu	v0,v0,v1
80014104:	00021c00 	sll	v1,v0,0x10
80014108:	00431021 	addu	v0,v0,v1
8001410c:	00021023 	negu	v0,v0
/home/git/21373271/21373271/kern/../include/pmap.h:30
}
80014110:	03c0e825 	move	sp,s8
80014114:	8fbe0004 	lw	s8,4(sp)
80014118:	27bd0008 	addiu	sp,sp,8
8001411c:	03e00008 	jr	ra
80014120:	00000000 	nop

80014124 <page2pa>:
page2pa():
/home/git/21373271/21373271/kern/../include/pmap.h:32
static inline u_long page2pa(struct Page *pp) {
80014124:	27bdffe8 	addiu	sp,sp,-24
80014128:	afbf0014 	sw	ra,20(sp)
8001412c:	afbe0010 	sw	s8,16(sp)
80014130:	03a0f025 	move	s8,sp
80014134:	afc40018 	sw	a0,24(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:33
	return page2ppn(pp) << PGSHIFT;
80014138:	8fc40018 	lw	a0,24(s8)
8001413c:	0c005030 	jal	800140c0 <page2ppn>
80014140:	00000000 	nop
80014144:	00021300 	sll	v0,v0,0xc
/home/git/21373271/21373271/kern/../include/pmap.h:34
}
80014148:	03c0e825 	move	sp,s8
8001414c:	8fbf0014 	lw	ra,20(sp)
80014150:	8fbe0010 	lw	s8,16(sp)
80014154:	27bd0018 	addiu	sp,sp,24
80014158:	03e00008 	jr	ra
8001415c:	00000000 	nop

80014160 <pa2page>:
pa2page():
/home/git/21373271/21373271/kern/../include/pmap.h:36
static inline struct Page *pa2page(u_long pa) {
80014160:	27bdffe0 	addiu	sp,sp,-32
80014164:	afbf001c 	sw	ra,28(sp)
80014168:	afbe0018 	sw	s8,24(sp)
8001416c:	03a0f025 	move	s8,sp
80014170:	afc40020 	sw	a0,32(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:37
	if (PPN(pa) >= npage) {
80014174:	8fc20020 	lw	v0,32(s8)
80014178:	00000000 	nop
8001417c:	00021b02 	srl	v1,v0,0xc
80014180:	3c028007 	lui	v0,0x8007
80014184:	8c42b020 	lw	v0,-20448(v0)
80014188:	00000000 	nop
8001418c:	0062102b 	sltu	v0,v1,v0
80014190:	1440000d 	bnez	v0,800141c8 <pa2page+0x68>
80014194:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:38
		panic("pa2page called with invalid pa: %x", pa);
80014198:	8fc20020 	lw	v0,32(s8)
8001419c:	00000000 	nop
800141a0:	afa20010 	sw	v0,16(sp)
800141a4:	3c028002 	lui	v0,0x8002
800141a8:	24478d30 	addiu	a3,v0,-29392
800141ac:	3c028002 	lui	v0,0x8002
800141b0:	2446938c 	addiu	a2,v0,-27764
800141b4:	24050026 	li	a1,38
800141b8:	3c028002 	lui	v0,0x8002
800141bc:	24448d54 	addiu	a0,v0,-29356
800141c0:	0c004f90 	jal	80013e40 <_panic>
800141c4:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:40
	return &pages[PPN(pa)];
800141c8:	3c028007 	lui	v0,0x8007
800141cc:	8c44b028 	lw	a0,-20440(v0)
800141d0:	8fc20020 	lw	v0,32(s8)
800141d4:	00000000 	nop
800141d8:	00021b02 	srl	v1,v0,0xc
800141dc:	00601025 	move	v0,v1
800141e0:	00021040 	sll	v0,v0,0x1
800141e4:	00431021 	addu	v0,v0,v1
800141e8:	00021080 	sll	v0,v0,0x2
800141ec:	00821021 	addu	v0,a0,v0
/home/git/21373271/21373271/kern/../include/pmap.h:41
}
800141f0:	03c0e825 	move	sp,s8
800141f4:	8fbf001c 	lw	ra,28(sp)
800141f8:	8fbe0018 	lw	s8,24(sp)
800141fc:	27bd0020 	addiu	sp,sp,32
80014200:	03e00008 	jr	ra
80014204:	00000000 	nop

80014208 <page2kva>:
page2kva():
/home/git/21373271/21373271/kern/../include/pmap.h:43
static inline u_long page2kva(struct Page *pp) {
80014208:	27bdffd8 	addiu	sp,sp,-40
8001420c:	afbf0024 	sw	ra,36(sp)
80014210:	afbe0020 	sw	s8,32(sp)
80014214:	03a0f025 	move	s8,sp
80014218:	afc40028 	sw	a0,40(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:44
	return KADDR(page2pa(pp));
8001421c:	8fc40028 	lw	a0,40(s8)
80014220:	0c005049 	jal	80014124 <page2pa>
80014224:	00000000 	nop
80014228:	00021302 	srl	v0,v0,0xc
8001422c:	afc20018 	sw	v0,24(s8)
80014230:	3c028007 	lui	v0,0x8007
80014234:	8c42b020 	lw	v0,-20448(v0)
80014238:	8fc30018 	lw	v1,24(s8)
8001423c:	00000000 	nop
80014240:	0062102b 	sltu	v0,v1,v0
80014244:	1440000e 	bnez	v0,80014280 <page2kva+0x78>
80014248:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:44 (discriminator 1)
8001424c:	8fc40028 	lw	a0,40(s8)
80014250:	0c005049 	jal	80014124 <page2pa>
80014254:	00000000 	nop
80014258:	afa20010 	sw	v0,16(sp)
8001425c:	3c028002 	lui	v0,0x8002
80014260:	24478d68 	addiu	a3,v0,-29336
80014264:	3c028002 	lui	v0,0x8002
80014268:	24469368 	addiu	a2,v0,-27800
8001426c:	2405002c 	li	a1,44
80014270:	3c028002 	lui	v0,0x8002
80014274:	24448d54 	addiu	a0,v0,-29356
80014278:	0c004f90 	jal	80013e40 <_panic>
8001427c:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:44 (discriminator 3)
80014280:	8fc40028 	lw	a0,40(s8)
80014284:	0c005049 	jal	80014124 <page2pa>
80014288:	00000000 	nop
8001428c:	00401825 	move	v1,v0
80014290:	3c028000 	lui	v0,0x8000
80014294:	00621021 	addu	v0,v1,v0
/home/git/21373271/21373271/kern/../include/pmap.h:45 (discriminator 3)
}
80014298:	03c0e825 	move	sp,s8
8001429c:	8fbf0024 	lw	ra,36(sp)
800142a0:	8fbe0020 	lw	s8,32(sp)
800142a4:	27bd0028 	addiu	sp,sp,40
800142a8:	03e00008 	jr	ra
800142ac:	00000000 	nop

800142b0 <va2pa>:
va2pa():
/home/git/21373271/21373271/kern/../include/pmap.h:47
static inline u_long va2pa(Pde *pgdir, u_long va) {
800142b0:	27bdffd8 	addiu	sp,sp,-40
800142b4:	afbf0024 	sw	ra,36(sp)
800142b8:	afbe0020 	sw	s8,32(sp)
800142bc:	03a0f025 	move	s8,sp
800142c0:	afc40028 	sw	a0,40(s8)
800142c4:	afc5002c 	sw	a1,44(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:50
	pgdir = &pgdir[PDX(va)];
800142c8:	8fc2002c 	lw	v0,44(s8)
800142cc:	00000000 	nop
800142d0:	00021582 	srl	v0,v0,0x16
800142d4:	00021080 	sll	v0,v0,0x2
800142d8:	8fc30028 	lw	v1,40(s8)
800142dc:	00000000 	nop
800142e0:	00621021 	addu	v0,v1,v0
800142e4:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:51
	if (!(*pgdir & PTE_V)) {
800142e8:	8fc20028 	lw	v0,40(s8)
800142ec:	00000000 	nop
800142f0:	8c420000 	lw	v0,0(v0)
800142f4:	00000000 	nop
800142f8:	30420200 	andi	v0,v0,0x200
800142fc:	14400004 	bnez	v0,80014310 <va2pa+0x60>
80014300:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:52
		return ~0;
80014304:	2402ffff 	li	v0,-1
80014308:	10000040 	b	8001440c <va2pa+0x15c>
8001430c:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:54
	p = (Pte *)KADDR(PTE_ADDR(*pgdir));
80014310:	8fc20028 	lw	v0,40(s8)
80014314:	00000000 	nop
80014318:	8c420000 	lw	v0,0(v0)
8001431c:	00000000 	nop
80014320:	00021302 	srl	v0,v0,0xc
80014324:	afc20018 	sw	v0,24(s8)
80014328:	3c028007 	lui	v0,0x8007
8001432c:	8c42b020 	lw	v0,-20448(v0)
80014330:	8fc30018 	lw	v1,24(s8)
80014334:	00000000 	nop
80014338:	0062102b 	sltu	v0,v1,v0
8001433c:	14400010 	bnez	v0,80014380 <va2pa+0xd0>
80014340:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:54 (discriminator 1)
80014344:	8fc20028 	lw	v0,40(s8)
80014348:	00000000 	nop
8001434c:	8c430000 	lw	v1,0(v0)
80014350:	2402f000 	li	v0,-4096
80014354:	00621024 	and	v0,v1,v0
80014358:	afa20010 	sw	v0,16(sp)
8001435c:	3c028002 	lui	v0,0x8002
80014360:	24478d68 	addiu	a3,v0,-29336
80014364:	3c028002 	lui	v0,0x8002
80014368:	244693cc 	addiu	a2,v0,-27700
8001436c:	24050036 	li	a1,54
80014370:	3c028002 	lui	v0,0x8002
80014374:	24448d54 	addiu	a0,v0,-29356
80014378:	0c004f90 	jal	80013e40 <_panic>
8001437c:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:54 (discriminator 3)
80014380:	8fc20028 	lw	v0,40(s8)
80014384:	00000000 	nop
80014388:	8c430000 	lw	v1,0(v0)
8001438c:	2402f000 	li	v0,-4096
80014390:	00621824 	and	v1,v1,v0
80014394:	3c028000 	lui	v0,0x8000
80014398:	00621021 	addu	v0,v1,v0
8001439c:	afc2001c 	sw	v0,28(s8)
/home/git/21373271/21373271/kern/../include/pmap.h:55 (discriminator 3)
	if (!(p[PTX(va)] & PTE_V)) {
800143a0:	8fc2002c 	lw	v0,44(s8)
800143a4:	00000000 	nop
800143a8:	00021302 	srl	v0,v0,0xc
800143ac:	304203ff 	andi	v0,v0,0x3ff
800143b0:	00021080 	sll	v0,v0,0x2
800143b4:	8fc3001c 	lw	v1,28(s8)
800143b8:	00000000 	nop
800143bc:	00621021 	addu	v0,v1,v0
800143c0:	8c420000 	lw	v0,0(v0)
800143c4:	00000000 	nop
800143c8:	30420200 	andi	v0,v0,0x200
800143cc:	14400004 	bnez	v0,800143e0 <va2pa+0x130>
800143d0:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:56
		return ~0;
800143d4:	2402ffff 	li	v0,-1
800143d8:	1000000c 	b	8001440c <va2pa+0x15c>
800143dc:	00000000 	nop
/home/git/21373271/21373271/kern/../include/pmap.h:58
	return PTE_ADDR(p[PTX(va)]);
800143e0:	8fc2002c 	lw	v0,44(s8)
800143e4:	00000000 	nop
800143e8:	00021302 	srl	v0,v0,0xc
800143ec:	304203ff 	andi	v0,v0,0x3ff
800143f0:	00021080 	sll	v0,v0,0x2
800143f4:	8fc3001c 	lw	v1,28(s8)
800143f8:	00000000 	nop
800143fc:	00621021 	addu	v0,v1,v0
80014400:	8c430000 	lw	v1,0(v0)
80014404:	2402f000 	li	v0,-4096
80014408:	00621024 	and	v0,v1,v0
/home/git/21373271/21373271/kern/../include/pmap.h:59
}
8001440c:	03c0e825 	move	sp,s8
80014410:	8fbf0024 	lw	ra,36(sp)
80014414:	8fbe0020 	lw	s8,32(sp)
80014418:	27bd0028 	addiu	sp,sp,40
8001441c:	03e00008 	jr	ra
80014420:	00000000 	nop

80014424 <mips_detect_memory>:
mips_detect_memory():
/home/git/21373271/21373271/kern/pmap.c:22

/* Overview:
 *   Read memory size from DEV_MP to initialize 'memsize' and calculate the corresponding 'npage'
 *   value.
 */
void mips_detect_memory() {
80014424:	27bdffe8 	addiu	sp,sp,-24
80014428:	afbf0014 	sw	ra,20(sp)
8001442c:	afbe0010 	sw	s8,16(sp)
80014430:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/pmap.c:24
	/* Step 1: Initialize memsize. */
	memsize = *(volatile u_int *)(KSEG1 | DEV_MP_ADDRESS | DEV_MP_MEMORY);
80014434:	3c02b100 	lui	v0,0xb100
80014438:	34420090 	ori	v0,v0,0x90
8001443c:	8c430000 	lw	v1,0(v0)
80014440:	3c028007 	lui	v0,0x8007
80014444:	ac43b030 	sw	v1,-20432(v0)
/home/git/21373271/21373271/kern/pmap.c:28

	/* Step 2: Calculate the corresponding 'npage' value. */
	/* Exercise 2.1: Your code here. */
	npage = memsize >> PGSHIFT;
80014448:	3c028007 	lui	v0,0x8007
8001444c:	8c42b030 	lw	v0,-20432(v0)
80014450:	00000000 	nop
80014454:	00021b02 	srl	v1,v0,0xc
80014458:	3c028007 	lui	v0,0x8007
8001445c:	ac43b020 	sw	v1,-20448(v0)
/home/git/21373271/21373271/kern/pmap.c:29
	printk("Memory size: %lu KiB, number of pages: %lu\n", memsize / 1024, npage);
80014460:	3c028007 	lui	v0,0x8007
80014464:	8c42b030 	lw	v0,-20432(v0)
80014468:	00000000 	nop
8001446c:	00021a82 	srl	v1,v0,0xa
80014470:	3c028007 	lui	v0,0x8007
80014474:	8c42b020 	lw	v0,-20448(v0)
80014478:	00000000 	nop
8001447c:	00403025 	move	a2,v0
80014480:	00602825 	move	a1,v1
80014484:	3c028002 	lui	v0,0x8002
80014488:	24448d8c 	addiu	a0,v0,-29300
8001448c:	0c005a0d 	jal	80016834 <printk>
80014490:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:30
}
80014494:	00000000 	nop
80014498:	03c0e825 	move	sp,s8
8001449c:	8fbf0014 	lw	ra,20(sp)
800144a0:	8fbe0010 	lw	s8,16(sp)
800144a4:	27bd0018 	addiu	sp,sp,24
800144a8:	03e00008 	jr	ra
800144ac:	00000000 	nop

800144b0 <alloc>:
alloc():
/home/git/21373271/21373271/kern/pmap.c:38
    Allocate `n` bytes physical memory with alignment `align`, if `clear` is set, clear the
    allocated memory.
    This allocator is used only while setting up virtual memory system.
   Post-Condition:
    If we're out of memory, should panic, else return this address of memory we have allocated.*/
void *alloc(u_int n, u_int align, int clear) {
800144b0:	27bdffd0 	addiu	sp,sp,-48
800144b4:	afbf002c 	sw	ra,44(sp)
800144b8:	afbe0028 	sw	s8,40(sp)
800144bc:	03a0f025 	move	s8,sp
800144c0:	afc40030 	sw	a0,48(s8)
800144c4:	afc50034 	sw	a1,52(s8)
800144c8:	afc60038 	sw	a2,56(s8)
/home/git/21373271/21373271/kern/pmap.c:44
	extern char end[];
	u_long alloced_mem;

	/* Initialize `freemem` if this is the first time. The first virtual address that the
	 * linker did *not* assign to any kernel code or global variables. */
	if (freemem == 0) {
800144cc:	3c028007 	lui	v0,0x8007
800144d0:	8c42b034 	lw	v0,-20428(v0)
800144d4:	00000000 	nop
800144d8:	14400005 	bnez	v0,800144f0 <alloc+0x40>
800144dc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:45
		freemem = (u_long)end; // end
800144e0:	3c028040 	lui	v0,0x8040
800144e4:	24430000 	addiu	v1,v0,0
800144e8:	3c028007 	lui	v0,0x8007
800144ec:	ac43b034 	sw	v1,-20428(v0)
/home/git/21373271/21373271/kern/pmap.c:49
	}

	/* Step 1: Round up `freemem` up to be aligned properly */
	freemem = ROUND(freemem, align);
800144f0:	3c028007 	lui	v0,0x8007
800144f4:	8c43b034 	lw	v1,-20428(v0)
800144f8:	8fc20034 	lw	v0,52(s8)
800144fc:	00000000 	nop
80014500:	00621021 	addu	v0,v1,v0
80014504:	2443ffff 	addiu	v1,v0,-1
80014508:	8fc20034 	lw	v0,52(s8)
8001450c:	00000000 	nop
80014510:	00021023 	negu	v0,v0
80014514:	00621824 	and	v1,v1,v0
80014518:	3c028007 	lui	v0,0x8007
8001451c:	ac43b034 	sw	v1,-20428(v0)
/home/git/21373271/21373271/kern/pmap.c:52

	/* Step 2: Save current value of `freemem` as allocated chunk. */
	alloced_mem = freemem;
80014520:	3c028007 	lui	v0,0x8007
80014524:	8c42b034 	lw	v0,-20428(v0)
80014528:	00000000 	nop
8001452c:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/pmap.c:55

	/* Step 3: Increase `freemem` to record allocation. */
	freemem = freemem + n;
80014530:	3c028007 	lui	v0,0x8007
80014534:	8c43b034 	lw	v1,-20428(v0)
80014538:	8fc20030 	lw	v0,48(s8)
8001453c:	00000000 	nop
80014540:	00621821 	addu	v1,v1,v0
80014544:	3c028007 	lui	v0,0x8007
80014548:	ac43b034 	sw	v1,-20428(v0)
/home/git/21373271/21373271/kern/pmap.c:58

	// Panic if we're out of memory.
	panic_on(PADDR(freemem) >= memsize);
8001454c:	3c028007 	lui	v0,0x8007
80014550:	8c42b034 	lw	v0,-20428(v0)
80014554:	00000000 	nop
80014558:	afc2001c 	sw	v0,28(s8)
8001455c:	8fc2001c 	lw	v0,28(s8)
80014560:	00000000 	nop
80014564:	0440000d 	bltz	v0,8001459c <alloc+0xec>
80014568:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:58 (discriminator 1)
8001456c:	8fc2001c 	lw	v0,28(s8)
80014570:	00000000 	nop
80014574:	afa20010 	sw	v0,16(sp)
80014578:	3c028002 	lui	v0,0x8002
8001457c:	24478db8 	addiu	a3,v0,-29256
80014580:	3c028002 	lui	v0,0x8002
80014584:	24469354 	addiu	a2,v0,-27820
80014588:	2405003a 	li	a1,58
8001458c:	3c028002 	lui	v0,0x8002
80014590:	24448ddc 	addiu	a0,v0,-29220
80014594:	0c004f90 	jal	80013e40 <_panic>
80014598:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:58 (discriminator 3)
8001459c:	8fc3001c 	lw	v1,28(s8)
800145a0:	3c028000 	lui	v0,0x8000
800145a4:	00621821 	addu	v1,v1,v0
800145a8:	3c028007 	lui	v0,0x8007
800145ac:	8c42b030 	lw	v0,-20432(v0)
800145b0:	00000000 	nop
800145b4:	0062102b 	sltu	v0,v1,v0
800145b8:	38420001 	xori	v0,v0,0x1
800145bc:	304200ff 	andi	v0,v0,0xff
800145c0:	afc20020 	sw	v0,32(s8)
800145c4:	8fc20020 	lw	v0,32(s8)
800145c8:	00000000 	nop
800145cc:	1040000d 	beqz	v0,80014604 <alloc+0x154>
800145d0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:58 (discriminator 4)
800145d4:	8fc20020 	lw	v0,32(s8)
800145d8:	00000000 	nop
800145dc:	afa20010 	sw	v0,16(sp)
800145e0:	3c028002 	lui	v0,0x8002
800145e4:	24478de4 	addiu	a3,v0,-29212
800145e8:	3c028002 	lui	v0,0x8002
800145ec:	24469354 	addiu	a2,v0,-27820
800145f0:	2405003a 	li	a1,58
800145f4:	3c028002 	lui	v0,0x8002
800145f8:	24448ddc 	addiu	a0,v0,-29220
800145fc:	0c004f90 	jal	80013e40 <_panic>
80014600:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:61

	/* Step 4: Clear allocated chunk if parameter `clear` is set. */
	if (clear) {
80014604:	8fc20038 	lw	v0,56(s8)
80014608:	00000000 	nop
8001460c:	10400007 	beqz	v0,8001462c <alloc+0x17c>
80014610:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:62
		memset((void *)alloced_mem, 0, n);
80014614:	8fc20018 	lw	v0,24(s8)
80014618:	8fc60030 	lw	a2,48(s8)
8001461c:	00002825 	move	a1,zero
80014620:	00402025 	move	a0,v0
80014624:	0c00451a 	jal	80011468 <memset>
80014628:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:66
	}

	/* Step 5: return allocated chunk. */
	return (void *)alloced_mem;
8001462c:	8fc20018 	lw	v0,24(s8)
/home/git/21373271/21373271/kern/pmap.c:67
}
80014630:	03c0e825 	move	sp,s8
80014634:	8fbf002c 	lw	ra,44(sp)
80014638:	8fbe0028 	lw	s8,40(sp)
8001463c:	27bd0030 	addiu	sp,sp,48
80014640:	03e00008 	jr	ra
80014644:	00000000 	nop

80014648 <mips_vm_init>:
mips_vm_init():
/home/git/21373271/21373271/kern/pmap.c:73

/* Overview:
    Set up two-level page table.
   Hint:
    You can get more details about `UPAGES` and `UENVS` in include/mmu.h. */
void mips_vm_init() {
80014648:	27bdffe8 	addiu	sp,sp,-24
8001464c:	afbf0014 	sw	ra,20(sp)
80014650:	afbe0010 	sw	s8,16(sp)
80014654:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/pmap.c:78
	/* Allocate proper size of physical memory for global array `pages`,
	 * for physical memory management. Then, map virtual address `UPAGES` to
	 * physical address `pages` allocated before. For consideration of alignment,
	 * you should round up the memory size before map. */
	pages = (struct Page *)alloc(npage * sizeof(struct Page), BY2PG, 1);
80014658:	3c028007 	lui	v0,0x8007
8001465c:	8c43b020 	lw	v1,-20448(v0)
80014660:	00000000 	nop
80014664:	00601025 	move	v0,v1
80014668:	00021040 	sll	v0,v0,0x1
8001466c:	00431021 	addu	v0,v0,v1
80014670:	00021080 	sll	v0,v0,0x2
80014674:	24060001 	li	a2,1
80014678:	24051000 	li	a1,4096
8001467c:	00402025 	move	a0,v0
80014680:	0c00512c 	jal	800144b0 <alloc>
80014684:	00000000 	nop
80014688:	00401825 	move	v1,v0
8001468c:	3c028007 	lui	v0,0x8007
80014690:	ac43b028 	sw	v1,-20440(v0)
/home/git/21373271/21373271/kern/pmap.c:79
	printk("to memory %x for struct Pages.\n", freemem);
80014694:	3c028007 	lui	v0,0x8007
80014698:	8c42b034 	lw	v0,-20428(v0)
8001469c:	00000000 	nop
800146a0:	00402825 	move	a1,v0
800146a4:	3c028002 	lui	v0,0x8002
800146a8:	24448e0c 	addiu	a0,v0,-29172
800146ac:	0c005a0d 	jal	80016834 <printk>
800146b0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:80
	printk("pmap.c:\t mips vm init success\n");
800146b4:	3c028002 	lui	v0,0x8002
800146b8:	24448e2c 	addiu	a0,v0,-29140
800146bc:	0c005a0d 	jal	80016834 <printk>
800146c0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:81
}
800146c4:	00000000 	nop
800146c8:	03c0e825 	move	sp,s8
800146cc:	8fbf0014 	lw	ra,20(sp)
800146d0:	8fbe0010 	lw	s8,16(sp)
800146d4:	27bd0018 	addiu	sp,sp,24
800146d8:	03e00008 	jr	ra
800146dc:	00000000 	nop

800146e0 <page_init>:
page_init():
/home/git/21373271/21373271/kern/pmap.c:89
 *   Initialize page structure and memory free list. The 'pages' array has one 'struct Page' entry
 * per physical page. Pages are reference counted, and free pages are kept on a linked list.
 *
 * Hint: Use 'LIST_INSERT_HEAD' to insert free pages to 'page_free_list'.
 */
void page_init(void) {
800146e0:	27bdffd0 	addiu	sp,sp,-48
800146e4:	afbf002c 	sw	ra,44(sp)
800146e8:	afbe0028 	sw	s8,40(sp)
800146ec:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/pmap.c:91
	/* Step 1: Initialize page_free_list. */
	LIST_INIT(&page_free_list);
800146f0:	3c028007 	lui	v0,0x8007
800146f4:	ac40b02c 	sw	zero,-20436(v0)
/home/git/21373271/21373271/kern/pmap.c:96
	/* Hint: Use macro `LIST_INIT` defined in include/queue.h. */
	/* Exercise 2.3: Your code here. (1/4) */
	/* Step 2: Align `freemem` up to multiple of BY2PG. */
	/* Exercise 2.3: Your code here. (2/4) */
	freemem = ROUND(freemem,BY2PG);
800146f8:	3c028007 	lui	v0,0x8007
800146fc:	8c42b034 	lw	v0,-20428(v0)
80014700:	00000000 	nop
80014704:	24430fff 	addiu	v1,v0,4095
80014708:	2402f000 	li	v0,-4096
8001470c:	00621824 	and	v1,v1,v0
80014710:	3c028007 	lui	v0,0x8007
80014714:	ac43b034 	sw	v1,-20428(v0)
/home/git/21373271/21373271/kern/pmap.c:98
	/* Step 3: Mark all memory below `freemem` as used (set `pp_ref` to 1) */
	int i = 0;
80014718:	afc00018 	sw	zero,24(s8)
/home/git/21373271/21373271/kern/pmap.c:99
	int num = PADDR(freemem)/BY2PG;
8001471c:	3c028007 	lui	v0,0x8007
80014720:	8c42b034 	lw	v0,-20428(v0)
80014724:	00000000 	nop
80014728:	afc2001c 	sw	v0,28(s8)
8001472c:	8fc2001c 	lw	v0,28(s8)
80014730:	00000000 	nop
80014734:	0440000d 	bltz	v0,8001476c <page_init+0x8c>
80014738:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:99 (discriminator 1)
8001473c:	8fc2001c 	lw	v0,28(s8)
80014740:	00000000 	nop
80014744:	afa20010 	sw	v0,16(sp)
80014748:	3c028002 	lui	v0,0x8002
8001474c:	24478db8 	addiu	a3,v0,-29256
80014750:	3c028002 	lui	v0,0x8002
80014754:	2446935c 	addiu	a2,v0,-27812
80014758:	24050063 	li	a1,99
8001475c:	3c028002 	lui	v0,0x8002
80014760:	24448ddc 	addiu	a0,v0,-29220
80014764:	0c004f90 	jal	80013e40 <_panic>
80014768:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:99 (discriminator 3)
8001476c:	8fc3001c 	lw	v1,28(s8)
80014770:	3c028000 	lui	v0,0x8000
80014774:	00621021 	addu	v0,v1,v0
80014778:	00021302 	srl	v0,v0,0xc
8001477c:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/kern/pmap.c:112 (discriminator 3)
	//	else
	//	{
	//		break;
	//	}
	//}
	for (i = 0;i < num;i++)
80014780:	afc00018 	sw	zero,24(s8)
80014784:	10000010 	b	800147c8 <page_init+0xe8>
80014788:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:114 (discriminator 3)
	{
		pages[i].pp_ref = 1;
8001478c:	3c028007 	lui	v0,0x8007
80014790:	8c44b028 	lw	a0,-20440(v0)
80014794:	8fc30018 	lw	v1,24(s8)
80014798:	00000000 	nop
8001479c:	00601025 	move	v0,v1
800147a0:	00021040 	sll	v0,v0,0x1
800147a4:	00431021 	addu	v0,v0,v1
800147a8:	00021080 	sll	v0,v0,0x2
800147ac:	00821021 	addu	v0,a0,v0
800147b0:	24030001 	li	v1,1
800147b4:	a4430008 	sh	v1,8(v0)
/home/git/21373271/21373271/kern/pmap.c:112 (discriminator 3)
	for (i = 0;i < num;i++)
800147b8:	8fc20018 	lw	v0,24(s8)
800147bc:	00000000 	nop
800147c0:	24420001 	addiu	v0,v0,1
800147c4:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/pmap.c:112 (discriminator 1)
800147c8:	8fc30018 	lw	v1,24(s8)
800147cc:	8fc20020 	lw	v0,32(s8)
800147d0:	00000000 	nop
800147d4:	0062102a 	slt	v0,v1,v0
800147d8:	1440ffec 	bnez	v0,8001478c <page_init+0xac>
800147dc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:117
	}
	/* Exercise 2.3: Your code here. (3/4) */
	for (i = num;i < npage;i++)
800147e0:	8fc20020 	lw	v0,32(s8)
800147e4:	00000000 	nop
800147e8:	afc20018 	sw	v0,24(s8)
800147ec:	10000051 	b	80014934 <page_init+0x254>
800147f0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:119
	{
		if(pages[i].pp_ref != 1)
800147f4:	3c028007 	lui	v0,0x8007
800147f8:	8c44b028 	lw	a0,-20440(v0)
800147fc:	8fc30018 	lw	v1,24(s8)
80014800:	00000000 	nop
80014804:	00601025 	move	v0,v1
80014808:	00021040 	sll	v0,v0,0x1
8001480c:	00431021 	addu	v0,v0,v1
80014810:	00021080 	sll	v0,v0,0x2
80014814:	00821021 	addu	v0,a0,v0
80014818:	94430008 	lhu	v1,8(v0)
8001481c:	24020001 	li	v0,1
80014820:	10620040 	beq	v1,v0,80014924 <page_init+0x244>
80014824:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:121
		{
			pages[i].pp_ref = 0;
80014828:	3c028007 	lui	v0,0x8007
8001482c:	8c44b028 	lw	a0,-20440(v0)
80014830:	8fc30018 	lw	v1,24(s8)
80014834:	00000000 	nop
80014838:	00601025 	move	v0,v1
8001483c:	00021040 	sll	v0,v0,0x1
80014840:	00431021 	addu	v0,v0,v1
80014844:	00021080 	sll	v0,v0,0x2
80014848:	00821021 	addu	v0,a0,v0
8001484c:	a4400008 	sh	zero,8(v0)
/home/git/21373271/21373271/kern/pmap.c:122
			LIST_INSERT_HEAD(&page_free_list,pages+i,pp_link);
80014850:	3c028007 	lui	v0,0x8007
80014854:	8c44b028 	lw	a0,-20440(v0)
80014858:	8fc30018 	lw	v1,24(s8)
8001485c:	00000000 	nop
80014860:	00601025 	move	v0,v1
80014864:	00021040 	sll	v0,v0,0x1
80014868:	00431021 	addu	v0,v0,v1
8001486c:	00021080 	sll	v0,v0,0x2
80014870:	00821021 	addu	v0,a0,v0
80014874:	3c038007 	lui	v1,0x8007
80014878:	8c63b02c 	lw	v1,-20436(v1)
8001487c:	00000000 	nop
80014880:	ac430000 	sw	v1,0(v0)
80014884:	8c420000 	lw	v0,0(v0)
80014888:	00000000 	nop
8001488c:	1040000e 	beqz	v0,800148c8 <page_init+0x1e8>
80014890:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:122 (discriminator 1)
80014894:	3c028007 	lui	v0,0x8007
80014898:	8c44b028 	lw	a0,-20440(v0)
8001489c:	8fc30018 	lw	v1,24(s8)
800148a0:	00000000 	nop
800148a4:	00601025 	move	v0,v1
800148a8:	00021040 	sll	v0,v0,0x1
800148ac:	00431021 	addu	v0,v0,v1
800148b0:	00021080 	sll	v0,v0,0x2
800148b4:	00821821 	addu	v1,a0,v0
800148b8:	3c028007 	lui	v0,0x8007
800148bc:	8c42b02c 	lw	v0,-20436(v0)
800148c0:	00000000 	nop
800148c4:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/pmap.c:122 (discriminator 3)
800148c8:	3c028007 	lui	v0,0x8007
800148cc:	8c44b028 	lw	a0,-20440(v0)
800148d0:	8fc30018 	lw	v1,24(s8)
800148d4:	00000000 	nop
800148d8:	00601025 	move	v0,v1
800148dc:	00021040 	sll	v0,v0,0x1
800148e0:	00431021 	addu	v0,v0,v1
800148e4:	00021080 	sll	v0,v0,0x2
800148e8:	00821821 	addu	v1,a0,v0
800148ec:	3c028007 	lui	v0,0x8007
800148f0:	ac43b02c 	sw	v1,-20436(v0)
800148f4:	3c028007 	lui	v0,0x8007
800148f8:	8c44b028 	lw	a0,-20440(v0)
800148fc:	8fc30018 	lw	v1,24(s8)
80014900:	00000000 	nop
80014904:	00601025 	move	v0,v1
80014908:	00021040 	sll	v0,v0,0x1
8001490c:	00431021 	addu	v0,v0,v1
80014910:	00021080 	sll	v0,v0,0x2
80014914:	00821021 	addu	v0,a0,v0
80014918:	3c038007 	lui	v1,0x8007
8001491c:	2463b02c 	addiu	v1,v1,-20436
80014920:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/pmap.c:117 (discriminator 2)
	for (i = num;i < npage;i++)
80014924:	8fc20018 	lw	v0,24(s8)
80014928:	00000000 	nop
8001492c:	24420001 	addiu	v0,v0,1
80014930:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/pmap.c:117 (discriminator 1)
80014934:	8fc30018 	lw	v1,24(s8)
80014938:	3c028007 	lui	v0,0x8007
8001493c:	8c42b020 	lw	v0,-20448(v0)
80014940:	00000000 	nop
80014944:	0062102b 	sltu	v0,v1,v0
80014948:	1440ffaa 	bnez	v0,800147f4 <page_init+0x114>
8001494c:	00000000 	nop
	...
/home/git/21373271/21373271/kern/pmap.c:128
		}
	}
	/* Step 4: Mark the other memory as free. */
	/* Exercise 2.3: Your code here. (4/4) */

}
80014958:	03c0e825 	move	sp,s8
8001495c:	8fbf002c 	lw	ra,44(sp)
80014960:	8fbe0028 	lw	s8,40(sp)
80014964:	27bd0030 	addiu	sp,sp,48
80014968:	03e00008 	jr	ra
8001496c:	00000000 	nop

80014970 <page_alloc>:
page_alloc():
/home/git/21373271/21373271/kern/pmap.c:143
 *   This does NOT increase the reference count 'pp_ref' of the page - the caller must do these if
 *   necessary (either explicitly or via page_insert).
 *
 * Hint: Use LIST_FIRST and LIST_REMOVE defined in include/queue.h.
 */
int page_alloc(struct Page **new) {
80014970:	27bdffe0 	addiu	sp,sp,-32
80014974:	afbf001c 	sw	ra,28(sp)
80014978:	afbe0018 	sw	s8,24(sp)
8001497c:	03a0f025 	move	s8,sp
80014980:	afc40020 	sw	a0,32(s8)
/home/git/21373271/21373271/kern/pmap.c:147
	/* Step 1: Get a page from free memory. If fails, return the error code.*/
	struct Page *pp;
	/* Exercise 2.4: Your code here. (1/2) */
	if (LIST_EMPTY(&page_free_list))
80014984:	3c028007 	lui	v0,0x8007
80014988:	8c42b02c 	lw	v0,-20436(v0)
8001498c:	00000000 	nop
80014990:	14400004 	bnez	v0,800149a4 <page_alloc+0x34>
80014994:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:149
	{
		return -E_NO_MEM;
80014998:	2402fffc 	li	v0,-4
8001499c:	10000028 	b	80014a40 <page_alloc+0xd0>
800149a0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:151
	}
	pp = LIST_FIRST(&page_free_list);
800149a4:	3c028007 	lui	v0,0x8007
800149a8:	8c42b02c 	lw	v0,-20436(v0)
800149ac:	00000000 	nop
800149b0:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/kern/pmap.c:152
	LIST_REMOVE(pp, pp_link);
800149b4:	8fc20010 	lw	v0,16(s8)
800149b8:	00000000 	nop
800149bc:	8c420000 	lw	v0,0(v0)
800149c0:	00000000 	nop
800149c4:	10400009 	beqz	v0,800149ec <page_alloc+0x7c>
800149c8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:152 (discriminator 1)
800149cc:	8fc20010 	lw	v0,16(s8)
800149d0:	00000000 	nop
800149d4:	8c420000 	lw	v0,0(v0)
800149d8:	8fc30010 	lw	v1,16(s8)
800149dc:	00000000 	nop
800149e0:	8c630004 	lw	v1,4(v1)
800149e4:	00000000 	nop
800149e8:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/pmap.c:152 (discriminator 3)
800149ec:	8fc20010 	lw	v0,16(s8)
800149f0:	00000000 	nop
800149f4:	8c420004 	lw	v0,4(v0)
800149f8:	8fc30010 	lw	v1,16(s8)
800149fc:	00000000 	nop
80014a00:	8c630000 	lw	v1,0(v1)
80014a04:	00000000 	nop
80014a08:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/pmap.c:153 (discriminator 3)
	memset((void *)page2kva(pp),0,BY2PG);
80014a0c:	8fc40010 	lw	a0,16(s8)
80014a10:	0c005082 	jal	80014208 <page2kva>
80014a14:	00000000 	nop
80014a18:	24061000 	li	a2,4096
80014a1c:	00002825 	move	a1,zero
80014a20:	00402025 	move	a0,v0
80014a24:	0c00451a 	jal	80011468 <memset>
80014a28:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:157 (discriminator 3)
	/* Step 2: Initialize this page with zero.
	 * Hint: use `memset`. */
	/* Exercise 2.4: Your code here. (2/2) */
	*new = pp;
80014a2c:	8fc20020 	lw	v0,32(s8)
80014a30:	8fc30010 	lw	v1,16(s8)
80014a34:	00000000 	nop
80014a38:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/pmap.c:158 (discriminator 3)
	return 0;
80014a3c:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/pmap.c:159
}
80014a40:	03c0e825 	move	sp,s8
80014a44:	8fbf001c 	lw	ra,28(sp)
80014a48:	8fbe0018 	lw	s8,24(sp)
80014a4c:	27bd0020 	addiu	sp,sp,32
80014a50:	03e00008 	jr	ra
80014a54:	00000000 	nop

80014a58 <page_free>:
page_free():
/home/git/21373271/21373271/kern/pmap.c:167
 *   Release a page 'pp', mark it as free.
 *
 * Pre-Condition:
 *   'pp->pp_ref' is '0'.
 */
void page_free(struct Page *pp) {
80014a58:	27bdffe0 	addiu	sp,sp,-32
80014a5c:	afbf001c 	sw	ra,28(sp)
80014a60:	afbe0018 	sw	s8,24(sp)
80014a64:	03a0f025 	move	s8,sp
80014a68:	afc40020 	sw	a0,32(s8)
/home/git/21373271/21373271/kern/pmap.c:168
	assert(pp->pp_ref == 0);
80014a6c:	8fc20020 	lw	v0,32(s8)
80014a70:	00000000 	nop
80014a74:	94420008 	lhu	v0,8(v0)
80014a78:	00000000 	nop
80014a7c:	1040000d 	beqz	v0,80014ab4 <page_free+0x5c>
80014a80:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:168 (discriminator 1)
80014a84:	3c028002 	lui	v0,0x8002
80014a88:	24428e64 	addiu	v0,v0,-29084
80014a8c:	afa20010 	sw	v0,16(sp)
80014a90:	3c028002 	lui	v0,0x8002
80014a94:	24478e4c 	addiu	a3,v0,-29108
80014a98:	3c028002 	lui	v0,0x8002
80014a9c:	24469374 	addiu	a2,v0,-27788
80014aa0:	240500a8 	li	a1,168
80014aa4:	3c028002 	lui	v0,0x8002
80014aa8:	24448ddc 	addiu	a0,v0,-29220
80014aac:	0c004f90 	jal	80013e40 <_panic>
80014ab0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:169
	LIST_INSERT_HEAD(&page_free_list,pp,pp_link);
80014ab4:	3c028007 	lui	v0,0x8007
80014ab8:	8c43b02c 	lw	v1,-20436(v0)
80014abc:	8fc20020 	lw	v0,32(s8)
80014ac0:	00000000 	nop
80014ac4:	ac430000 	sw	v1,0(v0)
80014ac8:	8fc20020 	lw	v0,32(s8)
80014acc:	00000000 	nop
80014ad0:	8c420000 	lw	v0,0(v0)
80014ad4:	00000000 	nop
80014ad8:	10400006 	beqz	v0,80014af4 <page_free+0x9c>
80014adc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:169 (discriminator 1)
80014ae0:	3c028007 	lui	v0,0x8007
80014ae4:	8c42b02c 	lw	v0,-20436(v0)
80014ae8:	8fc30020 	lw	v1,32(s8)
80014aec:	00000000 	nop
80014af0:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/pmap.c:169 (discriminator 3)
80014af4:	3c028007 	lui	v0,0x8007
80014af8:	8fc30020 	lw	v1,32(s8)
80014afc:	00000000 	nop
80014b00:	ac43b02c 	sw	v1,-20436(v0)
80014b04:	8fc20020 	lw	v0,32(s8)
80014b08:	3c038007 	lui	v1,0x8007
80014b0c:	2463b02c 	addiu	v1,v1,-20436
80014b10:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/pmap.c:170 (discriminator 3)
	return;
80014b14:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:173 (discriminator 3)
	/* Just insert it into 'page_free_list'. */
	/* Exercise 2.5: Your code here. */
}
80014b18:	03c0e825 	move	sp,s8
80014b1c:	8fbf001c 	lw	ra,28(sp)
80014b20:	8fbe0018 	lw	s8,24(sp)
80014b24:	27bd0020 	addiu	sp,sp,32
80014b28:	03e00008 	jr	ra
80014b2c:	00000000 	nop

80014b30 <pgdir_walk>:
pgdir_walk():
/home/git/21373271/21373271/kern/pmap.c:190
 *
 * Hint:
 *   We use a two-level pointer to store page table entry and return a state code to indicate
 *   whether this function succeeds or not.
 */
static int pgdir_walk(Pde *pgdir, u_long va, int create, Pte **ppte) {
80014b30:	27bdffc8 	addiu	sp,sp,-56
80014b34:	afbf0034 	sw	ra,52(sp)
80014b38:	afbe0030 	sw	s8,48(sp)
80014b3c:	afb0002c 	sw	s0,44(sp)
80014b40:	03a0f025 	move	s8,sp
80014b44:	afc40038 	sw	a0,56(s8)
80014b48:	afc5003c 	sw	a1,60(s8)
80014b4c:	afc60040 	sw	a2,64(s8)
80014b50:	afc70044 	sw	a3,68(s8)
/home/git/21373271/21373271/kern/pmap.c:196
	Pde *pgdir_entryp;
	struct Page *pp;

	/* Step 1: Get the corresponding page directory entry. */
	/* Exercise 2.6: Your code here. (1/3) */
	pgdir_entryp = pgdir + PDX(va);
80014b54:	8fc2003c 	lw	v0,60(s8)
80014b58:	00000000 	nop
80014b5c:	00021582 	srl	v0,v0,0x16
80014b60:	00021080 	sll	v0,v0,0x2
80014b64:	8fc30038 	lw	v1,56(s8)
80014b68:	00000000 	nop
80014b6c:	00621021 	addu	v0,v1,v0
80014b70:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/pmap.c:201
	/* Step 2: If the corresponding page table is not existent (valid) and parameter `create`
	 * is set, create one. Set the permission bits 'PTE_D | PTE_V' for this new page in the
	 * page directory.
	 * If failed to allocate a new page (out of memory), return the error. */
	if (!(*pgdir_entryp & PTE_V))
80014b74:	8fc20018 	lw	v0,24(s8)
80014b78:	00000000 	nop
80014b7c:	8c420000 	lw	v0,0(v0)
80014b80:	00000000 	nop
80014b84:	30420200 	andi	v0,v0,0x200
80014b88:	14400022 	bnez	v0,80014c14 <pgdir_walk+0xe4>
80014b8c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:203
	{
		if (create != 0)
80014b90:	8fc20040 	lw	v0,64(s8)
80014b94:	00000000 	nop
80014b98:	10400018 	beqz	v0,80014bfc <pgdir_walk+0xcc>
80014b9c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:205
		{
			if(page_alloc(&pp)<0)
80014ba0:	27c20020 	addiu	v0,s8,32
80014ba4:	00402025 	move	a0,v0
80014ba8:	0c00525c 	jal	80014970 <page_alloc>
80014bac:	00000000 	nop
80014bb0:	04410004 	bgez	v0,80014bc4 <pgdir_walk+0x94>
80014bb4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:207
			{
				return -E_NO_MEM;
80014bb8:	2402fffc 	li	v0,-4
80014bbc:	10000043 	b	80014ccc <pgdir_walk+0x19c>
80014bc0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:210
			}
			//PTE_V = 1;
			*pgdir_entryp = page2pa(pp) | PTE_V;
80014bc4:	8fc20020 	lw	v0,32(s8)
80014bc8:	00000000 	nop
80014bcc:	00402025 	move	a0,v0
80014bd0:	0c005049 	jal	80014124 <page2pa>
80014bd4:	00000000 	nop
80014bd8:	34430200 	ori	v1,v0,0x200
80014bdc:	8fc20018 	lw	v0,24(s8)
80014be0:	00000000 	nop
80014be4:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/pmap.c:211
			pp->pp_ref = 1;		
80014be8:	8fc20020 	lw	v0,32(s8)
80014bec:	24030001 	li	v1,1
80014bf0:	a4430008 	sh	v1,8(v0)
80014bf4:	10000007 	b	80014c14 <pgdir_walk+0xe4>
80014bf8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:215
		}
		else 
		{
			*ppte = NULL;
80014bfc:	8fc20044 	lw	v0,68(s8)
80014c00:	00000000 	nop
80014c04:	ac400000 	sw	zero,0(v0)
/home/git/21373271/21373271/kern/pmap.c:216
			return 0;
80014c08:	00001025 	move	v0,zero
80014c0c:	1000002f 	b	80014ccc <pgdir_walk+0x19c>
80014c10:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:224
	/* Exercise 2.6: Your code here. (2/3) */

	/* Step 3: Assign the kernel virtual address of the page table entry to '*ppte'. */
	/* Exercise 2.6: Your code here. (3/3) */
	//*ppte =(Pte *)KADDR(*pgdir_entryp & (~0xfff)) + PTX(va);
	*ppte = (Pte*)KADDR(PTE_ADDR(*pgdir_entryp)) + PTX(va);
80014c14:	8fc2003c 	lw	v0,60(s8)
80014c18:	00000000 	nop
80014c1c:	00021302 	srl	v0,v0,0xc
80014c20:	304203ff 	andi	v0,v0,0x3ff
80014c24:	00028080 	sll	s0,v0,0x2
80014c28:	8fc20018 	lw	v0,24(s8)
80014c2c:	00000000 	nop
80014c30:	8c420000 	lw	v0,0(v0)
80014c34:	00000000 	nop
80014c38:	00021302 	srl	v0,v0,0xc
80014c3c:	afc2001c 	sw	v0,28(s8)
80014c40:	3c028007 	lui	v0,0x8007
80014c44:	8c42b020 	lw	v0,-20448(v0)
80014c48:	8fc3001c 	lw	v1,28(s8)
80014c4c:	00000000 	nop
80014c50:	0062102b 	sltu	v0,v1,v0
80014c54:	14400010 	bnez	v0,80014c98 <pgdir_walk+0x168>
80014c58:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:224 (discriminator 1)
80014c5c:	8fc20018 	lw	v0,24(s8)
80014c60:	00000000 	nop
80014c64:	8c430000 	lw	v1,0(v0)
80014c68:	2402f000 	li	v0,-4096
80014c6c:	00621024 	and	v0,v1,v0
80014c70:	afa20010 	sw	v0,16(sp)
80014c74:	3c028002 	lui	v0,0x8002
80014c78:	24478d68 	addiu	a3,v0,-29336
80014c7c:	3c028002 	lui	v0,0x8002
80014c80:	24469380 	addiu	a2,v0,-27776
80014c84:	240500e0 	li	a1,224
80014c88:	3c028002 	lui	v0,0x8002
80014c8c:	24448ddc 	addiu	a0,v0,-29220
80014c90:	0c004f90 	jal	80013e40 <_panic>
80014c94:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:224 (discriminator 3)
80014c98:	8fc20018 	lw	v0,24(s8)
80014c9c:	00000000 	nop
80014ca0:	8c430000 	lw	v1,0(v0)
80014ca4:	2402f000 	li	v0,-4096
80014ca8:	00621824 	and	v1,v1,v0
80014cac:	3c028000 	lui	v0,0x8000
80014cb0:	00621021 	addu	v0,v1,v0
80014cb4:	00501021 	addu	v0,v0,s0
80014cb8:	00401825 	move	v1,v0
80014cbc:	8fc20044 	lw	v0,68(s8)
80014cc0:	00000000 	nop
80014cc4:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/pmap.c:225 (discriminator 3)
	return 0;
80014cc8:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/pmap.c:226 (discriminator 1)
}
80014ccc:	03c0e825 	move	sp,s8
80014cd0:	8fbf0034 	lw	ra,52(sp)
80014cd4:	8fbe0030 	lw	s8,48(sp)
80014cd8:	8fb0002c 	lw	s0,44(sp)
80014cdc:	27bd0038 	addiu	sp,sp,56
80014ce0:	03e00008 	jr	ra
80014ce4:	00000000 	nop

80014ce8 <page_insert>:
page_insert():
/home/git/21373271/21373271/kern/pmap.c:240
 *
 * Hint:
 *   If there is already a page mapped at `va`, call page_remove() to release this mapping.
 *   The `pp_ref` should be incremented if the insertion succeeds.
 */
int page_insert(Pde *pgdir, u_int asid, struct Page *pp, u_long va, u_int perm) {
80014ce8:	27bdffe0 	addiu	sp,sp,-32
80014cec:	afbf001c 	sw	ra,28(sp)
80014cf0:	afbe0018 	sw	s8,24(sp)
80014cf4:	03a0f025 	move	s8,sp
80014cf8:	afc40020 	sw	a0,32(s8)
80014cfc:	afc50024 	sw	a1,36(s8)
80014d00:	afc60028 	sw	a2,40(s8)
80014d04:	afc7002c 	sw	a3,44(s8)
/home/git/21373271/21373271/kern/pmap.c:244
	Pte *pte;

	/* Step 1: Get corresponding page table entry. */
	pgdir_walk(pgdir, va, 0, &pte);
80014d08:	27c20010 	addiu	v0,s8,16
80014d0c:	00403825 	move	a3,v0
80014d10:	00003025 	move	a2,zero
80014d14:	8fc5002c 	lw	a1,44(s8)
80014d18:	8fc40020 	lw	a0,32(s8)
80014d1c:	0c0052cc 	jal	80014b30 <pgdir_walk>
80014d20:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:246

	if (pte && (*pte & PTE_V)) {
80014d24:	8fc20010 	lw	v0,16(s8)
80014d28:	00000000 	nop
80014d2c:	1040002c 	beqz	v0,80014de0 <page_insert+0xf8>
80014d30:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:246 (discriminator 1)
80014d34:	8fc20010 	lw	v0,16(s8)
80014d38:	00000000 	nop
80014d3c:	8c420000 	lw	v0,0(v0)
80014d40:	00000000 	nop
80014d44:	30420200 	andi	v0,v0,0x200
80014d48:	10400025 	beqz	v0,80014de0 <page_insert+0xf8>
80014d4c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:247
		if (pa2page(*pte) != pp) {
80014d50:	8fc20010 	lw	v0,16(s8)
80014d54:	00000000 	nop
80014d58:	8c420000 	lw	v0,0(v0)
80014d5c:	00000000 	nop
80014d60:	00402025 	move	a0,v0
80014d64:	0c005058 	jal	80014160 <pa2page>
80014d68:	00000000 	nop
80014d6c:	00401825 	move	v1,v0
80014d70:	8fc20028 	lw	v0,40(s8)
80014d74:	00000000 	nop
80014d78:	10430008 	beq	v0,v1,80014d9c <page_insert+0xb4>
80014d7c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:248
			page_remove(pgdir, asid, va);
80014d80:	8fc6002c 	lw	a2,44(s8)
80014d84:	8fc50024 	lw	a1,36(s8)
80014d88:	8fc40020 	lw	a0,32(s8)
80014d8c:	0c005405 	jal	80015014 <page_remove>
80014d90:	00000000 	nop
80014d94:	10000012 	b	80014de0 <page_insert+0xf8>
80014d98:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:250
		} else {
			tlb_invalidate(asid, va);
80014d9c:	8fc5002c 	lw	a1,44(s8)
80014da0:	8fc40024 	lw	a0,36(s8)
80014da4:	0c00542a 	jal	800150a8 <tlb_invalidate>
80014da8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:251
			*pte = page2pa(pp) | perm | PTE_V;
80014dac:	8fc40028 	lw	a0,40(s8)
80014db0:	0c005049 	jal	80014124 <page2pa>
80014db4:	00000000 	nop
80014db8:	00401825 	move	v1,v0
80014dbc:	8fc20030 	lw	v0,48(s8)
80014dc0:	00000000 	nop
80014dc4:	00621825 	or	v1,v1,v0
80014dc8:	8fc20010 	lw	v0,16(s8)
80014dcc:	34630200 	ori	v1,v1,0x200
80014dd0:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/pmap.c:252
			return 0;
80014dd4:	00001025 	move	v0,zero
80014dd8:	10000025 	b	80014e70 <page_insert+0x188>
80014ddc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:258
		}
	}

	/* Step 2: Flush TLB with 'tlb_invalidate'. */
	/* Exercise 2.7: Your code here. (1/3) */
	tlb_invalidate(asid,va);
80014de0:	8fc5002c 	lw	a1,44(s8)
80014de4:	8fc40024 	lw	a0,36(s8)
80014de8:	0c00542a 	jal	800150a8 <tlb_invalidate>
80014dec:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:263
	/* Step 3: Re-get or create the page table entry. */
	/* If failed to create, return the error. */
	/* Exercise 2.7: Your code here. (2/3) */
	//pte = (Pte*)(*(pgdir+PDX(va))& (~0xfff)) + PTX(va);
	if (pgdir_walk(pgdir,va,1,&pte) < 0)
80014df0:	27c20010 	addiu	v0,s8,16
80014df4:	00403825 	move	a3,v0
80014df8:	24060001 	li	a2,1
80014dfc:	8fc5002c 	lw	a1,44(s8)
80014e00:	8fc40020 	lw	a0,32(s8)
80014e04:	0c0052cc 	jal	80014b30 <pgdir_walk>
80014e08:	00000000 	nop
80014e0c:	04410004 	bgez	v0,80014e20 <page_insert+0x138>
80014e10:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:265
	{
		return -E_NO_MEM;
80014e14:	2402fffc 	li	v0,-4
80014e18:	10000015 	b	80014e70 <page_insert+0x188>
80014e1c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:269
	}
	/* Step 4: Insert the page to the page table entry with 'perm | PTE_V' and increase its
	 * 'pp_ref'. */
	*pte = page2pa(pp) | perm | PTE_V;
80014e20:	8fc40028 	lw	a0,40(s8)
80014e24:	0c005049 	jal	80014124 <page2pa>
80014e28:	00000000 	nop
80014e2c:	00401825 	move	v1,v0
80014e30:	8fc20030 	lw	v0,48(s8)
80014e34:	00000000 	nop
80014e38:	00621825 	or	v1,v1,v0
80014e3c:	8fc20010 	lw	v0,16(s8)
80014e40:	34630200 	ori	v1,v1,0x200
80014e44:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/pmap.c:270
	pp->pp_ref++;
80014e48:	8fc20028 	lw	v0,40(s8)
80014e4c:	00000000 	nop
80014e50:	94420008 	lhu	v0,8(v0)
80014e54:	00000000 	nop
80014e58:	24420001 	addiu	v0,v0,1
80014e5c:	3043ffff 	andi	v1,v0,0xffff
80014e60:	8fc20028 	lw	v0,40(s8)
80014e64:	00000000 	nop
80014e68:	a4430008 	sh	v1,8(v0)
/home/git/21373271/21373271/kern/pmap.c:273
	/* Exercise 2.7: Your code here. (3/3) */

	return 0;
80014e6c:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/pmap.c:274 (discriminator 1)
}
80014e70:	03c0e825 	move	sp,s8
80014e74:	8fbf001c 	lw	ra,28(sp)
80014e78:	8fbe0018 	lw	s8,24(sp)
80014e7c:	27bd0020 	addiu	sp,sp,32
80014e80:	03e00008 	jr	ra
80014e84:	00000000 	nop

80014e88 <page_lookup>:
page_lookup():
/home/git/21373271/21373271/kern/pmap.c:281
/*Overview:
    Look up the Page that virtual address `va` map to.
  Post-Condition:
    Return a pointer to corresponding Page, and store it's page table entry to *ppte.
    If `va` doesn't mapped to any Page, return NULL.*/
struct Page *page_lookup(Pde *pgdir, u_long va, Pte **ppte) {
80014e88:	27bdffe0 	addiu	sp,sp,-32
80014e8c:	afbf001c 	sw	ra,28(sp)
80014e90:	afbe0018 	sw	s8,24(sp)
80014e94:	03a0f025 	move	s8,sp
80014e98:	afc40020 	sw	a0,32(s8)
80014e9c:	afc50024 	sw	a1,36(s8)
80014ea0:	afc60028 	sw	a2,40(s8)
/home/git/21373271/21373271/kern/pmap.c:286
	struct Page *pp;
	Pte *pte;

	/* Step 1: Get the page table entry. */
	pgdir_walk(pgdir, va, 0, &pte);
80014ea4:	27c20014 	addiu	v0,s8,20
80014ea8:	00403825 	move	a3,v0
80014eac:	00003025 	move	a2,zero
80014eb0:	8fc50024 	lw	a1,36(s8)
80014eb4:	8fc40020 	lw	a0,32(s8)
80014eb8:	0c0052cc 	jal	80014b30 <pgdir_walk>
80014ebc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:289

	/* Hint: Check if the page table entry doesn't exist or is not valid. */
	if (pte == NULL || (*pte & PTE_V) == 0) {
80014ec0:	8fc20014 	lw	v0,20(s8)
80014ec4:	00000000 	nop
80014ec8:	10400008 	beqz	v0,80014eec <page_lookup+0x64>
80014ecc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:289 (discriminator 1)
80014ed0:	8fc20014 	lw	v0,20(s8)
80014ed4:	00000000 	nop
80014ed8:	8c420000 	lw	v0,0(v0)
80014edc:	00000000 	nop
80014ee0:	30420200 	andi	v0,v0,0x200
80014ee4:	14400004 	bnez	v0,80014ef8 <page_lookup+0x70>
80014ee8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:290
		return NULL;
80014eec:	00001025 	move	v0,zero
80014ef0:	10000012 	b	80014f3c <page_lookup+0xb4>
80014ef4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:295
	}

	/* Step 2: Get the corresponding Page struct. */
	/* Hint: Use function `pa2page`, defined in include/pmap.h . */
	pp = pa2page(*pte);
80014ef8:	8fc20014 	lw	v0,20(s8)
80014efc:	00000000 	nop
80014f00:	8c420000 	lw	v0,0(v0)
80014f04:	00000000 	nop
80014f08:	00402025 	move	a0,v0
80014f0c:	0c005058 	jal	80014160 <pa2page>
80014f10:	00000000 	nop
80014f14:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/kern/pmap.c:296
	if (ppte) {
80014f18:	8fc20028 	lw	v0,40(s8)
80014f1c:	00000000 	nop
80014f20:	10400005 	beqz	v0,80014f38 <page_lookup+0xb0>
80014f24:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:297
		*ppte = pte;
80014f28:	8fc30014 	lw	v1,20(s8)
80014f2c:	8fc20028 	lw	v0,40(s8)
80014f30:	00000000 	nop
80014f34:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/pmap.c:300
	}

	return pp;
80014f38:	8fc20010 	lw	v0,16(s8)
/home/git/21373271/21373271/kern/pmap.c:301 (discriminator 1)
}
80014f3c:	03c0e825 	move	sp,s8
80014f40:	8fbf001c 	lw	ra,28(sp)
80014f44:	8fbe0018 	lw	s8,24(sp)
80014f48:	27bd0020 	addiu	sp,sp,32
80014f4c:	03e00008 	jr	ra
80014f50:	00000000 	nop

80014f54 <page_decref>:
page_decref():
/home/git/21373271/21373271/kern/pmap.c:307

/* Overview:`
 *   Decrease the 'pp_ref' value of Page 'pp'.
 *   When there's no references (mapped virtual address) to this page, release it.
 */
void page_decref(struct Page *pp) {
80014f54:	27bdffe0 	addiu	sp,sp,-32
80014f58:	afbf001c 	sw	ra,28(sp)
80014f5c:	afbe0018 	sw	s8,24(sp)
80014f60:	03a0f025 	move	s8,sp
80014f64:	afc40020 	sw	a0,32(s8)
/home/git/21373271/21373271/kern/pmap.c:308
	assert(pp->pp_ref > 0);
80014f68:	8fc20020 	lw	v0,32(s8)
80014f6c:	00000000 	nop
80014f70:	94420008 	lhu	v0,8(v0)
80014f74:	00000000 	nop
80014f78:	1440000d 	bnez	v0,80014fb0 <page_decref+0x5c>
80014f7c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:308 (discriminator 1)
80014f80:	3c028002 	lui	v0,0x8002
80014f84:	24428e74 	addiu	v0,v0,-29068
80014f88:	afa20010 	sw	v0,16(sp)
80014f8c:	3c028002 	lui	v0,0x8002
80014f90:	24478e4c 	addiu	a3,v0,-29108
80014f94:	3c028002 	lui	v0,0x8002
80014f98:	24469394 	addiu	a2,v0,-27756
80014f9c:	24050134 	li	a1,308
80014fa0:	3c028002 	lui	v0,0x8002
80014fa4:	24448ddc 	addiu	a0,v0,-29220
80014fa8:	0c004f90 	jal	80013e40 <_panic>
80014fac:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:311

	/* If 'pp_ref' reaches to 0, free this page. */
	if (--pp->pp_ref == 0) {
80014fb0:	8fc20020 	lw	v0,32(s8)
80014fb4:	00000000 	nop
80014fb8:	94420008 	lhu	v0,8(v0)
80014fbc:	00000000 	nop
80014fc0:	2442ffff 	addiu	v0,v0,-1
80014fc4:	3043ffff 	andi	v1,v0,0xffff
80014fc8:	8fc20020 	lw	v0,32(s8)
80014fcc:	00000000 	nop
80014fd0:	a4430008 	sh	v1,8(v0)
80014fd4:	8fc20020 	lw	v0,32(s8)
80014fd8:	00000000 	nop
80014fdc:	94420008 	lhu	v0,8(v0)
80014fe0:	00000000 	nop
80014fe4:	14400004 	bnez	v0,80014ff8 <page_decref+0xa4>
80014fe8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:312
		page_free(pp);
80014fec:	8fc40020 	lw	a0,32(s8)
80014ff0:	0c005296 	jal	80014a58 <page_free>
80014ff4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:314
	}
}
80014ff8:	00000000 	nop
80014ffc:	03c0e825 	move	sp,s8
80015000:	8fbf001c 	lw	ra,28(sp)
80015004:	8fbe0018 	lw	s8,24(sp)
80015008:	27bd0020 	addiu	sp,sp,32
8001500c:	03e00008 	jr	ra
80015010:	00000000 	nop

80015014 <page_remove>:
page_remove():
/home/git/21373271/21373271/kern/pmap.c:318

// Overview:
//   Unmap the physical page at virtual address 'va'.
void page_remove(Pde *pgdir, u_int asid, u_long va) {
80015014:	27bdffe0 	addiu	sp,sp,-32
80015018:	afbf001c 	sw	ra,28(sp)
8001501c:	afbe0018 	sw	s8,24(sp)
80015020:	03a0f025 	move	s8,sp
80015024:	afc40020 	sw	a0,32(s8)
80015028:	afc50024 	sw	a1,36(s8)
8001502c:	afc60028 	sw	a2,40(s8)
/home/git/21373271/21373271/kern/pmap.c:322
	Pte *pte;

	/* Step 1: Get the page table entry, and check if the page table entry is valid. */
	struct Page *pp = page_lookup(pgdir, va, &pte);
80015030:	27c20014 	addiu	v0,s8,20
80015034:	00403025 	move	a2,v0
80015038:	8fc50028 	lw	a1,40(s8)
8001503c:	8fc40020 	lw	a0,32(s8)
80015040:	0c0053a2 	jal	80014e88 <page_lookup>
80015044:	00000000 	nop
80015048:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/kern/pmap.c:323
	if (pp == NULL) {
8001504c:	8fc20010 	lw	v0,16(s8)
80015050:	00000000 	nop
80015054:	1040000d 	beqz	v0,8001508c <page_remove+0x78>
80015058:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:328
		return;
	}

	/* Step 2: Decrease reference count on 'pp'. */
	page_decref(pp);
8001505c:	8fc40010 	lw	a0,16(s8)
80015060:	0c0053d5 	jal	80014f54 <page_decref>
80015064:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:331

	/* Step 3: Flush TLB. */
	*pte = 0;
80015068:	8fc20014 	lw	v0,20(s8)
8001506c:	00000000 	nop
80015070:	ac400000 	sw	zero,0(v0)
/home/git/21373271/21373271/kern/pmap.c:332
	tlb_invalidate(asid, va);
80015074:	8fc50028 	lw	a1,40(s8)
80015078:	8fc40024 	lw	a0,36(s8)
8001507c:	0c00542a 	jal	800150a8 <tlb_invalidate>
80015080:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:333
	return;
80015084:	10000002 	b	80015090 <page_remove+0x7c>
80015088:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:324
		return;
8001508c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:334
}
80015090:	03c0e825 	move	sp,s8
80015094:	8fbf001c 	lw	ra,28(sp)
80015098:	8fbe0018 	lw	s8,24(sp)
8001509c:	27bd0020 	addiu	sp,sp,32
800150a0:	03e00008 	jr	ra
800150a4:	00000000 	nop

800150a8 <tlb_invalidate>:
tlb_invalidate():
/home/git/21373271/21373271/kern/pmap.c:343
 *
 * Hint:
 *   Construct a new Entry HI and call 'tlb_out' to flush TLB.
 *   'tlb_out' is defined in mm/tlb_asm.S
 */
void tlb_invalidate(u_int asid, u_long va) {
800150a8:	27bdffe8 	addiu	sp,sp,-24
800150ac:	afbf0014 	sw	ra,20(sp)
800150b0:	afbe0010 	sw	s8,16(sp)
800150b4:	03a0f025 	move	s8,sp
800150b8:	afc40018 	sw	a0,24(s8)
800150bc:	afc5001c 	sw	a1,28(s8)
/home/git/21373271/21373271/kern/pmap.c:344
	tlb_out(PTE_ADDR(va) | (asid << 6));
800150c0:	8fc3001c 	lw	v1,28(s8)
800150c4:	2402f000 	li	v0,-4096
800150c8:	00621824 	and	v1,v1,v0
800150cc:	8fc20018 	lw	v0,24(s8)
800150d0:	00000000 	nop
800150d4:	00021180 	sll	v0,v0,0x6
800150d8:	00621025 	or	v0,v1,v0
800150dc:	00402025 	move	a0,v0
800150e0:	0c00602c 	jal	800180b0 <tlb_out>
800150e4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:345
}
800150e8:	00000000 	nop
800150ec:	03c0e825 	move	sp,s8
800150f0:	8fbf0014 	lw	ra,20(sp)
800150f4:	8fbe0010 	lw	s8,16(sp)
800150f8:	27bd0018 	addiu	sp,sp,24
800150fc:	03e00008 	jr	ra
80015100:	00000000 	nop

80015104 <physical_memory_manage_check>:
physical_memory_manage_check():
/home/git/21373271/21373271/kern/pmap.c:347

void physical_memory_manage_check(void) {
80015104:	27bdff58 	addiu	sp,sp,-168
80015108:	afbf00a4 	sw	ra,164(sp)
8001510c:	afbe00a0 	sw	s8,160(sp)
80015110:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/pmap.c:353
	struct Page *pp, *pp0, *pp1, *pp2;
	struct Page_list fl;
	int *temp;

	// should be able to allocate three pages
	pp0 = pp1 = pp2 = 0;
80015114:	afc0003c 	sw	zero,60(s8)
80015118:	8fc2003c 	lw	v0,60(s8)
8001511c:	00000000 	nop
80015120:	afc20038 	sw	v0,56(s8)
80015124:	8fc20038 	lw	v0,56(s8)
80015128:	00000000 	nop
8001512c:	afc20034 	sw	v0,52(s8)
/home/git/21373271/21373271/kern/pmap.c:354
	assert(page_alloc(&pp0) == 0);
80015130:	27c20034 	addiu	v0,s8,52
80015134:	00402025 	move	a0,v0
80015138:	0c00525c 	jal	80014970 <page_alloc>
8001513c:	00000000 	nop
80015140:	1040000d 	beqz	v0,80015178 <physical_memory_manage_check+0x74>
80015144:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:354 (discriminator 1)
80015148:	3c028002 	lui	v0,0x8002
8001514c:	24428e84 	addiu	v0,v0,-29052
80015150:	afa20010 	sw	v0,16(sp)
80015154:	3c028002 	lui	v0,0x8002
80015158:	24478e4c 	addiu	a3,v0,-29108
8001515c:	3c028002 	lui	v0,0x8002
80015160:	244693a0 	addiu	a2,v0,-27744
80015164:	24050162 	li	a1,354
80015168:	3c028002 	lui	v0,0x8002
8001516c:	24448ddc 	addiu	a0,v0,-29220
80015170:	0c004f90 	jal	80013e40 <_panic>
80015174:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:355
	assert(page_alloc(&pp1) == 0);
80015178:	27c20038 	addiu	v0,s8,56
8001517c:	00402025 	move	a0,v0
80015180:	0c00525c 	jal	80014970 <page_alloc>
80015184:	00000000 	nop
80015188:	1040000d 	beqz	v0,800151c0 <physical_memory_manage_check+0xbc>
8001518c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:355 (discriminator 1)
80015190:	3c028002 	lui	v0,0x8002
80015194:	24428e9c 	addiu	v0,v0,-29028
80015198:	afa20010 	sw	v0,16(sp)
8001519c:	3c028002 	lui	v0,0x8002
800151a0:	24478e4c 	addiu	a3,v0,-29108
800151a4:	3c028002 	lui	v0,0x8002
800151a8:	244693a0 	addiu	a2,v0,-27744
800151ac:	24050163 	li	a1,355
800151b0:	3c028002 	lui	v0,0x8002
800151b4:	24448ddc 	addiu	a0,v0,-29220
800151b8:	0c004f90 	jal	80013e40 <_panic>
800151bc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:356
	assert(page_alloc(&pp2) == 0);
800151c0:	27c2003c 	addiu	v0,s8,60
800151c4:	00402025 	move	a0,v0
800151c8:	0c00525c 	jal	80014970 <page_alloc>
800151cc:	00000000 	nop
800151d0:	1040000d 	beqz	v0,80015208 <physical_memory_manage_check+0x104>
800151d4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:356 (discriminator 1)
800151d8:	3c028002 	lui	v0,0x8002
800151dc:	24428eb4 	addiu	v0,v0,-29004
800151e0:	afa20010 	sw	v0,16(sp)
800151e4:	3c028002 	lui	v0,0x8002
800151e8:	24478e4c 	addiu	a3,v0,-29108
800151ec:	3c028002 	lui	v0,0x8002
800151f0:	244693a0 	addiu	a2,v0,-27744
800151f4:	24050164 	li	a1,356
800151f8:	3c028002 	lui	v0,0x8002
800151fc:	24448ddc 	addiu	a0,v0,-29220
80015200:	0c004f90 	jal	80013e40 <_panic>
80015204:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:358

	assert(pp0);
80015208:	8fc20034 	lw	v0,52(s8)
8001520c:	00000000 	nop
80015210:	1440000d 	bnez	v0,80015248 <physical_memory_manage_check+0x144>
80015214:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:358 (discriminator 1)
80015218:	3c028002 	lui	v0,0x8002
8001521c:	24428ecc 	addiu	v0,v0,-28980
80015220:	afa20010 	sw	v0,16(sp)
80015224:	3c028002 	lui	v0,0x8002
80015228:	24478e4c 	addiu	a3,v0,-29108
8001522c:	3c028002 	lui	v0,0x8002
80015230:	244693a0 	addiu	a2,v0,-27744
80015234:	24050166 	li	a1,358
80015238:	3c028002 	lui	v0,0x8002
8001523c:	24448ddc 	addiu	a0,v0,-29220
80015240:	0c004f90 	jal	80013e40 <_panic>
80015244:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:359
	assert(pp1 && pp1 != pp0);
80015248:	8fc20038 	lw	v0,56(s8)
8001524c:	00000000 	nop
80015250:	10400006 	beqz	v0,8001526c <physical_memory_manage_check+0x168>
80015254:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:359 (discriminator 2)
80015258:	8fc30038 	lw	v1,56(s8)
8001525c:	8fc20034 	lw	v0,52(s8)
80015260:	00000000 	nop
80015264:	1462000d 	bne	v1,v0,8001529c <physical_memory_manage_check+0x198>
80015268:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:359 (discriminator 3)
8001526c:	3c028002 	lui	v0,0x8002
80015270:	24428ed0 	addiu	v0,v0,-28976
80015274:	afa20010 	sw	v0,16(sp)
80015278:	3c028002 	lui	v0,0x8002
8001527c:	24478e4c 	addiu	a3,v0,-29108
80015280:	3c028002 	lui	v0,0x8002
80015284:	244693a0 	addiu	a2,v0,-27744
80015288:	24050167 	li	a1,359
8001528c:	3c028002 	lui	v0,0x8002
80015290:	24448ddc 	addiu	a0,v0,-29220
80015294:	0c004f90 	jal	80013e40 <_panic>
80015298:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:360
	assert(pp2 && pp2 != pp1 && pp2 != pp0);
8001529c:	8fc2003c 	lw	v0,60(s8)
800152a0:	00000000 	nop
800152a4:	1040000b 	beqz	v0,800152d4 <physical_memory_manage_check+0x1d0>
800152a8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:360 (discriminator 2)
800152ac:	8fc3003c 	lw	v1,60(s8)
800152b0:	8fc20038 	lw	v0,56(s8)
800152b4:	00000000 	nop
800152b8:	10620006 	beq	v1,v0,800152d4 <physical_memory_manage_check+0x1d0>
800152bc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:360 (discriminator 4)
800152c0:	8fc3003c 	lw	v1,60(s8)
800152c4:	8fc20034 	lw	v0,52(s8)
800152c8:	00000000 	nop
800152cc:	1462000d 	bne	v1,v0,80015304 <physical_memory_manage_check+0x200>
800152d0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:360 (discriminator 5)
800152d4:	3c028002 	lui	v0,0x8002
800152d8:	24428ee4 	addiu	v0,v0,-28956
800152dc:	afa20010 	sw	v0,16(sp)
800152e0:	3c028002 	lui	v0,0x8002
800152e4:	24478e4c 	addiu	a3,v0,-29108
800152e8:	3c028002 	lui	v0,0x8002
800152ec:	244693a0 	addiu	a2,v0,-27744
800152f0:	24050168 	li	a1,360
800152f4:	3c028002 	lui	v0,0x8002
800152f8:	24448ddc 	addiu	a0,v0,-29220
800152fc:	0c004f90 	jal	80013e40 <_panic>
80015300:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:363

	// temporarily steal the rest of the free pages
	fl = page_free_list;
80015304:	3c028007 	lui	v0,0x8007
80015308:	8c42b02c 	lw	v0,-20436(v0)
8001530c:	00000000 	nop
80015310:	afc20040 	sw	v0,64(s8)
/home/git/21373271/21373271/kern/pmap.c:365
	// now this page_free list must be empty!!!!
	LIST_INIT(&page_free_list);
80015314:	3c028007 	lui	v0,0x8007
80015318:	ac40b02c 	sw	zero,-20436(v0)
/home/git/21373271/21373271/kern/pmap.c:367
	// should be no free memory
	assert(page_alloc(&pp) == -E_NO_MEM);
8001531c:	27c20030 	addiu	v0,s8,48
80015320:	00402025 	move	a0,v0
80015324:	0c00525c 	jal	80014970 <page_alloc>
80015328:	00000000 	nop
8001532c:	00401825 	move	v1,v0
80015330:	2402fffc 	li	v0,-4
80015334:	1062000d 	beq	v1,v0,8001536c <physical_memory_manage_check+0x268>
80015338:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:367 (discriminator 1)
8001533c:	3c028002 	lui	v0,0x8002
80015340:	24428f04 	addiu	v0,v0,-28924
80015344:	afa20010 	sw	v0,16(sp)
80015348:	3c028002 	lui	v0,0x8002
8001534c:	24478e4c 	addiu	a3,v0,-29108
80015350:	3c028002 	lui	v0,0x8002
80015354:	244693a0 	addiu	a2,v0,-27744
80015358:	2405016f 	li	a1,367
8001535c:	3c028002 	lui	v0,0x8002
80015360:	24448ddc 	addiu	a0,v0,-29220
80015364:	0c004f90 	jal	80013e40 <_panic>
80015368:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:369

	temp = (int *)page2kva(pp0);
8001536c:	8fc20034 	lw	v0,52(s8)
80015370:	00000000 	nop
80015374:	00402025 	move	a0,v0
80015378:	0c005082 	jal	80014208 <page2kva>
8001537c:	00000000 	nop
80015380:	afc20024 	sw	v0,36(s8)
/home/git/21373271/21373271/kern/pmap.c:371
	// write 1000 to pp0
	*temp = 1000;
80015384:	8fc20024 	lw	v0,36(s8)
80015388:	240303e8 	li	v1,1000
8001538c:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/pmap.c:373
	// free pp0
	page_free(pp0);
80015390:	8fc20034 	lw	v0,52(s8)
80015394:	00000000 	nop
80015398:	00402025 	move	a0,v0
8001539c:	0c005296 	jal	80014a58 <page_free>
800153a0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:374
	printk("The number in address temp is %d\n", *temp);
800153a4:	8fc20024 	lw	v0,36(s8)
800153a8:	00000000 	nop
800153ac:	8c420000 	lw	v0,0(v0)
800153b0:	00000000 	nop
800153b4:	00402825 	move	a1,v0
800153b8:	3c028002 	lui	v0,0x8002
800153bc:	24448f24 	addiu	a0,v0,-28892
800153c0:	0c005a0d 	jal	80016834 <printk>
800153c4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:377

	// alloc again
	assert(page_alloc(&pp0) == 0);
800153c8:	27c20034 	addiu	v0,s8,52
800153cc:	00402025 	move	a0,v0
800153d0:	0c00525c 	jal	80014970 <page_alloc>
800153d4:	00000000 	nop
800153d8:	1040000d 	beqz	v0,80015410 <physical_memory_manage_check+0x30c>
800153dc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:377 (discriminator 1)
800153e0:	3c028002 	lui	v0,0x8002
800153e4:	24428e84 	addiu	v0,v0,-29052
800153e8:	afa20010 	sw	v0,16(sp)
800153ec:	3c028002 	lui	v0,0x8002
800153f0:	24478e4c 	addiu	a3,v0,-29108
800153f4:	3c028002 	lui	v0,0x8002
800153f8:	244693a0 	addiu	a2,v0,-27744
800153fc:	24050179 	li	a1,377
80015400:	3c028002 	lui	v0,0x8002
80015404:	24448ddc 	addiu	a0,v0,-29220
80015408:	0c004f90 	jal	80013e40 <_panic>
8001540c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:378
	assert(pp0);
80015410:	8fc20034 	lw	v0,52(s8)
80015414:	00000000 	nop
80015418:	1440000d 	bnez	v0,80015450 <physical_memory_manage_check+0x34c>
8001541c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:378 (discriminator 1)
80015420:	3c028002 	lui	v0,0x8002
80015424:	24428ecc 	addiu	v0,v0,-28980
80015428:	afa20010 	sw	v0,16(sp)
8001542c:	3c028002 	lui	v0,0x8002
80015430:	24478e4c 	addiu	a3,v0,-29108
80015434:	3c028002 	lui	v0,0x8002
80015438:	244693a0 	addiu	a2,v0,-27744
8001543c:	2405017a 	li	a1,378
80015440:	3c028002 	lui	v0,0x8002
80015444:	24448ddc 	addiu	a0,v0,-29220
80015448:	0c004f90 	jal	80013e40 <_panic>
8001544c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:381

	// pp0 should not change
	assert(temp == (int *)page2kva(pp0));
80015450:	8fc20034 	lw	v0,52(s8)
80015454:	00000000 	nop
80015458:	00402025 	move	a0,v0
8001545c:	0c005082 	jal	80014208 <page2kva>
80015460:	00000000 	nop
80015464:	00401825 	move	v1,v0
80015468:	8fc20024 	lw	v0,36(s8)
8001546c:	00000000 	nop
80015470:	1043000d 	beq	v0,v1,800154a8 <physical_memory_manage_check+0x3a4>
80015474:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:381 (discriminator 1)
80015478:	3c028002 	lui	v0,0x8002
8001547c:	24428f48 	addiu	v0,v0,-28856
80015480:	afa20010 	sw	v0,16(sp)
80015484:	3c028002 	lui	v0,0x8002
80015488:	24478e4c 	addiu	a3,v0,-29108
8001548c:	3c028002 	lui	v0,0x8002
80015490:	244693a0 	addiu	a2,v0,-27744
80015494:	2405017d 	li	a1,381
80015498:	3c028002 	lui	v0,0x8002
8001549c:	24448ddc 	addiu	a0,v0,-29220
800154a0:	0c004f90 	jal	80013e40 <_panic>
800154a4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:383
	// pp0 should be zero
	assert(*temp == 0);
800154a8:	8fc20024 	lw	v0,36(s8)
800154ac:	00000000 	nop
800154b0:	8c420000 	lw	v0,0(v0)
800154b4:	00000000 	nop
800154b8:	1040000d 	beqz	v0,800154f0 <physical_memory_manage_check+0x3ec>
800154bc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:383 (discriminator 1)
800154c0:	3c028002 	lui	v0,0x8002
800154c4:	24428f68 	addiu	v0,v0,-28824
800154c8:	afa20010 	sw	v0,16(sp)
800154cc:	3c028002 	lui	v0,0x8002
800154d0:	24478e4c 	addiu	a3,v0,-29108
800154d4:	3c028002 	lui	v0,0x8002
800154d8:	244693a0 	addiu	a2,v0,-27744
800154dc:	2405017f 	li	a1,383
800154e0:	3c028002 	lui	v0,0x8002
800154e4:	24448ddc 	addiu	a0,v0,-29220
800154e8:	0c004f90 	jal	80013e40 <_panic>
800154ec:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:385

	page_free_list = fl;
800154f0:	3c028007 	lui	v0,0x8007
800154f4:	8fc30040 	lw	v1,64(s8)
800154f8:	00000000 	nop
800154fc:	ac43b02c 	sw	v1,-20436(v0)
/home/git/21373271/21373271/kern/pmap.c:386
	page_free(pp0);
80015500:	8fc20034 	lw	v0,52(s8)
80015504:	00000000 	nop
80015508:	00402025 	move	a0,v0
8001550c:	0c005296 	jal	80014a58 <page_free>
80015510:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:387
	page_free(pp1);
80015514:	8fc20038 	lw	v0,56(s8)
80015518:	00000000 	nop
8001551c:	00402025 	move	a0,v0
80015520:	0c005296 	jal	80014a58 <page_free>
80015524:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:388
	page_free(pp2);
80015528:	8fc2003c 	lw	v0,60(s8)
8001552c:	00000000 	nop
80015530:	00402025 	move	a0,v0
80015534:	0c005296 	jal	80014a58 <page_free>
80015538:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:391
	struct Page_list test_free;
	struct Page *test_pages;
	test_pages = (struct Page *)alloc(10 * sizeof(struct Page), BY2PG, 1);
8001553c:	24060001 	li	a2,1
80015540:	24051000 	li	a1,4096
80015544:	24040078 	li	a0,120
80015548:	0c00512c 	jal	800144b0 <alloc>
8001554c:	00000000 	nop
80015550:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/kern/pmap.c:392
	LIST_INIT(&test_free);
80015554:	afc00044 	sw	zero,68(s8)
/home/git/21373271/21373271/kern/pmap.c:394
	// LIST_FIRST(&test_free) = &test_pages[0];
	int i, j = 0;
80015558:	afc0001c 	sw	zero,28(s8)
/home/git/21373271/21373271/kern/pmap.c:396
	struct Page *p, *q;
	for (i = 9; i >= 0; i--) {
8001555c:	24020009 	li	v0,9
80015560:	afc20018 	sw	v0,24(s8)
80015564:	10000048 	b	80015688 <physical_memory_manage_check+0x584>
80015568:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:397
		test_pages[i].pp_ref = i;
8001556c:	8fc30018 	lw	v1,24(s8)
80015570:	00000000 	nop
80015574:	00601025 	move	v0,v1
80015578:	00021040 	sll	v0,v0,0x1
8001557c:	00431021 	addu	v0,v0,v1
80015580:	00021080 	sll	v0,v0,0x2
80015584:	00401825 	move	v1,v0
80015588:	8fc20028 	lw	v0,40(s8)
8001558c:	00000000 	nop
80015590:	00431021 	addu	v0,v0,v1
80015594:	8fc30018 	lw	v1,24(s8)
80015598:	00000000 	nop
8001559c:	3063ffff 	andi	v1,v1,0xffff
800155a0:	a4430008 	sh	v1,8(v0)
/home/git/21373271/21373271/kern/pmap.c:400
		// test_pages[i].pp_link=NULL;
		// printk("0x%x  0x%x\n",&test_pages[i], test_pages[i].pp_link.le_next);
		LIST_INSERT_HEAD(&test_free, &test_pages[i], pp_link);
800155a4:	8fc30018 	lw	v1,24(s8)
800155a8:	00000000 	nop
800155ac:	00601025 	move	v0,v1
800155b0:	00021040 	sll	v0,v0,0x1
800155b4:	00431021 	addu	v0,v0,v1
800155b8:	00021080 	sll	v0,v0,0x2
800155bc:	00401825 	move	v1,v0
800155c0:	8fc20028 	lw	v0,40(s8)
800155c4:	00000000 	nop
800155c8:	00431021 	addu	v0,v0,v1
800155cc:	8fc30044 	lw	v1,68(s8)
800155d0:	00000000 	nop
800155d4:	ac430000 	sw	v1,0(v0)
800155d8:	8c420000 	lw	v0,0(v0)
800155dc:	00000000 	nop
800155e0:	1040000e 	beqz	v0,8001561c <physical_memory_manage_check+0x518>
800155e4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:400 (discriminator 1)
800155e8:	8fc30018 	lw	v1,24(s8)
800155ec:	00000000 	nop
800155f0:	00601025 	move	v0,v1
800155f4:	00021040 	sll	v0,v0,0x1
800155f8:	00431021 	addu	v0,v0,v1
800155fc:	00021080 	sll	v0,v0,0x2
80015600:	00401825 	move	v1,v0
80015604:	8fc20028 	lw	v0,40(s8)
80015608:	00000000 	nop
8001560c:	00431821 	addu	v1,v0,v1
80015610:	8fc20044 	lw	v0,68(s8)
80015614:	00000000 	nop
80015618:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/pmap.c:400 (discriminator 3)
8001561c:	8fc30018 	lw	v1,24(s8)
80015620:	00000000 	nop
80015624:	00601025 	move	v0,v1
80015628:	00021040 	sll	v0,v0,0x1
8001562c:	00431021 	addu	v0,v0,v1
80015630:	00021080 	sll	v0,v0,0x2
80015634:	00401825 	move	v1,v0
80015638:	8fc20028 	lw	v0,40(s8)
8001563c:	00000000 	nop
80015640:	00431021 	addu	v0,v0,v1
80015644:	afc20044 	sw	v0,68(s8)
80015648:	8fc30018 	lw	v1,24(s8)
8001564c:	00000000 	nop
80015650:	00601025 	move	v0,v1
80015654:	00021040 	sll	v0,v0,0x1
80015658:	00431021 	addu	v0,v0,v1
8001565c:	00021080 	sll	v0,v0,0x2
80015660:	00401825 	move	v1,v0
80015664:	8fc20028 	lw	v0,40(s8)
80015668:	00000000 	nop
8001566c:	00431021 	addu	v0,v0,v1
80015670:	27c30044 	addiu	v1,s8,68
80015674:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/pmap.c:396 (discriminator 3)
	for (i = 9; i >= 0; i--) {
80015678:	8fc20018 	lw	v0,24(s8)
8001567c:	00000000 	nop
80015680:	2442ffff 	addiu	v0,v0,-1
80015684:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/pmap.c:396 (discriminator 2)
80015688:	8fc20018 	lw	v0,24(s8)
8001568c:	00000000 	nop
80015690:	0441ffb6 	bgez	v0,8001556c <physical_memory_manage_check+0x468>
80015694:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:403
		// printk("0x%x  0x%x\n",&test_pages[i], test_pages[i].pp_link.le_next);
	}
	p = LIST_FIRST(&test_free);
80015698:	8fc20044 	lw	v0,68(s8)
8001569c:	00000000 	nop
800156a0:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/kern/pmap.c:404
	int answer1[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
800156a4:	3c028002 	lui	v0,0x8002
800156a8:	27c40048 	addiu	a0,s8,72
800156ac:	24428fe4 	addiu	v0,v0,-28700
800156b0:	24030028 	li	v1,40
800156b4:	00603025 	move	a2,v1
800156b8:	00402825 	move	a1,v0
800156bc:	0c0044a8 	jal	800112a0 <memcpy>
800156c0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:405
	assert(p != NULL);
800156c4:	8fc20020 	lw	v0,32(s8)
800156c8:	00000000 	nop
800156cc:	14400030 	bnez	v0,80015790 <physical_memory_manage_check+0x68c>
800156d0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:405 (discriminator 1)
800156d4:	3c028002 	lui	v0,0x8002
800156d8:	24428f74 	addiu	v0,v0,-28812
800156dc:	afa20010 	sw	v0,16(sp)
800156e0:	3c028002 	lui	v0,0x8002
800156e4:	24478e4c 	addiu	a3,v0,-29108
800156e8:	3c028002 	lui	v0,0x8002
800156ec:	244693a0 	addiu	a2,v0,-27744
800156f0:	24050195 	li	a1,405
800156f4:	3c028002 	lui	v0,0x8002
800156f8:	24448ddc 	addiu	a0,v0,-29220
800156fc:	0c004f90 	jal	80013e40 <_panic>
80015700:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:406 (discriminator 1)
	while (p != NULL) {
80015704:	10000022 	b	80015790 <physical_memory_manage_check+0x68c>
80015708:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:408
		// printk("%d %d\n",p->pp_ref,answer1[j]);
		assert(p->pp_ref == answer1[j++]);
8001570c:	8fc20020 	lw	v0,32(s8)
80015710:	00000000 	nop
80015714:	94420008 	lhu	v0,8(v0)
80015718:	00000000 	nop
8001571c:	00402025 	move	a0,v0
80015720:	8fc2001c 	lw	v0,28(s8)
80015724:	00000000 	nop
80015728:	24430001 	addiu	v1,v0,1
8001572c:	afc3001c 	sw	v1,28(s8)
80015730:	00021080 	sll	v0,v0,0x2
80015734:	27c30018 	addiu	v1,s8,24
80015738:	00621021 	addu	v0,v1,v0
8001573c:	8c420030 	lw	v0,48(v0)
80015740:	00000000 	nop
80015744:	1082000d 	beq	a0,v0,8001577c <physical_memory_manage_check+0x678>
80015748:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:408 (discriminator 1)
8001574c:	3c028002 	lui	v0,0x8002
80015750:	24428f80 	addiu	v0,v0,-28800
80015754:	afa20010 	sw	v0,16(sp)
80015758:	3c028002 	lui	v0,0x8002
8001575c:	24478e4c 	addiu	a3,v0,-29108
80015760:	3c028002 	lui	v0,0x8002
80015764:	244693a0 	addiu	a2,v0,-27744
80015768:	24050198 	li	a1,408
8001576c:	3c028002 	lui	v0,0x8002
80015770:	24448ddc 	addiu	a0,v0,-29220
80015774:	0c004f90 	jal	80013e40 <_panic>
80015778:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:410
		// printk("ptr: 0x%x v: %d\n",(p->pp_link).le_next,((p->pp_link).le_next)->pp_ref);
		p = LIST_NEXT(p, pp_link);
8001577c:	8fc20020 	lw	v0,32(s8)
80015780:	00000000 	nop
80015784:	8c420000 	lw	v0,0(v0)
80015788:	00000000 	nop
8001578c:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/kern/pmap.c:406
	while (p != NULL) {
80015790:	8fc20020 	lw	v0,32(s8)
80015794:	00000000 	nop
80015798:	1440ffdc 	bnez	v0,8001570c <physical_memory_manage_check+0x608>
8001579c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:413
	}
	// insert_after test
	int answer2[] = {0, 1, 2, 3, 4, 20, 5, 6, 7, 8, 9};
800157a0:	3c028002 	lui	v0,0x8002
800157a4:	27c40070 	addiu	a0,s8,112
800157a8:	2442900c 	addiu	v0,v0,-28660
800157ac:	2403002c 	li	v1,44
800157b0:	00603025 	move	a2,v1
800157b4:	00402825 	move	a1,v0
800157b8:	0c0044a8 	jal	800112a0 <memcpy>
800157bc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:414
	q = (struct Page *)alloc(sizeof(struct Page), BY2PG, 1);
800157c0:	24060001 	li	a2,1
800157c4:	24051000 	li	a1,4096
800157c8:	2404000c 	li	a0,12
800157cc:	0c00512c 	jal	800144b0 <alloc>
800157d0:	00000000 	nop
800157d4:	afc2002c 	sw	v0,44(s8)
/home/git/21373271/21373271/kern/pmap.c:415
	q->pp_ref = 20;
800157d8:	8fc2002c 	lw	v0,44(s8)
800157dc:	24030014 	li	v1,20
800157e0:	a4430008 	sh	v1,8(v0)
/home/git/21373271/21373271/kern/pmap.c:418

	// printk("---%d\n",test_pages[4].pp_ref);
	LIST_INSERT_AFTER(&test_pages[4], q, pp_link);
800157e4:	8fc20028 	lw	v0,40(s8)
800157e8:	00000000 	nop
800157ec:	24420030 	addiu	v0,v0,48
800157f0:	8c430000 	lw	v1,0(v0)
800157f4:	8fc2002c 	lw	v0,44(s8)
800157f8:	00000000 	nop
800157fc:	ac430000 	sw	v1,0(v0)
80015800:	8fc20028 	lw	v0,40(s8)
80015804:	00000000 	nop
80015808:	24420030 	addiu	v0,v0,48
8001580c:	8c420000 	lw	v0,0(v0)
80015810:	00000000 	nop
80015814:	10400008 	beqz	v0,80015838 <physical_memory_manage_check+0x734>
80015818:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:418 (discriminator 1)
8001581c:	8fc20028 	lw	v0,40(s8)
80015820:	00000000 	nop
80015824:	24420030 	addiu	v0,v0,48
80015828:	8c420000 	lw	v0,0(v0)
8001582c:	8fc3002c 	lw	v1,44(s8)
80015830:	00000000 	nop
80015834:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/pmap.c:418 (discriminator 3)
80015838:	8fc20028 	lw	v0,40(s8)
8001583c:	00000000 	nop
80015840:	24420030 	addiu	v0,v0,48
80015844:	8fc3002c 	lw	v1,44(s8)
80015848:	00000000 	nop
8001584c:	ac430000 	sw	v1,0(v0)
80015850:	8fc20028 	lw	v0,40(s8)
80015854:	00000000 	nop
80015858:	24420030 	addiu	v0,v0,48
8001585c:	00401825 	move	v1,v0
80015860:	8fc2002c 	lw	v0,44(s8)
80015864:	00000000 	nop
80015868:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/pmap.c:420 (discriminator 3)
	// printk("---%d\n",LIST_NEXT(&test_pages[4],pp_link)->pp_ref);
	p = LIST_FIRST(&test_free);
8001586c:	8fc20044 	lw	v0,68(s8)
80015870:	00000000 	nop
80015874:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/kern/pmap.c:421 (discriminator 3)
	j = 0;
80015878:	afc0001c 	sw	zero,28(s8)
/home/git/21373271/21373271/kern/pmap.c:423 (discriminator 3)
	// printk("into test\n");
	while (p != NULL) {
8001587c:	10000022 	b	80015908 <physical_memory_manage_check+0x804>
80015880:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:425
		//      printk("%d %d\n",p->pp_ref,answer2[j]);
		assert(p->pp_ref == answer2[j++]);
80015884:	8fc20020 	lw	v0,32(s8)
80015888:	00000000 	nop
8001588c:	94420008 	lhu	v0,8(v0)
80015890:	00000000 	nop
80015894:	00402025 	move	a0,v0
80015898:	8fc2001c 	lw	v0,28(s8)
8001589c:	00000000 	nop
800158a0:	24430001 	addiu	v1,v0,1
800158a4:	afc3001c 	sw	v1,28(s8)
800158a8:	00021080 	sll	v0,v0,0x2
800158ac:	27c30018 	addiu	v1,s8,24
800158b0:	00621021 	addu	v0,v1,v0
800158b4:	8c420058 	lw	v0,88(v0)
800158b8:	00000000 	nop
800158bc:	1082000d 	beq	a0,v0,800158f4 <physical_memory_manage_check+0x7f0>
800158c0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:425 (discriminator 1)
800158c4:	3c028002 	lui	v0,0x8002
800158c8:	24428f9c 	addiu	v0,v0,-28772
800158cc:	afa20010 	sw	v0,16(sp)
800158d0:	3c028002 	lui	v0,0x8002
800158d4:	24478e4c 	addiu	a3,v0,-29108
800158d8:	3c028002 	lui	v0,0x8002
800158dc:	244693a0 	addiu	a2,v0,-27744
800158e0:	240501a9 	li	a1,425
800158e4:	3c028002 	lui	v0,0x8002
800158e8:	24448ddc 	addiu	a0,v0,-29220
800158ec:	0c004f90 	jal	80013e40 <_panic>
800158f0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:426
		p = LIST_NEXT(p, pp_link);
800158f4:	8fc20020 	lw	v0,32(s8)
800158f8:	00000000 	nop
800158fc:	8c420000 	lw	v0,0(v0)
80015900:	00000000 	nop
80015904:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/kern/pmap.c:423
	while (p != NULL) {
80015908:	8fc20020 	lw	v0,32(s8)
8001590c:	00000000 	nop
80015910:	1440ffdc 	bnez	v0,80015884 <physical_memory_manage_check+0x780>
80015914:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:429
	}

	printk("physical_memory_manage_check() succeeded\n");
80015918:	3c028002 	lui	v0,0x8002
8001591c:	24448fb8 	addiu	a0,v0,-28744
80015920:	0c005a0d 	jal	80016834 <printk>
80015924:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:430
}
80015928:	00000000 	nop
8001592c:	03c0e825 	move	sp,s8
80015930:	8fbf00a4 	lw	ra,164(sp)
80015934:	8fbe00a0 	lw	s8,160(sp)
80015938:	27bd00a8 	addiu	sp,sp,168
8001593c:	03e00008 	jr	ra
80015940:	00000000 	nop

80015944 <page_check>:
page_check():
/home/git/21373271/21373271/kern/pmap.c:432

void page_check(void) {
80015944:	27bdffc0 	addiu	sp,sp,-64
80015948:	afbf003c 	sw	ra,60(sp)
8001594c:	afbe0038 	sw	s8,56(sp)
80015950:	afb00034 	sw	s0,52(sp)
80015954:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/pmap.c:433
	Pde *boot_pgdir = alloc(BY2PG, BY2PG, 1);
80015958:	24060001 	li	a2,1
8001595c:	24051000 	li	a1,4096
80015960:	24041000 	li	a0,4096
80015964:	0c00512c 	jal	800144b0 <alloc>
80015968:	00000000 	nop
8001596c:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/pmap.c:438
	struct Page *pp, *pp0, *pp1, *pp2;
	struct Page_list fl;

	// should be able to allocate three pages
	pp0 = pp1 = pp2 = 0;
80015970:	afc00028 	sw	zero,40(s8)
80015974:	8fc20028 	lw	v0,40(s8)
80015978:	00000000 	nop
8001597c:	afc20024 	sw	v0,36(s8)
80015980:	8fc20024 	lw	v0,36(s8)
80015984:	00000000 	nop
80015988:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/kern/pmap.c:439
	assert(page_alloc(&pp0) == 0);
8001598c:	27c20020 	addiu	v0,s8,32
80015990:	00402025 	move	a0,v0
80015994:	0c00525c 	jal	80014970 <page_alloc>
80015998:	00000000 	nop
8001599c:	1040000d 	beqz	v0,800159d4 <page_check+0x90>
800159a0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:439 (discriminator 1)
800159a4:	3c028002 	lui	v0,0x8002
800159a8:	24428e84 	addiu	v0,v0,-29052
800159ac:	afa20010 	sw	v0,16(sp)
800159b0:	3c028002 	lui	v0,0x8002
800159b4:	24478e4c 	addiu	a3,v0,-29108
800159b8:	3c028002 	lui	v0,0x8002
800159bc:	244693c0 	addiu	a2,v0,-27712
800159c0:	240501b7 	li	a1,439
800159c4:	3c028002 	lui	v0,0x8002
800159c8:	24448ddc 	addiu	a0,v0,-29220
800159cc:	0c004f90 	jal	80013e40 <_panic>
800159d0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:440
	assert(page_alloc(&pp1) == 0);
800159d4:	27c20024 	addiu	v0,s8,36
800159d8:	00402025 	move	a0,v0
800159dc:	0c00525c 	jal	80014970 <page_alloc>
800159e0:	00000000 	nop
800159e4:	1040000d 	beqz	v0,80015a1c <page_check+0xd8>
800159e8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:440 (discriminator 1)
800159ec:	3c028002 	lui	v0,0x8002
800159f0:	24428e9c 	addiu	v0,v0,-29028
800159f4:	afa20010 	sw	v0,16(sp)
800159f8:	3c028002 	lui	v0,0x8002
800159fc:	24478e4c 	addiu	a3,v0,-29108
80015a00:	3c028002 	lui	v0,0x8002
80015a04:	244693c0 	addiu	a2,v0,-27712
80015a08:	240501b8 	li	a1,440
80015a0c:	3c028002 	lui	v0,0x8002
80015a10:	24448ddc 	addiu	a0,v0,-29220
80015a14:	0c004f90 	jal	80013e40 <_panic>
80015a18:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:441
	assert(page_alloc(&pp2) == 0);
80015a1c:	27c20028 	addiu	v0,s8,40
80015a20:	00402025 	move	a0,v0
80015a24:	0c00525c 	jal	80014970 <page_alloc>
80015a28:	00000000 	nop
80015a2c:	1040000d 	beqz	v0,80015a64 <page_check+0x120>
80015a30:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:441 (discriminator 1)
80015a34:	3c028002 	lui	v0,0x8002
80015a38:	24428eb4 	addiu	v0,v0,-29004
80015a3c:	afa20010 	sw	v0,16(sp)
80015a40:	3c028002 	lui	v0,0x8002
80015a44:	24478e4c 	addiu	a3,v0,-29108
80015a48:	3c028002 	lui	v0,0x8002
80015a4c:	244693c0 	addiu	a2,v0,-27712
80015a50:	240501b9 	li	a1,441
80015a54:	3c028002 	lui	v0,0x8002
80015a58:	24448ddc 	addiu	a0,v0,-29220
80015a5c:	0c004f90 	jal	80013e40 <_panic>
80015a60:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:443

	assert(pp0);
80015a64:	8fc20020 	lw	v0,32(s8)
80015a68:	00000000 	nop
80015a6c:	1440000d 	bnez	v0,80015aa4 <page_check+0x160>
80015a70:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:443 (discriminator 1)
80015a74:	3c028002 	lui	v0,0x8002
80015a78:	24428ecc 	addiu	v0,v0,-28980
80015a7c:	afa20010 	sw	v0,16(sp)
80015a80:	3c028002 	lui	v0,0x8002
80015a84:	24478e4c 	addiu	a3,v0,-29108
80015a88:	3c028002 	lui	v0,0x8002
80015a8c:	244693c0 	addiu	a2,v0,-27712
80015a90:	240501bb 	li	a1,443
80015a94:	3c028002 	lui	v0,0x8002
80015a98:	24448ddc 	addiu	a0,v0,-29220
80015a9c:	0c004f90 	jal	80013e40 <_panic>
80015aa0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:444
	assert(pp1 && pp1 != pp0);
80015aa4:	8fc20024 	lw	v0,36(s8)
80015aa8:	00000000 	nop
80015aac:	10400006 	beqz	v0,80015ac8 <page_check+0x184>
80015ab0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:444 (discriminator 2)
80015ab4:	8fc30024 	lw	v1,36(s8)
80015ab8:	8fc20020 	lw	v0,32(s8)
80015abc:	00000000 	nop
80015ac0:	1462000d 	bne	v1,v0,80015af8 <page_check+0x1b4>
80015ac4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:444 (discriminator 3)
80015ac8:	3c028002 	lui	v0,0x8002
80015acc:	24428ed0 	addiu	v0,v0,-28976
80015ad0:	afa20010 	sw	v0,16(sp)
80015ad4:	3c028002 	lui	v0,0x8002
80015ad8:	24478e4c 	addiu	a3,v0,-29108
80015adc:	3c028002 	lui	v0,0x8002
80015ae0:	244693c0 	addiu	a2,v0,-27712
80015ae4:	240501bc 	li	a1,444
80015ae8:	3c028002 	lui	v0,0x8002
80015aec:	24448ddc 	addiu	a0,v0,-29220
80015af0:	0c004f90 	jal	80013e40 <_panic>
80015af4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:445
	assert(pp2 && pp2 != pp1 && pp2 != pp0);
80015af8:	8fc20028 	lw	v0,40(s8)
80015afc:	00000000 	nop
80015b00:	1040000b 	beqz	v0,80015b30 <page_check+0x1ec>
80015b04:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:445 (discriminator 2)
80015b08:	8fc30028 	lw	v1,40(s8)
80015b0c:	8fc20024 	lw	v0,36(s8)
80015b10:	00000000 	nop
80015b14:	10620006 	beq	v1,v0,80015b30 <page_check+0x1ec>
80015b18:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:445 (discriminator 4)
80015b1c:	8fc30028 	lw	v1,40(s8)
80015b20:	8fc20020 	lw	v0,32(s8)
80015b24:	00000000 	nop
80015b28:	1462000d 	bne	v1,v0,80015b60 <page_check+0x21c>
80015b2c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:445 (discriminator 5)
80015b30:	3c028002 	lui	v0,0x8002
80015b34:	24428ee4 	addiu	v0,v0,-28956
80015b38:	afa20010 	sw	v0,16(sp)
80015b3c:	3c028002 	lui	v0,0x8002
80015b40:	24478e4c 	addiu	a3,v0,-29108
80015b44:	3c028002 	lui	v0,0x8002
80015b48:	244693c0 	addiu	a2,v0,-27712
80015b4c:	240501bd 	li	a1,445
80015b50:	3c028002 	lui	v0,0x8002
80015b54:	24448ddc 	addiu	a0,v0,-29220
80015b58:	0c004f90 	jal	80013e40 <_panic>
80015b5c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:448

	// temporarily steal the rest of the free pages
	fl = page_free_list;
80015b60:	3c028007 	lui	v0,0x8007
80015b64:	8c42b02c 	lw	v0,-20436(v0)
80015b68:	00000000 	nop
80015b6c:	afc2002c 	sw	v0,44(s8)
/home/git/21373271/21373271/kern/pmap.c:450
	// now this page_free list must be empty!!!!
	LIST_INIT(&page_free_list);
80015b70:	3c028007 	lui	v0,0x8007
80015b74:	ac40b02c 	sw	zero,-20436(v0)
/home/git/21373271/21373271/kern/pmap.c:453

	// should be no free memory
	assert(page_alloc(&pp) == -E_NO_MEM);
80015b78:	27c2001c 	addiu	v0,s8,28
80015b7c:	00402025 	move	a0,v0
80015b80:	0c00525c 	jal	80014970 <page_alloc>
80015b84:	00000000 	nop
80015b88:	00401825 	move	v1,v0
80015b8c:	2402fffc 	li	v0,-4
80015b90:	1062000d 	beq	v1,v0,80015bc8 <page_check+0x284>
80015b94:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:453 (discriminator 1)
80015b98:	3c028002 	lui	v0,0x8002
80015b9c:	24428f04 	addiu	v0,v0,-28924
80015ba0:	afa20010 	sw	v0,16(sp)
80015ba4:	3c028002 	lui	v0,0x8002
80015ba8:	24478e4c 	addiu	a3,v0,-29108
80015bac:	3c028002 	lui	v0,0x8002
80015bb0:	244693c0 	addiu	a2,v0,-27712
80015bb4:	240501c5 	li	a1,453
80015bb8:	3c028002 	lui	v0,0x8002
80015bbc:	24448ddc 	addiu	a0,v0,-29220
80015bc0:	0c004f90 	jal	80013e40 <_panic>
80015bc4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:456

	// there is no free memory, so we can't allocate a page table
	assert(page_insert(boot_pgdir, 0, pp1, 0x0, 0) < 0);
80015bc8:	8fc20024 	lw	v0,36(s8)
80015bcc:	afa00010 	sw	zero,16(sp)
80015bd0:	00003825 	move	a3,zero
80015bd4:	00403025 	move	a2,v0
80015bd8:	00002825 	move	a1,zero
80015bdc:	8fc40018 	lw	a0,24(s8)
80015be0:	0c00533a 	jal	80014ce8 <page_insert>
80015be4:	00000000 	nop
80015be8:	0440000d 	bltz	v0,80015c20 <page_check+0x2dc>
80015bec:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:456 (discriminator 1)
80015bf0:	3c028002 	lui	v0,0x8002
80015bf4:	24429038 	addiu	v0,v0,-28616
80015bf8:	afa20010 	sw	v0,16(sp)
80015bfc:	3c028002 	lui	v0,0x8002
80015c00:	24478e4c 	addiu	a3,v0,-29108
80015c04:	3c028002 	lui	v0,0x8002
80015c08:	244693c0 	addiu	a2,v0,-27712
80015c0c:	240501c8 	li	a1,456
80015c10:	3c028002 	lui	v0,0x8002
80015c14:	24448ddc 	addiu	a0,v0,-29220
80015c18:	0c004f90 	jal	80013e40 <_panic>
80015c1c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:459

	// free pp0 and try again: pp0 should be used for page table
	page_free(pp0);
80015c20:	8fc20020 	lw	v0,32(s8)
80015c24:	00000000 	nop
80015c28:	00402025 	move	a0,v0
80015c2c:	0c005296 	jal	80014a58 <page_free>
80015c30:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:460
	assert(page_insert(boot_pgdir, 0, pp1, 0x0, 0) == 0);
80015c34:	8fc20024 	lw	v0,36(s8)
80015c38:	afa00010 	sw	zero,16(sp)
80015c3c:	00003825 	move	a3,zero
80015c40:	00403025 	move	a2,v0
80015c44:	00002825 	move	a1,zero
80015c48:	8fc40018 	lw	a0,24(s8)
80015c4c:	0c00533a 	jal	80014ce8 <page_insert>
80015c50:	00000000 	nop
80015c54:	1040000d 	beqz	v0,80015c8c <page_check+0x348>
80015c58:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:460 (discriminator 1)
80015c5c:	3c028002 	lui	v0,0x8002
80015c60:	24429064 	addiu	v0,v0,-28572
80015c64:	afa20010 	sw	v0,16(sp)
80015c68:	3c028002 	lui	v0,0x8002
80015c6c:	24478e4c 	addiu	a3,v0,-29108
80015c70:	3c028002 	lui	v0,0x8002
80015c74:	244693c0 	addiu	a2,v0,-27712
80015c78:	240501cc 	li	a1,460
80015c7c:	3c028002 	lui	v0,0x8002
80015c80:	24448ddc 	addiu	a0,v0,-29220
80015c84:	0c004f90 	jal	80013e40 <_panic>
80015c88:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:461
	assert(PTE_ADDR(boot_pgdir[0]) == page2pa(pp0));
80015c8c:	8fc20018 	lw	v0,24(s8)
80015c90:	00000000 	nop
80015c94:	8c430000 	lw	v1,0(v0)
80015c98:	2402f000 	li	v0,-4096
80015c9c:	00628024 	and	s0,v1,v0
80015ca0:	8fc20020 	lw	v0,32(s8)
80015ca4:	00000000 	nop
80015ca8:	00402025 	move	a0,v0
80015cac:	0c005049 	jal	80014124 <page2pa>
80015cb0:	00000000 	nop
80015cb4:	1202000d 	beq	s0,v0,80015cec <page_check+0x3a8>
80015cb8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:461 (discriminator 1)
80015cbc:	3c028002 	lui	v0,0x8002
80015cc0:	24429094 	addiu	v0,v0,-28524
80015cc4:	afa20010 	sw	v0,16(sp)
80015cc8:	3c028002 	lui	v0,0x8002
80015ccc:	24478e4c 	addiu	a3,v0,-29108
80015cd0:	3c028002 	lui	v0,0x8002
80015cd4:	244693c0 	addiu	a2,v0,-27712
80015cd8:	240501cd 	li	a1,461
80015cdc:	3c028002 	lui	v0,0x8002
80015ce0:	24448ddc 	addiu	a0,v0,-29220
80015ce4:	0c004f90 	jal	80013e40 <_panic>
80015ce8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:463

	printk("va2pa(boot_pgdir, 0x0) is %x\n", va2pa(boot_pgdir, 0x0));
80015cec:	00002825 	move	a1,zero
80015cf0:	8fc40018 	lw	a0,24(s8)
80015cf4:	0c0050ac 	jal	800142b0 <va2pa>
80015cf8:	00000000 	nop
80015cfc:	00402825 	move	a1,v0
80015d00:	3c028002 	lui	v0,0x8002
80015d04:	244490bc 	addiu	a0,v0,-28484
80015d08:	0c005a0d 	jal	80016834 <printk>
80015d0c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:464
	printk("page2pa(pp1) is %x\n", page2pa(pp1));
80015d10:	8fc20024 	lw	v0,36(s8)
80015d14:	00000000 	nop
80015d18:	00402025 	move	a0,v0
80015d1c:	0c005049 	jal	80014124 <page2pa>
80015d20:	00000000 	nop
80015d24:	00402825 	move	a1,v0
80015d28:	3c028002 	lui	v0,0x8002
80015d2c:	244490dc 	addiu	a0,v0,-28452
80015d30:	0c005a0d 	jal	80016834 <printk>
80015d34:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:466
	//	printk("pp1->pp_ref is %d\n",pp1->pp_ref);
	assert(va2pa(boot_pgdir, 0x0) == page2pa(pp1));
80015d38:	00002825 	move	a1,zero
80015d3c:	8fc40018 	lw	a0,24(s8)
80015d40:	0c0050ac 	jal	800142b0 <va2pa>
80015d44:	00000000 	nop
80015d48:	00408025 	move	s0,v0
80015d4c:	8fc20024 	lw	v0,36(s8)
80015d50:	00000000 	nop
80015d54:	00402025 	move	a0,v0
80015d58:	0c005049 	jal	80014124 <page2pa>
80015d5c:	00000000 	nop
80015d60:	1202000d 	beq	s0,v0,80015d98 <page_check+0x454>
80015d64:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:466 (discriminator 1)
80015d68:	3c028002 	lui	v0,0x8002
80015d6c:	244290f0 	addiu	v0,v0,-28432
80015d70:	afa20010 	sw	v0,16(sp)
80015d74:	3c028002 	lui	v0,0x8002
80015d78:	24478e4c 	addiu	a3,v0,-29108
80015d7c:	3c028002 	lui	v0,0x8002
80015d80:	244693c0 	addiu	a2,v0,-27712
80015d84:	240501d2 	li	a1,466
80015d88:	3c028002 	lui	v0,0x8002
80015d8c:	24448ddc 	addiu	a0,v0,-29220
80015d90:	0c004f90 	jal	80013e40 <_panic>
80015d94:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:467
	assert(pp1->pp_ref == 1);
80015d98:	8fc20024 	lw	v0,36(s8)
80015d9c:	00000000 	nop
80015da0:	94430008 	lhu	v1,8(v0)
80015da4:	24020001 	li	v0,1
80015da8:	1062000d 	beq	v1,v0,80015de0 <page_check+0x49c>
80015dac:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:467 (discriminator 1)
80015db0:	3c028002 	lui	v0,0x8002
80015db4:	24429118 	addiu	v0,v0,-28392
80015db8:	afa20010 	sw	v0,16(sp)
80015dbc:	3c028002 	lui	v0,0x8002
80015dc0:	24478e4c 	addiu	a3,v0,-29108
80015dc4:	3c028002 	lui	v0,0x8002
80015dc8:	244693c0 	addiu	a2,v0,-27712
80015dcc:	240501d3 	li	a1,467
80015dd0:	3c028002 	lui	v0,0x8002
80015dd4:	24448ddc 	addiu	a0,v0,-29220
80015dd8:	0c004f90 	jal	80013e40 <_panic>
80015ddc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:470

	// should be able to map pp2 at BY2PG because pp0 is already allocated for page table
	assert(page_insert(boot_pgdir, 0, pp2, BY2PG, 0) == 0);
80015de0:	8fc20028 	lw	v0,40(s8)
80015de4:	afa00010 	sw	zero,16(sp)
80015de8:	24071000 	li	a3,4096
80015dec:	00403025 	move	a2,v0
80015df0:	00002825 	move	a1,zero
80015df4:	8fc40018 	lw	a0,24(s8)
80015df8:	0c00533a 	jal	80014ce8 <page_insert>
80015dfc:	00000000 	nop
80015e00:	1040000d 	beqz	v0,80015e38 <page_check+0x4f4>
80015e04:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:470 (discriminator 1)
80015e08:	3c028002 	lui	v0,0x8002
80015e0c:	2442912c 	addiu	v0,v0,-28372
80015e10:	afa20010 	sw	v0,16(sp)
80015e14:	3c028002 	lui	v0,0x8002
80015e18:	24478e4c 	addiu	a3,v0,-29108
80015e1c:	3c028002 	lui	v0,0x8002
80015e20:	244693c0 	addiu	a2,v0,-27712
80015e24:	240501d6 	li	a1,470
80015e28:	3c028002 	lui	v0,0x8002
80015e2c:	24448ddc 	addiu	a0,v0,-29220
80015e30:	0c004f90 	jal	80013e40 <_panic>
80015e34:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:471
	assert(va2pa(boot_pgdir, BY2PG) == page2pa(pp2));
80015e38:	24051000 	li	a1,4096
80015e3c:	8fc40018 	lw	a0,24(s8)
80015e40:	0c0050ac 	jal	800142b0 <va2pa>
80015e44:	00000000 	nop
80015e48:	00408025 	move	s0,v0
80015e4c:	8fc20028 	lw	v0,40(s8)
80015e50:	00000000 	nop
80015e54:	00402025 	move	a0,v0
80015e58:	0c005049 	jal	80014124 <page2pa>
80015e5c:	00000000 	nop
80015e60:	1202000d 	beq	s0,v0,80015e98 <page_check+0x554>
80015e64:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:471 (discriminator 1)
80015e68:	3c028002 	lui	v0,0x8002
80015e6c:	2442915c 	addiu	v0,v0,-28324
80015e70:	afa20010 	sw	v0,16(sp)
80015e74:	3c028002 	lui	v0,0x8002
80015e78:	24478e4c 	addiu	a3,v0,-29108
80015e7c:	3c028002 	lui	v0,0x8002
80015e80:	244693c0 	addiu	a2,v0,-27712
80015e84:	240501d7 	li	a1,471
80015e88:	3c028002 	lui	v0,0x8002
80015e8c:	24448ddc 	addiu	a0,v0,-29220
80015e90:	0c004f90 	jal	80013e40 <_panic>
80015e94:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:472
	assert(pp2->pp_ref == 1);
80015e98:	8fc20028 	lw	v0,40(s8)
80015e9c:	00000000 	nop
80015ea0:	94430008 	lhu	v1,8(v0)
80015ea4:	24020001 	li	v0,1
80015ea8:	1062000d 	beq	v1,v0,80015ee0 <page_check+0x59c>
80015eac:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:472 (discriminator 1)
80015eb0:	3c028002 	lui	v0,0x8002
80015eb4:	24429188 	addiu	v0,v0,-28280
80015eb8:	afa20010 	sw	v0,16(sp)
80015ebc:	3c028002 	lui	v0,0x8002
80015ec0:	24478e4c 	addiu	a3,v0,-29108
80015ec4:	3c028002 	lui	v0,0x8002
80015ec8:	244693c0 	addiu	a2,v0,-27712
80015ecc:	240501d8 	li	a1,472
80015ed0:	3c028002 	lui	v0,0x8002
80015ed4:	24448ddc 	addiu	a0,v0,-29220
80015ed8:	0c004f90 	jal	80013e40 <_panic>
80015edc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:475

	// should be no free memory
	assert(page_alloc(&pp) == -E_NO_MEM);
80015ee0:	27c2001c 	addiu	v0,s8,28
80015ee4:	00402025 	move	a0,v0
80015ee8:	0c00525c 	jal	80014970 <page_alloc>
80015eec:	00000000 	nop
80015ef0:	00401825 	move	v1,v0
80015ef4:	2402fffc 	li	v0,-4
80015ef8:	1062000d 	beq	v1,v0,80015f30 <page_check+0x5ec>
80015efc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:475 (discriminator 1)
80015f00:	3c028002 	lui	v0,0x8002
80015f04:	24428f04 	addiu	v0,v0,-28924
80015f08:	afa20010 	sw	v0,16(sp)
80015f0c:	3c028002 	lui	v0,0x8002
80015f10:	24478e4c 	addiu	a3,v0,-29108
80015f14:	3c028002 	lui	v0,0x8002
80015f18:	244693c0 	addiu	a2,v0,-27712
80015f1c:	240501db 	li	a1,475
80015f20:	3c028002 	lui	v0,0x8002
80015f24:	24448ddc 	addiu	a0,v0,-29220
80015f28:	0c004f90 	jal	80013e40 <_panic>
80015f2c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:477

	printk("start page_insert\n");
80015f30:	3c028002 	lui	v0,0x8002
80015f34:	2444919c 	addiu	a0,v0,-28260
80015f38:	0c005a0d 	jal	80016834 <printk>
80015f3c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:479
	// should be able to map pp2 at BY2PG because it's already there
	assert(page_insert(boot_pgdir, 0, pp2, BY2PG, 0) == 0);
80015f40:	8fc20028 	lw	v0,40(s8)
80015f44:	afa00010 	sw	zero,16(sp)
80015f48:	24071000 	li	a3,4096
80015f4c:	00403025 	move	a2,v0
80015f50:	00002825 	move	a1,zero
80015f54:	8fc40018 	lw	a0,24(s8)
80015f58:	0c00533a 	jal	80014ce8 <page_insert>
80015f5c:	00000000 	nop
80015f60:	1040000d 	beqz	v0,80015f98 <page_check+0x654>
80015f64:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:479 (discriminator 1)
80015f68:	3c028002 	lui	v0,0x8002
80015f6c:	2442912c 	addiu	v0,v0,-28372
80015f70:	afa20010 	sw	v0,16(sp)
80015f74:	3c028002 	lui	v0,0x8002
80015f78:	24478e4c 	addiu	a3,v0,-29108
80015f7c:	3c028002 	lui	v0,0x8002
80015f80:	244693c0 	addiu	a2,v0,-27712
80015f84:	240501df 	li	a1,479
80015f88:	3c028002 	lui	v0,0x8002
80015f8c:	24448ddc 	addiu	a0,v0,-29220
80015f90:	0c004f90 	jal	80013e40 <_panic>
80015f94:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:480
	assert(va2pa(boot_pgdir, BY2PG) == page2pa(pp2));
80015f98:	24051000 	li	a1,4096
80015f9c:	8fc40018 	lw	a0,24(s8)
80015fa0:	0c0050ac 	jal	800142b0 <va2pa>
80015fa4:	00000000 	nop
80015fa8:	00408025 	move	s0,v0
80015fac:	8fc20028 	lw	v0,40(s8)
80015fb0:	00000000 	nop
80015fb4:	00402025 	move	a0,v0
80015fb8:	0c005049 	jal	80014124 <page2pa>
80015fbc:	00000000 	nop
80015fc0:	1202000d 	beq	s0,v0,80015ff8 <page_check+0x6b4>
80015fc4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:480 (discriminator 1)
80015fc8:	3c028002 	lui	v0,0x8002
80015fcc:	2442915c 	addiu	v0,v0,-28324
80015fd0:	afa20010 	sw	v0,16(sp)
80015fd4:	3c028002 	lui	v0,0x8002
80015fd8:	24478e4c 	addiu	a3,v0,-29108
80015fdc:	3c028002 	lui	v0,0x8002
80015fe0:	244693c0 	addiu	a2,v0,-27712
80015fe4:	240501e0 	li	a1,480
80015fe8:	3c028002 	lui	v0,0x8002
80015fec:	24448ddc 	addiu	a0,v0,-29220
80015ff0:	0c004f90 	jal	80013e40 <_panic>
80015ff4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:481
	assert(pp2->pp_ref == 1);
80015ff8:	8fc20028 	lw	v0,40(s8)
80015ffc:	00000000 	nop
80016000:	94430008 	lhu	v1,8(v0)
80016004:	24020001 	li	v0,1
80016008:	1062000d 	beq	v1,v0,80016040 <page_check+0x6fc>
8001600c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:481 (discriminator 1)
80016010:	3c028002 	lui	v0,0x8002
80016014:	24429188 	addiu	v0,v0,-28280
80016018:	afa20010 	sw	v0,16(sp)
8001601c:	3c028002 	lui	v0,0x8002
80016020:	24478e4c 	addiu	a3,v0,-29108
80016024:	3c028002 	lui	v0,0x8002
80016028:	244693c0 	addiu	a2,v0,-27712
8001602c:	240501e1 	li	a1,481
80016030:	3c028002 	lui	v0,0x8002
80016034:	24448ddc 	addiu	a0,v0,-29220
80016038:	0c004f90 	jal	80013e40 <_panic>
8001603c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:485

	// pp2 should NOT be on the free list
	// could happen in ref counts are handled sloppily in page_insert
	assert(page_alloc(&pp) == -E_NO_MEM);
80016040:	27c2001c 	addiu	v0,s8,28
80016044:	00402025 	move	a0,v0
80016048:	0c00525c 	jal	80014970 <page_alloc>
8001604c:	00000000 	nop
80016050:	00401825 	move	v1,v0
80016054:	2402fffc 	li	v0,-4
80016058:	1062000d 	beq	v1,v0,80016090 <page_check+0x74c>
8001605c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:485 (discriminator 1)
80016060:	3c028002 	lui	v0,0x8002
80016064:	24428f04 	addiu	v0,v0,-28924
80016068:	afa20010 	sw	v0,16(sp)
8001606c:	3c028002 	lui	v0,0x8002
80016070:	24478e4c 	addiu	a3,v0,-29108
80016074:	3c028002 	lui	v0,0x8002
80016078:	244693c0 	addiu	a2,v0,-27712
8001607c:	240501e5 	li	a1,485
80016080:	3c028002 	lui	v0,0x8002
80016084:	24448ddc 	addiu	a0,v0,-29220
80016088:	0c004f90 	jal	80013e40 <_panic>
8001608c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:488

	// should not be able to map at PDMAP because need free page for page table
	assert(page_insert(boot_pgdir, 0, pp0, PDMAP, 0) < 0);
80016090:	8fc20020 	lw	v0,32(s8)
80016094:	afa00010 	sw	zero,16(sp)
80016098:	3c070040 	lui	a3,0x40
8001609c:	00403025 	move	a2,v0
800160a0:	00002825 	move	a1,zero
800160a4:	8fc40018 	lw	a0,24(s8)
800160a8:	0c00533a 	jal	80014ce8 <page_insert>
800160ac:	00000000 	nop
800160b0:	0440000d 	bltz	v0,800160e8 <page_check+0x7a4>
800160b4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:488 (discriminator 1)
800160b8:	3c028002 	lui	v0,0x8002
800160bc:	244291b0 	addiu	v0,v0,-28240
800160c0:	afa20010 	sw	v0,16(sp)
800160c4:	3c028002 	lui	v0,0x8002
800160c8:	24478e4c 	addiu	a3,v0,-29108
800160cc:	3c028002 	lui	v0,0x8002
800160d0:	244693c0 	addiu	a2,v0,-27712
800160d4:	240501e8 	li	a1,488
800160d8:	3c028002 	lui	v0,0x8002
800160dc:	24448ddc 	addiu	a0,v0,-29220
800160e0:	0c004f90 	jal	80013e40 <_panic>
800160e4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:491

	// insert pp1 at BY2PG (replacing pp2)
	assert(page_insert(boot_pgdir, 0, pp1, BY2PG, 0) == 0);
800160e8:	8fc20024 	lw	v0,36(s8)
800160ec:	afa00010 	sw	zero,16(sp)
800160f0:	24071000 	li	a3,4096
800160f4:	00403025 	move	a2,v0
800160f8:	00002825 	move	a1,zero
800160fc:	8fc40018 	lw	a0,24(s8)
80016100:	0c00533a 	jal	80014ce8 <page_insert>
80016104:	00000000 	nop
80016108:	1040000d 	beqz	v0,80016140 <page_check+0x7fc>
8001610c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:491 (discriminator 1)
80016110:	3c028002 	lui	v0,0x8002
80016114:	244291e0 	addiu	v0,v0,-28192
80016118:	afa20010 	sw	v0,16(sp)
8001611c:	3c028002 	lui	v0,0x8002
80016120:	24478e4c 	addiu	a3,v0,-29108
80016124:	3c028002 	lui	v0,0x8002
80016128:	244693c0 	addiu	a2,v0,-27712
8001612c:	240501eb 	li	a1,491
80016130:	3c028002 	lui	v0,0x8002
80016134:	24448ddc 	addiu	a0,v0,-29220
80016138:	0c004f90 	jal	80013e40 <_panic>
8001613c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:494

	// should have pp1 at both 0 and BY2PG, pp2 nowhere, ...
	assert(va2pa(boot_pgdir, 0x0) == page2pa(pp1));
80016140:	00002825 	move	a1,zero
80016144:	8fc40018 	lw	a0,24(s8)
80016148:	0c0050ac 	jal	800142b0 <va2pa>
8001614c:	00000000 	nop
80016150:	00408025 	move	s0,v0
80016154:	8fc20024 	lw	v0,36(s8)
80016158:	00000000 	nop
8001615c:	00402025 	move	a0,v0
80016160:	0c005049 	jal	80014124 <page2pa>
80016164:	00000000 	nop
80016168:	1202000d 	beq	s0,v0,800161a0 <page_check+0x85c>
8001616c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:494 (discriminator 1)
80016170:	3c028002 	lui	v0,0x8002
80016174:	244290f0 	addiu	v0,v0,-28432
80016178:	afa20010 	sw	v0,16(sp)
8001617c:	3c028002 	lui	v0,0x8002
80016180:	24478e4c 	addiu	a3,v0,-29108
80016184:	3c028002 	lui	v0,0x8002
80016188:	244693c0 	addiu	a2,v0,-27712
8001618c:	240501ee 	li	a1,494
80016190:	3c028002 	lui	v0,0x8002
80016194:	24448ddc 	addiu	a0,v0,-29220
80016198:	0c004f90 	jal	80013e40 <_panic>
8001619c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:495
	assert(va2pa(boot_pgdir, BY2PG) == page2pa(pp1));
800161a0:	24051000 	li	a1,4096
800161a4:	8fc40018 	lw	a0,24(s8)
800161a8:	0c0050ac 	jal	800142b0 <va2pa>
800161ac:	00000000 	nop
800161b0:	00408025 	move	s0,v0
800161b4:	8fc20024 	lw	v0,36(s8)
800161b8:	00000000 	nop
800161bc:	00402025 	move	a0,v0
800161c0:	0c005049 	jal	80014124 <page2pa>
800161c4:	00000000 	nop
800161c8:	1202000d 	beq	s0,v0,80016200 <page_check+0x8bc>
800161cc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:495 (discriminator 1)
800161d0:	3c028002 	lui	v0,0x8002
800161d4:	24429210 	addiu	v0,v0,-28144
800161d8:	afa20010 	sw	v0,16(sp)
800161dc:	3c028002 	lui	v0,0x8002
800161e0:	24478e4c 	addiu	a3,v0,-29108
800161e4:	3c028002 	lui	v0,0x8002
800161e8:	244693c0 	addiu	a2,v0,-27712
800161ec:	240501ef 	li	a1,495
800161f0:	3c028002 	lui	v0,0x8002
800161f4:	24448ddc 	addiu	a0,v0,-29220
800161f8:	0c004f90 	jal	80013e40 <_panic>
800161fc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:497
	// ... and ref counts should reflect this
	assert(pp1->pp_ref == 2);
80016200:	8fc20024 	lw	v0,36(s8)
80016204:	00000000 	nop
80016208:	94430008 	lhu	v1,8(v0)
8001620c:	24020002 	li	v0,2
80016210:	1062000d 	beq	v1,v0,80016248 <page_check+0x904>
80016214:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:497 (discriminator 1)
80016218:	3c028002 	lui	v0,0x8002
8001621c:	2442923c 	addiu	v0,v0,-28100
80016220:	afa20010 	sw	v0,16(sp)
80016224:	3c028002 	lui	v0,0x8002
80016228:	24478e4c 	addiu	a3,v0,-29108
8001622c:	3c028002 	lui	v0,0x8002
80016230:	244693c0 	addiu	a2,v0,-27712
80016234:	240501f1 	li	a1,497
80016238:	3c028002 	lui	v0,0x8002
8001623c:	24448ddc 	addiu	a0,v0,-29220
80016240:	0c004f90 	jal	80013e40 <_panic>
80016244:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:498
	printk("pp2->pp_ref %d\n", pp2->pp_ref);
80016248:	8fc20028 	lw	v0,40(s8)
8001624c:	00000000 	nop
80016250:	94420008 	lhu	v0,8(v0)
80016254:	00000000 	nop
80016258:	00402825 	move	a1,v0
8001625c:	3c028002 	lui	v0,0x8002
80016260:	24449250 	addiu	a0,v0,-28080
80016264:	0c005a0d 	jal	80016834 <printk>
80016268:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:499
	assert(pp2->pp_ref == 0);
8001626c:	8fc20028 	lw	v0,40(s8)
80016270:	00000000 	nop
80016274:	94420008 	lhu	v0,8(v0)
80016278:	00000000 	nop
8001627c:	1040000d 	beqz	v0,800162b4 <page_check+0x970>
80016280:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:499 (discriminator 1)
80016284:	3c028002 	lui	v0,0x8002
80016288:	24429260 	addiu	v0,v0,-28064
8001628c:	afa20010 	sw	v0,16(sp)
80016290:	3c028002 	lui	v0,0x8002
80016294:	24478e4c 	addiu	a3,v0,-29108
80016298:	3c028002 	lui	v0,0x8002
8001629c:	244693c0 	addiu	a2,v0,-27712
800162a0:	240501f3 	li	a1,499
800162a4:	3c028002 	lui	v0,0x8002
800162a8:	24448ddc 	addiu	a0,v0,-29220
800162ac:	0c004f90 	jal	80013e40 <_panic>
800162b0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:500
	printk("end page_insert\n");
800162b4:	3c028002 	lui	v0,0x8002
800162b8:	24449274 	addiu	a0,v0,-28044
800162bc:	0c005a0d 	jal	80016834 <printk>
800162c0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:503

	// pp2 should be returned by page_alloc
	assert(page_alloc(&pp) == 0 && pp == pp2);
800162c4:	27c2001c 	addiu	v0,s8,28
800162c8:	00402025 	move	a0,v0
800162cc:	0c00525c 	jal	80014970 <page_alloc>
800162d0:	00000000 	nop
800162d4:	14400006 	bnez	v0,800162f0 <page_check+0x9ac>
800162d8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:503 (discriminator 2)
800162dc:	8fc3001c 	lw	v1,28(s8)
800162e0:	8fc20028 	lw	v0,40(s8)
800162e4:	00000000 	nop
800162e8:	1062000d 	beq	v1,v0,80016320 <page_check+0x9dc>
800162ec:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:503 (discriminator 3)
800162f0:	3c028002 	lui	v0,0x8002
800162f4:	24429288 	addiu	v0,v0,-28024
800162f8:	afa20010 	sw	v0,16(sp)
800162fc:	3c028002 	lui	v0,0x8002
80016300:	24478e4c 	addiu	a3,v0,-29108
80016304:	3c028002 	lui	v0,0x8002
80016308:	244693c0 	addiu	a2,v0,-27712
8001630c:	240501f7 	li	a1,503
80016310:	3c028002 	lui	v0,0x8002
80016314:	24448ddc 	addiu	a0,v0,-29220
80016318:	0c004f90 	jal	80013e40 <_panic>
8001631c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:506

	// unmapping pp1 at 0 should keep pp1 at BY2PG
	page_remove(boot_pgdir, 0, 0x0);
80016320:	00003025 	move	a2,zero
80016324:	00002825 	move	a1,zero
80016328:	8fc40018 	lw	a0,24(s8)
8001632c:	0c005405 	jal	80015014 <page_remove>
80016330:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:507
	assert(va2pa(boot_pgdir, 0x0) == ~0);
80016334:	00002825 	move	a1,zero
80016338:	8fc40018 	lw	a0,24(s8)
8001633c:	0c0050ac 	jal	800142b0 <va2pa>
80016340:	00000000 	nop
80016344:	00401825 	move	v1,v0
80016348:	2402ffff 	li	v0,-1
8001634c:	1062000d 	beq	v1,v0,80016384 <page_check+0xa40>
80016350:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:507 (discriminator 1)
80016354:	3c028002 	lui	v0,0x8002
80016358:	244292ac 	addiu	v0,v0,-27988
8001635c:	afa20010 	sw	v0,16(sp)
80016360:	3c028002 	lui	v0,0x8002
80016364:	24478e4c 	addiu	a3,v0,-29108
80016368:	3c028002 	lui	v0,0x8002
8001636c:	244693c0 	addiu	a2,v0,-27712
80016370:	240501fb 	li	a1,507
80016374:	3c028002 	lui	v0,0x8002
80016378:	24448ddc 	addiu	a0,v0,-29220
8001637c:	0c004f90 	jal	80013e40 <_panic>
80016380:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:508
	assert(va2pa(boot_pgdir, BY2PG) == page2pa(pp1));
80016384:	24051000 	li	a1,4096
80016388:	8fc40018 	lw	a0,24(s8)
8001638c:	0c0050ac 	jal	800142b0 <va2pa>
80016390:	00000000 	nop
80016394:	00408025 	move	s0,v0
80016398:	8fc20024 	lw	v0,36(s8)
8001639c:	00000000 	nop
800163a0:	00402025 	move	a0,v0
800163a4:	0c005049 	jal	80014124 <page2pa>
800163a8:	00000000 	nop
800163ac:	1202000d 	beq	s0,v0,800163e4 <page_check+0xaa0>
800163b0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:508 (discriminator 1)
800163b4:	3c028002 	lui	v0,0x8002
800163b8:	24429210 	addiu	v0,v0,-28144
800163bc:	afa20010 	sw	v0,16(sp)
800163c0:	3c028002 	lui	v0,0x8002
800163c4:	24478e4c 	addiu	a3,v0,-29108
800163c8:	3c028002 	lui	v0,0x8002
800163cc:	244693c0 	addiu	a2,v0,-27712
800163d0:	240501fc 	li	a1,508
800163d4:	3c028002 	lui	v0,0x8002
800163d8:	24448ddc 	addiu	a0,v0,-29220
800163dc:	0c004f90 	jal	80013e40 <_panic>
800163e0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:509
	assert(pp1->pp_ref == 1);
800163e4:	8fc20024 	lw	v0,36(s8)
800163e8:	00000000 	nop
800163ec:	94430008 	lhu	v1,8(v0)
800163f0:	24020001 	li	v0,1
800163f4:	1062000d 	beq	v1,v0,8001642c <page_check+0xae8>
800163f8:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:509 (discriminator 1)
800163fc:	3c028002 	lui	v0,0x8002
80016400:	24429118 	addiu	v0,v0,-28392
80016404:	afa20010 	sw	v0,16(sp)
80016408:	3c028002 	lui	v0,0x8002
8001640c:	24478e4c 	addiu	a3,v0,-29108
80016410:	3c028002 	lui	v0,0x8002
80016414:	244693c0 	addiu	a2,v0,-27712
80016418:	240501fd 	li	a1,509
8001641c:	3c028002 	lui	v0,0x8002
80016420:	24448ddc 	addiu	a0,v0,-29220
80016424:	0c004f90 	jal	80013e40 <_panic>
80016428:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:510
	assert(pp2->pp_ref == 0);
8001642c:	8fc20028 	lw	v0,40(s8)
80016430:	00000000 	nop
80016434:	94420008 	lhu	v0,8(v0)
80016438:	00000000 	nop
8001643c:	1040000d 	beqz	v0,80016474 <page_check+0xb30>
80016440:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:510 (discriminator 1)
80016444:	3c028002 	lui	v0,0x8002
80016448:	24429260 	addiu	v0,v0,-28064
8001644c:	afa20010 	sw	v0,16(sp)
80016450:	3c028002 	lui	v0,0x8002
80016454:	24478e4c 	addiu	a3,v0,-29108
80016458:	3c028002 	lui	v0,0x8002
8001645c:	244693c0 	addiu	a2,v0,-27712
80016460:	240501fe 	li	a1,510
80016464:	3c028002 	lui	v0,0x8002
80016468:	24448ddc 	addiu	a0,v0,-29220
8001646c:	0c004f90 	jal	80013e40 <_panic>
80016470:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:513

	// unmapping pp1 at BY2PG should free it
	page_remove(boot_pgdir, 0, BY2PG);
80016474:	24061000 	li	a2,4096
80016478:	00002825 	move	a1,zero
8001647c:	8fc40018 	lw	a0,24(s8)
80016480:	0c005405 	jal	80015014 <page_remove>
80016484:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:514
	assert(va2pa(boot_pgdir, 0x0) == ~0);
80016488:	00002825 	move	a1,zero
8001648c:	8fc40018 	lw	a0,24(s8)
80016490:	0c0050ac 	jal	800142b0 <va2pa>
80016494:	00000000 	nop
80016498:	00401825 	move	v1,v0
8001649c:	2402ffff 	li	v0,-1
800164a0:	1062000d 	beq	v1,v0,800164d8 <page_check+0xb94>
800164a4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:514 (discriminator 1)
800164a8:	3c028002 	lui	v0,0x8002
800164ac:	244292ac 	addiu	v0,v0,-27988
800164b0:	afa20010 	sw	v0,16(sp)
800164b4:	3c028002 	lui	v0,0x8002
800164b8:	24478e4c 	addiu	a3,v0,-29108
800164bc:	3c028002 	lui	v0,0x8002
800164c0:	244693c0 	addiu	a2,v0,-27712
800164c4:	24050202 	li	a1,514
800164c8:	3c028002 	lui	v0,0x8002
800164cc:	24448ddc 	addiu	a0,v0,-29220
800164d0:	0c004f90 	jal	80013e40 <_panic>
800164d4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:515
	assert(va2pa(boot_pgdir, BY2PG) == ~0);
800164d8:	24051000 	li	a1,4096
800164dc:	8fc40018 	lw	a0,24(s8)
800164e0:	0c0050ac 	jal	800142b0 <va2pa>
800164e4:	00000000 	nop
800164e8:	00401825 	move	v1,v0
800164ec:	2402ffff 	li	v0,-1
800164f0:	1062000d 	beq	v1,v0,80016528 <page_check+0xbe4>
800164f4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:515 (discriminator 1)
800164f8:	3c028002 	lui	v0,0x8002
800164fc:	244292cc 	addiu	v0,v0,-27956
80016500:	afa20010 	sw	v0,16(sp)
80016504:	3c028002 	lui	v0,0x8002
80016508:	24478e4c 	addiu	a3,v0,-29108
8001650c:	3c028002 	lui	v0,0x8002
80016510:	244693c0 	addiu	a2,v0,-27712
80016514:	24050203 	li	a1,515
80016518:	3c028002 	lui	v0,0x8002
8001651c:	24448ddc 	addiu	a0,v0,-29220
80016520:	0c004f90 	jal	80013e40 <_panic>
80016524:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:516
	assert(pp1->pp_ref == 0);
80016528:	8fc20024 	lw	v0,36(s8)
8001652c:	00000000 	nop
80016530:	94420008 	lhu	v0,8(v0)
80016534:	00000000 	nop
80016538:	1040000d 	beqz	v0,80016570 <page_check+0xc2c>
8001653c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:516 (discriminator 1)
80016540:	3c028002 	lui	v0,0x8002
80016544:	244292ec 	addiu	v0,v0,-27924
80016548:	afa20010 	sw	v0,16(sp)
8001654c:	3c028002 	lui	v0,0x8002
80016550:	24478e4c 	addiu	a3,v0,-29108
80016554:	3c028002 	lui	v0,0x8002
80016558:	244693c0 	addiu	a2,v0,-27712
8001655c:	24050204 	li	a1,516
80016560:	3c028002 	lui	v0,0x8002
80016564:	24448ddc 	addiu	a0,v0,-29220
80016568:	0c004f90 	jal	80013e40 <_panic>
8001656c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:517
	assert(pp2->pp_ref == 0);
80016570:	8fc20028 	lw	v0,40(s8)
80016574:	00000000 	nop
80016578:	94420008 	lhu	v0,8(v0)
8001657c:	00000000 	nop
80016580:	1040000d 	beqz	v0,800165b8 <page_check+0xc74>
80016584:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:517 (discriminator 1)
80016588:	3c028002 	lui	v0,0x8002
8001658c:	24429260 	addiu	v0,v0,-28064
80016590:	afa20010 	sw	v0,16(sp)
80016594:	3c028002 	lui	v0,0x8002
80016598:	24478e4c 	addiu	a3,v0,-29108
8001659c:	3c028002 	lui	v0,0x8002
800165a0:	244693c0 	addiu	a2,v0,-27712
800165a4:	24050205 	li	a1,517
800165a8:	3c028002 	lui	v0,0x8002
800165ac:	24448ddc 	addiu	a0,v0,-29220
800165b0:	0c004f90 	jal	80013e40 <_panic>
800165b4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:520

	// so it should be returned by page_alloc
	assert(page_alloc(&pp) == 0 && pp == pp1);
800165b8:	27c2001c 	addiu	v0,s8,28
800165bc:	00402025 	move	a0,v0
800165c0:	0c00525c 	jal	80014970 <page_alloc>
800165c4:	00000000 	nop
800165c8:	14400006 	bnez	v0,800165e4 <page_check+0xca0>
800165cc:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:520 (discriminator 2)
800165d0:	8fc3001c 	lw	v1,28(s8)
800165d4:	8fc20024 	lw	v0,36(s8)
800165d8:	00000000 	nop
800165dc:	1062000d 	beq	v1,v0,80016614 <page_check+0xcd0>
800165e0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:520 (discriminator 3)
800165e4:	3c028002 	lui	v0,0x8002
800165e8:	24429300 	addiu	v0,v0,-27904
800165ec:	afa20010 	sw	v0,16(sp)
800165f0:	3c028002 	lui	v0,0x8002
800165f4:	24478e4c 	addiu	a3,v0,-29108
800165f8:	3c028002 	lui	v0,0x8002
800165fc:	244693c0 	addiu	a2,v0,-27712
80016600:	24050208 	li	a1,520
80016604:	3c028002 	lui	v0,0x8002
80016608:	24448ddc 	addiu	a0,v0,-29220
8001660c:	0c004f90 	jal	80013e40 <_panic>
80016610:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:523

	// should be no free memory
	assert(page_alloc(&pp) == -E_NO_MEM);
80016614:	27c2001c 	addiu	v0,s8,28
80016618:	00402025 	move	a0,v0
8001661c:	0c00525c 	jal	80014970 <page_alloc>
80016620:	00000000 	nop
80016624:	00401825 	move	v1,v0
80016628:	2402fffc 	li	v0,-4
8001662c:	1062000d 	beq	v1,v0,80016664 <page_check+0xd20>
80016630:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:523 (discriminator 1)
80016634:	3c028002 	lui	v0,0x8002
80016638:	24428f04 	addiu	v0,v0,-28924
8001663c:	afa20010 	sw	v0,16(sp)
80016640:	3c028002 	lui	v0,0x8002
80016644:	24478e4c 	addiu	a3,v0,-29108
80016648:	3c028002 	lui	v0,0x8002
8001664c:	244693c0 	addiu	a2,v0,-27712
80016650:	2405020b 	li	a1,523
80016654:	3c028002 	lui	v0,0x8002
80016658:	24448ddc 	addiu	a0,v0,-29220
8001665c:	0c004f90 	jal	80013e40 <_panic>
80016660:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:526

	// forcibly take pp0 back
	assert(PTE_ADDR(boot_pgdir[0]) == page2pa(pp0));
80016664:	8fc20018 	lw	v0,24(s8)
80016668:	00000000 	nop
8001666c:	8c430000 	lw	v1,0(v0)
80016670:	2402f000 	li	v0,-4096
80016674:	00628024 	and	s0,v1,v0
80016678:	8fc20020 	lw	v0,32(s8)
8001667c:	00000000 	nop
80016680:	00402025 	move	a0,v0
80016684:	0c005049 	jal	80014124 <page2pa>
80016688:	00000000 	nop
8001668c:	1202000d 	beq	s0,v0,800166c4 <page_check+0xd80>
80016690:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:526 (discriminator 1)
80016694:	3c028002 	lui	v0,0x8002
80016698:	24429094 	addiu	v0,v0,-28524
8001669c:	afa20010 	sw	v0,16(sp)
800166a0:	3c028002 	lui	v0,0x8002
800166a4:	24478e4c 	addiu	a3,v0,-29108
800166a8:	3c028002 	lui	v0,0x8002
800166ac:	244693c0 	addiu	a2,v0,-27712
800166b0:	2405020e 	li	a1,526
800166b4:	3c028002 	lui	v0,0x8002
800166b8:	24448ddc 	addiu	a0,v0,-29220
800166bc:	0c004f90 	jal	80013e40 <_panic>
800166c0:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:527
	boot_pgdir[0] = 0;
800166c4:	8fc20018 	lw	v0,24(s8)
800166c8:	00000000 	nop
800166cc:	ac400000 	sw	zero,0(v0)
/home/git/21373271/21373271/kern/pmap.c:528
	assert(pp0->pp_ref == 1);
800166d0:	8fc20020 	lw	v0,32(s8)
800166d4:	00000000 	nop
800166d8:	94430008 	lhu	v1,8(v0)
800166dc:	24020001 	li	v0,1
800166e0:	1062000d 	beq	v1,v0,80016718 <page_check+0xdd4>
800166e4:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:528 (discriminator 1)
800166e8:	3c028002 	lui	v0,0x8002
800166ec:	24429324 	addiu	v0,v0,-27868
800166f0:	afa20010 	sw	v0,16(sp)
800166f4:	3c028002 	lui	v0,0x8002
800166f8:	24478e4c 	addiu	a3,v0,-29108
800166fc:	3c028002 	lui	v0,0x8002
80016700:	244693c0 	addiu	a2,v0,-27712
80016704:	24050210 	li	a1,528
80016708:	3c028002 	lui	v0,0x8002
8001670c:	24448ddc 	addiu	a0,v0,-29220
80016710:	0c004f90 	jal	80013e40 <_panic>
80016714:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:529
	pp0->pp_ref = 0;
80016718:	8fc20020 	lw	v0,32(s8)
8001671c:	00000000 	nop
80016720:	a4400008 	sh	zero,8(v0)
/home/git/21373271/21373271/kern/pmap.c:532

	// give free list back
	page_free_list = fl;
80016724:	3c028007 	lui	v0,0x8007
80016728:	8fc3002c 	lw	v1,44(s8)
8001672c:	00000000 	nop
80016730:	ac43b02c 	sw	v1,-20436(v0)
/home/git/21373271/21373271/kern/pmap.c:535

	// free the pages we took
	page_free(pp0);
80016734:	8fc20020 	lw	v0,32(s8)
80016738:	00000000 	nop
8001673c:	00402025 	move	a0,v0
80016740:	0c005296 	jal	80014a58 <page_free>
80016744:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:536
	page_free(pp1);
80016748:	8fc20024 	lw	v0,36(s8)
8001674c:	00000000 	nop
80016750:	00402025 	move	a0,v0
80016754:	0c005296 	jal	80014a58 <page_free>
80016758:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:537
	page_free(pp2);
8001675c:	8fc20028 	lw	v0,40(s8)
80016760:	00000000 	nop
80016764:	00402025 	move	a0,v0
80016768:	0c005296 	jal	80014a58 <page_free>
8001676c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:539

	printk("page_check() succeeded!\n");
80016770:	3c028002 	lui	v0,0x8002
80016774:	24449338 	addiu	a0,v0,-27848
80016778:	0c005a0d 	jal	80016834 <printk>
8001677c:	00000000 	nop
/home/git/21373271/21373271/kern/pmap.c:540
}
80016780:	00000000 	nop
80016784:	03c0e825 	move	sp,s8
80016788:	8fbf003c 	lw	ra,60(sp)
8001678c:	8fbe0038 	lw	s8,56(sp)
80016790:	8fb00034 	lw	s0,52(sp)
80016794:	27bd0040 	addiu	sp,sp,64
80016798:	03e00008 	jr	ra
8001679c:	00000000 	nop

800167a0 <outputk>:
outputk():
/home/git/21373271/21373271/kern/printk.c:6
#include <drivers/dev_cons.h>
#include <print.h>
#include <printk.h>
#include <trap.h>

void outputk(void *data, const char *buf, size_t len) {
800167a0:	27bdffe0 	addiu	sp,sp,-32
800167a4:	afbf001c 	sw	ra,28(sp)
800167a8:	afbe0018 	sw	s8,24(sp)
800167ac:	03a0f025 	move	s8,sp
800167b0:	afc40020 	sw	a0,32(s8)
800167b4:	afc50024 	sw	a1,36(s8)
800167b8:	afc60028 	sw	a2,40(s8)
/home/git/21373271/21373271/kern/printk.c:7
	for (int i = 0; i < len; i++) {
800167bc:	afc00010 	sw	zero,16(s8)
800167c0:	1000000e 	b	800167fc <outputk+0x5c>
800167c4:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:8 (discriminator 3)
		printcharc(buf[i]);
800167c8:	8fc20010 	lw	v0,16(s8)
800167cc:	8fc30024 	lw	v1,36(s8)
800167d0:	00000000 	nop
800167d4:	00621021 	addu	v0,v1,v0
800167d8:	80420000 	lb	v0,0(v0)
800167dc:	00000000 	nop
800167e0:	00402025 	move	a0,v0
800167e4:	0c004634 	jal	800118d0 <printcharc>
800167e8:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:7 (discriminator 3)
	for (int i = 0; i < len; i++) {
800167ec:	8fc20010 	lw	v0,16(s8)
800167f0:	00000000 	nop
800167f4:	24420001 	addiu	v0,v0,1
800167f8:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/kern/printk.c:7 (discriminator 1)
800167fc:	8fc20010 	lw	v0,16(s8)
80016800:	8fc30028 	lw	v1,40(s8)
80016804:	00000000 	nop
80016808:	0043102b 	sltu	v0,v0,v1
8001680c:	1440ffee 	bnez	v0,800167c8 <outputk+0x28>
80016810:	00000000 	nop
	...
/home/git/21373271/21373271/kern/printk.c:10
	}
}
8001681c:	03c0e825 	move	sp,s8
80016820:	8fbf001c 	lw	ra,28(sp)
80016824:	8fbe0018 	lw	s8,24(sp)
80016828:	27bd0020 	addiu	sp,sp,32
8001682c:	03e00008 	jr	ra
80016830:	00000000 	nop

80016834 <printk>:
printk():
/home/git/21373271/21373271/kern/printk.c:12

void printk(const char *fmt, ...) {
80016834:	27bdffe0 	addiu	sp,sp,-32
80016838:	afbf001c 	sw	ra,28(sp)
8001683c:	afbe0018 	sw	s8,24(sp)
80016840:	03a0f025 	move	s8,sp
80016844:	afc40020 	sw	a0,32(s8)
80016848:	afc50024 	sw	a1,36(s8)
8001684c:	afc60028 	sw	a2,40(s8)
80016850:	afc7002c 	sw	a3,44(s8)
/home/git/21373271/21373271/kern/printk.c:14
	va_list ap;
	va_start(ap, fmt);
80016854:	27c20024 	addiu	v0,s8,36
80016858:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/kern/printk.c:15
	vprintfmt(outputk, NULL, fmt, ap);
8001685c:	8fc20010 	lw	v0,16(s8)
80016860:	00000000 	nop
80016864:	00403825 	move	a3,v0
80016868:	8fc60020 	lw	a2,32(s8)
8001686c:	00002825 	move	a1,zero
80016870:	3c028001 	lui	v0,0x8001
80016874:	244467a0 	addiu	a0,v0,26528
80016878:	0c004104 	jal	80010410 <vprintfmt>
8001687c:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:17
	va_end(ap);
}
80016880:	00000000 	nop
80016884:	03c0e825 	move	sp,s8
80016888:	8fbf001c 	lw	ra,28(sp)
8001688c:	8fbe0018 	lw	s8,24(sp)
80016890:	27bd0020 	addiu	sp,sp,32
80016894:	03e00008 	jr	ra
80016898:	00000000 	nop

8001689c <print_tf>:
print_tf():
/home/git/21373271/21373271/kern/printk.c:19

void print_tf(struct Trapframe *tf) {
8001689c:	27bdffe0 	addiu	sp,sp,-32
800168a0:	afbf001c 	sw	ra,28(sp)
800168a4:	afbe0018 	sw	s8,24(sp)
800168a8:	03a0f025 	move	s8,sp
800168ac:	afc40020 	sw	a0,32(s8)
/home/git/21373271/21373271/kern/printk.c:20
	for (int i = 0; i < sizeof(tf->regs) / sizeof(tf->regs[0]); i++) {
800168b0:	afc00010 	sw	zero,16(s8)
800168b4:	10000012 	b	80016900 <print_tf+0x64>
800168b8:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:21 (discriminator 3)
		printk("$%2d = %08x\n", i, tf->regs[i]);
800168bc:	8fc30020 	lw	v1,32(s8)
800168c0:	8fc20010 	lw	v0,16(s8)
800168c4:	00000000 	nop
800168c8:	00021080 	sll	v0,v0,0x2
800168cc:	00621021 	addu	v0,v1,v0
800168d0:	8c420000 	lw	v0,0(v0)
800168d4:	00000000 	nop
800168d8:	00403025 	move	a2,v0
800168dc:	8fc50010 	lw	a1,16(s8)
800168e0:	3c028002 	lui	v0,0x8002
800168e4:	244493e0 	addiu	a0,v0,-27680
800168e8:	0c005a0d 	jal	80016834 <printk>
800168ec:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:20 (discriminator 3)
	for (int i = 0; i < sizeof(tf->regs) / sizeof(tf->regs[0]); i++) {
800168f0:	8fc20010 	lw	v0,16(s8)
800168f4:	00000000 	nop
800168f8:	24420001 	addiu	v0,v0,1
800168fc:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/kern/printk.c:20 (discriminator 1)
80016900:	8fc20010 	lw	v0,16(s8)
80016904:	00000000 	nop
80016908:	2c420020 	sltiu	v0,v0,32
8001690c:	1440ffeb 	bnez	v0,800168bc <print_tf+0x20>
80016910:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:23
	}
	printk("HI  = %08x\n", tf->hi);
80016914:	8fc20020 	lw	v0,32(s8)
80016918:	00000000 	nop
8001691c:	8c420084 	lw	v0,132(v0)
80016920:	00000000 	nop
80016924:	00402825 	move	a1,v0
80016928:	3c028002 	lui	v0,0x8002
8001692c:	244493f0 	addiu	a0,v0,-27664
80016930:	0c005a0d 	jal	80016834 <printk>
80016934:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:24
	printk("LO  = %08x\n\n", tf->lo);
80016938:	8fc20020 	lw	v0,32(s8)
8001693c:	00000000 	nop
80016940:	8c420088 	lw	v0,136(v0)
80016944:	00000000 	nop
80016948:	00402825 	move	a1,v0
8001694c:	3c028002 	lui	v0,0x8002
80016950:	244493fc 	addiu	a0,v0,-27652
80016954:	0c005a0d 	jal	80016834 <printk>
80016958:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:25
	printk("CP0.SR    = %08x\n", tf->cp0_status);
8001695c:	8fc20020 	lw	v0,32(s8)
80016960:	00000000 	nop
80016964:	8c420080 	lw	v0,128(v0)
80016968:	00000000 	nop
8001696c:	00402825 	move	a1,v0
80016970:	3c028002 	lui	v0,0x8002
80016974:	2444940c 	addiu	a0,v0,-27636
80016978:	0c005a0d 	jal	80016834 <printk>
8001697c:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:26
	printk("CP0.BadV  = %08x\n", tf->cp0_badvaddr);
80016980:	8fc20020 	lw	v0,32(s8)
80016984:	00000000 	nop
80016988:	8c42008c 	lw	v0,140(v0)
8001698c:	00000000 	nop
80016990:	00402825 	move	a1,v0
80016994:	3c028002 	lui	v0,0x8002
80016998:	24449420 	addiu	a0,v0,-27616
8001699c:	0c005a0d 	jal	80016834 <printk>
800169a0:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:27
	printk("CP0.Cause = %08x\n", tf->cp0_cause);
800169a4:	8fc20020 	lw	v0,32(s8)
800169a8:	00000000 	nop
800169ac:	8c420090 	lw	v0,144(v0)
800169b0:	00000000 	nop
800169b4:	00402825 	move	a1,v0
800169b8:	3c028002 	lui	v0,0x8002
800169bc:	24449434 	addiu	a0,v0,-27596
800169c0:	0c005a0d 	jal	80016834 <printk>
800169c4:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:28
	printk("CP0.EPC   = %08x\n", tf->cp0_epc);
800169c8:	8fc20020 	lw	v0,32(s8)
800169cc:	00000000 	nop
800169d0:	8c420094 	lw	v0,148(v0)
800169d4:	00000000 	nop
800169d8:	00402825 	move	a1,v0
800169dc:	3c028002 	lui	v0,0x8002
800169e0:	24449448 	addiu	a0,v0,-27576
800169e4:	0c005a0d 	jal	80016834 <printk>
800169e8:	00000000 	nop
/home/git/21373271/21373271/kern/printk.c:29
}
800169ec:	00000000 	nop
800169f0:	03c0e825 	move	sp,s8
800169f4:	8fbf001c 	lw	ra,28(sp)
800169f8:	8fbe0018 	lw	s8,24(sp)
800169fc:	27bd0020 	addiu	sp,sp,32
80016a00:	03e00008 	jr	ra
80016a04:	00000000 	nop
	...

80016a10 <schedule>:
schedule():
/home/git/21373271/21373271/kern/sched.c:17
 * Hints:
 *   1. The variable 'count' used for counting slices should be defined as 'static'.
 *   2. Use variable 'env_sched_list', which contains and only contains all runnable envs.
 *   3. You shouldn't use any 'return' statement because this function is 'noreturn'.
 */
void schedule(int yield) {
80016a10:	27bdffe0 	addiu	sp,sp,-32
80016a14:	afbf001c 	sw	ra,28(sp)
80016a18:	afbe0018 	sw	s8,24(sp)
80016a1c:	03a0f025 	move	s8,sp
80016a20:	afc40020 	sw	a0,32(s8)
/home/git/21373271/21373271/kern/sched.c:19
	static int count = 0; // remaining time slices of current env
	struct Env *e = curenv;
80016a24:	3c028007 	lui	v0,0x8007
80016a28:	8c42b000 	lw	v0,-20480(v0)
80016a2c:	00000000 	nop
80016a30:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/kern/sched.c:39
	 * You may want to use macros below:
	 *   'TAILQ_FIRST', 'TAILQ_REMOVE', 'TAILQ_INSERT_TAIL'
	 */
	/* Exercise 3.12: Your code here. */
	//printk("2\n");
	if ( count <= 0 || e == NULL || e->env_status != ENV_RUNNABLE || yield )
80016a34:	3c028007 	lui	v0,0x8007
80016a38:	8c42b040 	lw	v0,-20416(v0)
80016a3c:	00000000 	nop
80016a40:	1840000f 	blez	v0,80016a80 <schedule+0x70>
80016a44:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:39 (discriminator 1)
80016a48:	8fc20010 	lw	v0,16(s8)
80016a4c:	00000000 	nop
80016a50:	1040000b 	beqz	v0,80016a80 <schedule+0x70>
80016a54:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:39 (discriminator 2)
80016a58:	8fc20010 	lw	v0,16(s8)
80016a5c:	00000000 	nop
80016a60:	8c4300ac 	lw	v1,172(v0)
80016a64:	24020001 	li	v0,1
80016a68:	14620005 	bne	v1,v0,80016a80 <schedule+0x70>
80016a6c:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:39 (discriminator 3)
80016a70:	8fc20020 	lw	v0,32(s8)
80016a74:	00000000 	nop
80016a78:	10400059 	beqz	v0,80016be0 <schedule+0x1d0>
80016a7c:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:41
	{
		if ( e != NULL && e->env_status == ENV_RUNNABLE )
80016a80:	8fc20010 	lw	v0,16(s8)
80016a84:	00000000 	nop
80016a88:	1040003a 	beqz	v0,80016b74 <schedule+0x164>
80016a8c:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:41 (discriminator 1)
80016a90:	8fc20010 	lw	v0,16(s8)
80016a94:	00000000 	nop
80016a98:	8c4300ac 	lw	v1,172(v0)
80016a9c:	24020001 	li	v0,1
80016aa0:	14620034 	bne	v1,v0,80016b74 <schedule+0x164>
80016aa4:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:43
		{
			TAILQ_REMOVE(&env_sched_list,e,env_sched_link);
80016aa8:	8fc20010 	lw	v0,16(s8)
80016aac:	00000000 	nop
80016ab0:	8c4200b4 	lw	v0,180(v0)
80016ab4:	00000000 	nop
80016ab8:	1040000b 	beqz	v0,80016ae8 <schedule+0xd8>
80016abc:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:43 (discriminator 1)
80016ac0:	8fc20010 	lw	v0,16(s8)
80016ac4:	00000000 	nop
80016ac8:	8c4200b4 	lw	v0,180(v0)
80016acc:	8fc30010 	lw	v1,16(s8)
80016ad0:	00000000 	nop
80016ad4:	8c6300b8 	lw	v1,184(v1)
80016ad8:	00000000 	nop
80016adc:	ac4300b8 	sw	v1,184(v0)
80016ae0:	10000007 	b	80016b00 <schedule+0xf0>
80016ae4:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:43 (discriminator 2)
80016ae8:	8fc20010 	lw	v0,16(s8)
80016aec:	00000000 	nop
80016af0:	8c4300b8 	lw	v1,184(v0)
80016af4:	3c028007 	lui	v0,0x8007
80016af8:	2442b004 	addiu	v0,v0,-20476
80016afc:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/sched.c:43 (discriminator 4)
80016b00:	8fc20010 	lw	v0,16(s8)
80016b04:	00000000 	nop
80016b08:	8c4200b8 	lw	v0,184(v0)
80016b0c:	8fc30010 	lw	v1,16(s8)
80016b10:	00000000 	nop
80016b14:	8c6300b4 	lw	v1,180(v1)
80016b18:	00000000 	nop
80016b1c:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/sched.c:44 (discriminator 4)
			TAILQ_INSERT_TAIL(&env_sched_list,e,env_sched_link);
80016b20:	8fc20010 	lw	v0,16(s8)
80016b24:	00000000 	nop
80016b28:	ac4000b4 	sw	zero,180(v0)
80016b2c:	3c028007 	lui	v0,0x8007
80016b30:	2442b004 	addiu	v0,v0,-20476
80016b34:	8c430004 	lw	v1,4(v0)
80016b38:	8fc20010 	lw	v0,16(s8)
80016b3c:	00000000 	nop
80016b40:	ac4300b8 	sw	v1,184(v0)
80016b44:	3c028007 	lui	v0,0x8007
80016b48:	2442b004 	addiu	v0,v0,-20476
80016b4c:	8c420004 	lw	v0,4(v0)
80016b50:	8fc30010 	lw	v1,16(s8)
80016b54:	00000000 	nop
80016b58:	ac430000 	sw	v1,0(v0)
80016b5c:	8fc20010 	lw	v0,16(s8)
80016b60:	00000000 	nop
80016b64:	244300b4 	addiu	v1,v0,180
80016b68:	3c028007 	lui	v0,0x8007
80016b6c:	2442b004 	addiu	v0,v0,-20476
80016b70:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/sched.c:46
		}
		if ( !TAILQ_EMPTY(&env_sched_list) )
80016b74:	3c028007 	lui	v0,0x8007
80016b78:	8c42b004 	lw	v0,-20476(v0)
80016b7c:	00000000 	nop
80016b80:	1040000e 	beqz	v0,80016bbc <schedule+0x1ac>
80016b84:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:49
		{
			//printk("1");
			e = TAILQ_FIRST(&env_sched_list);
80016b88:	3c028007 	lui	v0,0x8007
80016b8c:	8c42b004 	lw	v0,-20476(v0)
80016b90:	00000000 	nop
80016b94:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/kern/sched.c:50
			count = e->env_pri;
80016b98:	8fc20010 	lw	v0,16(s8)
80016b9c:	00000000 	nop
80016ba0:	8c4200bc 	lw	v0,188(v0)
80016ba4:	00000000 	nop
80016ba8:	00401825 	move	v1,v0
80016bac:	3c028007 	lui	v0,0x8007
80016bb0:	ac43b040 	sw	v1,-20416(v0)
80016bb4:	1000000a 	b	80016be0 <schedule+0x1d0>
80016bb8:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:54
		} 
		else
		{
			panic("schedule: no runnable envs");
80016bbc:	3c028002 	lui	v0,0x8002
80016bc0:	24479460 	addiu	a3,v0,-27552
80016bc4:	3c028002 	lui	v0,0x8002
80016bc8:	24469484 	addiu	a2,v0,-27516
80016bcc:	24050036 	li	a1,54
80016bd0:	3c028002 	lui	v0,0x8002
80016bd4:	2444947c 	addiu	a0,v0,-27524
80016bd8:	0c004f90 	jal	80013e40 <_panic>
80016bdc:	00000000 	nop
/home/git/21373271/21373271/kern/sched.c:57
		}		
	}
	count--;
80016be0:	3c028007 	lui	v0,0x8007
80016be4:	8c42b040 	lw	v0,-20416(v0)
80016be8:	00000000 	nop
80016bec:	2443ffff 	addiu	v1,v0,-1
80016bf0:	3c028007 	lui	v0,0x8007
80016bf4:	ac43b040 	sw	v1,-20416(v0)
/home/git/21373271/21373271/kern/sched.c:58
	env_run(e);
80016bf8:	8fc40010 	lw	a0,16(s8)
80016bfc:	0c004c39 	jal	800130e4 <env_run>
80016c00:	00000000 	nop
	...

80016c10 <sys_putchar>:
sys_putchar():
/home/git/21373271/21373271/kern/syscall_all.c:18
 * 	This function is used to print a character on screen.
 *
 * Pre-Condition:
 * 	`c` is the character you want to print.
 */
void sys_putchar(int c) {
80016c10:	27bdffe8 	addiu	sp,sp,-24
80016c14:	afbf0014 	sw	ra,20(sp)
80016c18:	afbe0010 	sw	s8,16(sp)
80016c1c:	03a0f025 	move	s8,sp
80016c20:	afc40018 	sw	a0,24(s8)
/home/git/21373271/21373271/kern/syscall_all.c:19
	printcharc((char)c);
80016c24:	8fc20018 	lw	v0,24(s8)
80016c28:	00000000 	nop
80016c2c:	00021600 	sll	v0,v0,0x18
80016c30:	00021603 	sra	v0,v0,0x18
80016c34:	00402025 	move	a0,v0
80016c38:	0c004634 	jal	800118d0 <printcharc>
80016c3c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:20
	return;
80016c40:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:21
}
80016c44:	03c0e825 	move	sp,s8
80016c48:	8fbf0014 	lw	ra,20(sp)
80016c4c:	8fbe0010 	lw	s8,16(sp)
80016c50:	27bd0018 	addiu	sp,sp,24
80016c54:	03e00008 	jr	ra
80016c58:	00000000 	nop

80016c5c <sys_print_cons>:
sys_print_cons():
/home/git/21373271/21373271/kern/syscall_all.c:29
 * 	This function is used to print a string of bytes on screen.
 *
 * Pre-Condition:
 * 	`s` is base address of the string, and `num` is length of the string.
 */
int sys_print_cons(const void *s, u_int num) {
80016c5c:	27bdffe0 	addiu	sp,sp,-32
80016c60:	afbf001c 	sw	ra,28(sp)
80016c64:	afbe0018 	sw	s8,24(sp)
80016c68:	03a0f025 	move	s8,sp
80016c6c:	afc40020 	sw	a0,32(s8)
80016c70:	afc50024 	sw	a1,36(s8)
/home/git/21373271/21373271/kern/syscall_all.c:30
	if (((u_int)s + num) > UTOP || ((u_int)s) >= UTOP || (s > s + num)) {
80016c74:	8fc30020 	lw	v1,32(s8)
80016c78:	8fc20024 	lw	v0,36(s8)
80016c7c:	00000000 	nop
80016c80:	00621821 	addu	v1,v1,v0
80016c84:	3c027f40 	lui	v0,0x7f40
80016c88:	34420001 	ori	v0,v0,0x1
80016c8c:	0062102b 	sltu	v0,v1,v0
80016c90:	1040000a 	beqz	v0,80016cbc <sys_print_cons+0x60>
80016c94:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:30 (discriminator 1)
80016c98:	8fc30020 	lw	v1,32(s8)
80016c9c:	3c027f40 	lui	v0,0x7f40
80016ca0:	0062102b 	sltu	v0,v1,v0
80016ca4:	10400005 	beqz	v0,80016cbc <sys_print_cons+0x60>
80016ca8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:30 (discriminator 2)
80016cac:	8fc20024 	lw	v0,36(s8)
80016cb0:	00000000 	nop
80016cb4:	04410004 	bgez	v0,80016cc8 <sys_print_cons+0x6c>
80016cb8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:31
		return -E_INVAL;
80016cbc:	2402fffd 	li	v0,-3
80016cc0:	10000018 	b	80016d24 <sys_print_cons+0xc8>
80016cc4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:34
	}
	u_int i;
	for (i = 0; i < num; i++) {
80016cc8:	afc00010 	sw	zero,16(s8)
80016ccc:	1000000e 	b	80016d08 <sys_print_cons+0xac>
80016cd0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:35 (discriminator 3)
		printcharc(((char *)s)[i]);
80016cd4:	8fc30020 	lw	v1,32(s8)
80016cd8:	8fc20010 	lw	v0,16(s8)
80016cdc:	00000000 	nop
80016ce0:	00621021 	addu	v0,v1,v0
80016ce4:	80420000 	lb	v0,0(v0)
80016ce8:	00000000 	nop
80016cec:	00402025 	move	a0,v0
80016cf0:	0c004634 	jal	800118d0 <printcharc>
80016cf4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:34 (discriminator 3)
	for (i = 0; i < num; i++) {
80016cf8:	8fc20010 	lw	v0,16(s8)
80016cfc:	00000000 	nop
80016d00:	24420001 	addiu	v0,v0,1
80016d04:	afc20010 	sw	v0,16(s8)
/home/git/21373271/21373271/kern/syscall_all.c:34 (discriminator 1)
80016d08:	8fc30010 	lw	v1,16(s8)
80016d0c:	8fc20024 	lw	v0,36(s8)
80016d10:	00000000 	nop
80016d14:	0062102b 	sltu	v0,v1,v0
80016d18:	1440ffee 	bnez	v0,80016cd4 <sys_print_cons+0x78>
80016d1c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:37
	}
	return 0;
80016d20:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:38
}
80016d24:	03c0e825 	move	sp,s8
80016d28:	8fbf001c 	lw	ra,28(sp)
80016d2c:	8fbe0018 	lw	s8,24(sp)
80016d30:	27bd0020 	addiu	sp,sp,32
80016d34:	03e00008 	jr	ra
80016d38:	00000000 	nop

80016d3c <sys_getenvid>:
sys_getenvid():
/home/git/21373271/21373271/kern/syscall_all.c:46
 *	This function provides the environment id of current process.
 *
 * Post-Condition:
 * 	return the current environment id
 */
u_int sys_getenvid(void) {
80016d3c:	27bdfff8 	addiu	sp,sp,-8
80016d40:	afbe0004 	sw	s8,4(sp)
80016d44:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/syscall_all.c:47
	return curenv->env_id;
80016d48:	3c028007 	lui	v0,0x8007
80016d4c:	8c42b000 	lw	v0,-20480(v0)
80016d50:	00000000 	nop
80016d54:	8c4200a0 	lw	v0,160(v0)
/home/git/21373271/21373271/kern/syscall_all.c:48
}
80016d58:	03c0e825 	move	sp,s8
80016d5c:	8fbe0004 	lw	s8,4(sp)
80016d60:	27bd0008 	addiu	sp,sp,8
80016d64:	03e00008 	jr	ra
80016d68:	00000000 	nop

80016d6c <sys_yield>:
sys_yield():
/home/git/21373271/21373271/kern/syscall_all.c:60
 *
 * Hint:
 *   This function will never return.
 */
// void sys_yield(void);
void __attribute__((noreturn)) sys_yield(void) {
80016d6c:	27bdffe8 	addiu	sp,sp,-24
80016d70:	afbf0014 	sw	ra,20(sp)
80016d74:	afbe0010 	sw	s8,16(sp)
80016d78:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/syscall_all.c:63
	// Hint: Just use 'schedule' with 'yield' set.
	/* Exercise 4.7: Your code here. */
	schedule(1);
80016d7c:	24040001 	li	a0,1
80016d80:	0c005a84 	jal	80016a10 <schedule>
80016d84:	00000000 	nop

80016d88 <sys_env_destroy>:
sys_env_destroy():
/home/git/21373271/21373271/kern/syscall_all.c:78
 *
 * Post-Condition:
 *  Returns 0 on success.
 *  Returns the original error if underlying calls fail.
 */
int sys_env_destroy(u_int envid) {
80016d88:	27bdffe0 	addiu	sp,sp,-32
80016d8c:	afbf001c 	sw	ra,28(sp)
80016d90:	afbe0018 	sw	s8,24(sp)
80016d94:	03a0f025 	move	s8,sp
80016d98:	afc40020 	sw	a0,32(s8)
/home/git/21373271/21373271/kern/syscall_all.c:80
	struct Env *e;
	try(envid2env(envid, &e, 1));
80016d9c:	27c20014 	addiu	v0,s8,20
80016da0:	24060001 	li	a2,1
80016da4:	00402825 	move	a1,v0
80016da8:	8fc40020 	lw	a0,32(s8)
80016dac:	0c004823 	jal	8001208c <envid2env>
80016db0:	00000000 	nop
80016db4:	afc20010 	sw	v0,16(s8)
80016db8:	8fc20010 	lw	v0,16(s8)
80016dbc:	00000000 	nop
80016dc0:	10400004 	beqz	v0,80016dd4 <sys_env_destroy+0x4c>
80016dc4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:80 (discriminator 1)
80016dc8:	8fc20010 	lw	v0,16(s8)
80016dcc:	10000015 	b	80016e24 <sys_env_destroy+0x9c>
80016dd0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:82

	printk("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
80016dd4:	3c028007 	lui	v0,0x8007
80016dd8:	8c42b000 	lw	v0,-20480(v0)
80016ddc:	00000000 	nop
80016de0:	8c4300a0 	lw	v1,160(v0)
80016de4:	8fc20014 	lw	v0,20(s8)
80016de8:	00000000 	nop
80016dec:	8c4200a0 	lw	v0,160(v0)
80016df0:	00000000 	nop
80016df4:	00403025 	move	a2,v0
80016df8:	00602825 	move	a1,v1
80016dfc:	3c028002 	lui	v0,0x8002
80016e00:	24449490 	addiu	a0,v0,-27504
80016e04:	0c005a0d 	jal	80016834 <printk>
80016e08:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:83
	env_destroy(e);
80016e0c:	8fc20014 	lw	v0,20(s8)
80016e10:	00000000 	nop
80016e14:	00402025 	move	a0,v0
80016e18:	0c004c11 	jal	80013044 <env_destroy>
80016e1c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:84
	return 0;
80016e20:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:85 (discriminator 1)
}
80016e24:	03c0e825 	move	sp,s8
80016e28:	8fbf001c 	lw	ra,28(sp)
80016e2c:	8fbe0018 	lw	s8,24(sp)
80016e30:	27bd0020 	addiu	sp,sp,32
80016e34:	03e00008 	jr	ra
80016e38:	00000000 	nop

80016e3c <sys_set_tlb_mod_entry>:
sys_set_tlb_mod_entry():
/home/git/21373271/21373271/kern/syscall_all.c:95
 * Post-Condition:
 *   The 'envid''s TLB Mod exception handler entry will be set to 'func'.
 *   Returns 0 on success.
 *   Returns the original error if underlying calls fail.
 */
int sys_set_tlb_mod_entry(u_int envid, u_int func) {
80016e3c:	27bdffe0 	addiu	sp,sp,-32
80016e40:	afbf001c 	sw	ra,28(sp)
80016e44:	afbe0018 	sw	s8,24(sp)
80016e48:	03a0f025 	move	s8,sp
80016e4c:	afc40020 	sw	a0,32(s8)
80016e50:	afc50024 	sw	a1,36(s8)
/home/git/21373271/21373271/kern/syscall_all.c:100
	struct Env *env;
	int ret;
	/* Step 1: Convert the envid to its corresponding 'struct Env *' using 'envid2env'. */
	/* Exercise 4.12: Your code here. (1/2) */
	if ( (ret = envid2env(envid,&env,1)) < 0 )
80016e54:	27c20014 	addiu	v0,s8,20
80016e58:	24060001 	li	a2,1
80016e5c:	00402825 	move	a1,v0
80016e60:	8fc40020 	lw	a0,32(s8)
80016e64:	0c004823 	jal	8001208c <envid2env>
80016e68:	00000000 	nop
80016e6c:	afc20010 	sw	v0,16(s8)
80016e70:	8fc20010 	lw	v0,16(s8)
80016e74:	00000000 	nop
80016e78:	04410004 	bgez	v0,80016e8c <sys_set_tlb_mod_entry+0x50>
80016e7c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:103
	{
		//printk("好像envid2env寄了?\n");
		return ret;
80016e80:	8fc20010 	lw	v0,16(s8)
80016e84:	10000006 	b	80016ea0 <sys_set_tlb_mod_entry+0x64>
80016e88:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:107
	}	
	/* Step 2: Set its 'env_user_tlb_mod_entry' to 'func'. */
	/* Exercise 4.12: Your code here. (2/2) */
	env->env_user_tlb_mod_entry = func;
80016e8c:	8fc20014 	lw	v0,20(s8)
80016e90:	8fc30024 	lw	v1,36(s8)
80016e94:	00000000 	nop
80016e98:	ac4300d4 	sw	v1,212(v0)
/home/git/21373271/21373271/kern/syscall_all.c:108
	return 0;
80016e9c:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:109 (discriminator 1)
}
80016ea0:	03c0e825 	move	sp,s8
80016ea4:	8fbf001c 	lw	ra,28(sp)
80016ea8:	8fbe0018 	lw	s8,24(sp)
80016eac:	27bd0020 	addiu	sp,sp,32
80016eb0:	03e00008 	jr	ra
80016eb4:	00000000 	nop

80016eb8 <is_illegal_va>:
is_illegal_va():
/home/git/21373271/21373271/kern/syscall_all.c:114

/* Overview:
 *   Check 'va' is illegal or not, according to include/mmu.h
 */
static inline int is_illegal_va(u_long va) {
80016eb8:	27bdfff8 	addiu	sp,sp,-8
80016ebc:	afbe0004 	sw	s8,4(sp)
80016ec0:	03a0f025 	move	s8,sp
80016ec4:	afc40008 	sw	a0,8(s8)
/home/git/21373271/21373271/kern/syscall_all.c:115
	return va < UTEMP || va >= UTOP;
80016ec8:	8fc30008 	lw	v1,8(s8)
80016ecc:	3c02003f 	lui	v0,0x3f
80016ed0:	3442e000 	ori	v0,v0,0xe000
80016ed4:	0062102b 	sltu	v0,v1,v0
80016ed8:	14400006 	bnez	v0,80016ef4 <is_illegal_va+0x3c>
80016edc:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:115 (discriminator 2)
80016ee0:	8fc30008 	lw	v1,8(s8)
80016ee4:	3c027f40 	lui	v0,0x7f40
80016ee8:	0062102b 	sltu	v0,v1,v0
80016eec:	14400004 	bnez	v0,80016f00 <is_illegal_va+0x48>
80016ef0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:115 (discriminator 3)
80016ef4:	24020001 	li	v0,1
80016ef8:	10000002 	b	80016f04 <is_illegal_va+0x4c>
80016efc:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:115 (discriminator 4)
80016f00:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:116 (discriminator 7)
}
80016f04:	03c0e825 	move	sp,s8
80016f08:	8fbe0004 	lw	s8,4(sp)
80016f0c:	27bd0008 	addiu	sp,sp,8
80016f10:	03e00008 	jr	ra
80016f14:	00000000 	nop

80016f18 <is_illegal_va_range>:
is_illegal_va_range():
/home/git/21373271/21373271/kern/syscall_all.c:118

static inline int is_illegal_va_range(u_long va, u_int len) {
80016f18:	27bdfff8 	addiu	sp,sp,-8
80016f1c:	afbe0004 	sw	s8,4(sp)
80016f20:	03a0f025 	move	s8,sp
80016f24:	afc40008 	sw	a0,8(s8)
80016f28:	afc5000c 	sw	a1,12(s8)
/home/git/21373271/21373271/kern/syscall_all.c:119
	if (len == 0) {
80016f2c:	8fc2000c 	lw	v0,12(s8)
80016f30:	00000000 	nop
80016f34:	14400004 	bnez	v0,80016f48 <is_illegal_va_range+0x30>
80016f38:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:120
		return 0;
80016f3c:	00001025 	move	v0,zero
80016f40:	1000001d 	b	80016fb8 <is_illegal_va_range+0xa0>
80016f44:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:122
	}
	return va + len < va || va < UTEMP || va + len > UTOP;
80016f48:	8fc30008 	lw	v1,8(s8)
80016f4c:	8fc2000c 	lw	v0,12(s8)
80016f50:	00000000 	nop
80016f54:	00621021 	addu	v0,v1,v0
80016f58:	8fc30008 	lw	v1,8(s8)
80016f5c:	00000000 	nop
80016f60:	0043102b 	sltu	v0,v0,v1
80016f64:	14400010 	bnez	v0,80016fa8 <is_illegal_va_range+0x90>
80016f68:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:122 (discriminator 2)
80016f6c:	8fc30008 	lw	v1,8(s8)
80016f70:	3c02003f 	lui	v0,0x3f
80016f74:	3442e000 	ori	v0,v0,0xe000
80016f78:	0062102b 	sltu	v0,v1,v0
80016f7c:	1440000a 	bnez	v0,80016fa8 <is_illegal_va_range+0x90>
80016f80:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:122 (discriminator 4)
80016f84:	8fc30008 	lw	v1,8(s8)
80016f88:	8fc2000c 	lw	v0,12(s8)
80016f8c:	00000000 	nop
80016f90:	00621821 	addu	v1,v1,v0
80016f94:	3c027f40 	lui	v0,0x7f40
80016f98:	34420001 	ori	v0,v0,0x1
80016f9c:	0062102b 	sltu	v0,v1,v0
80016fa0:	14400004 	bnez	v0,80016fb4 <is_illegal_va_range+0x9c>
80016fa4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:122 (discriminator 5)
80016fa8:	24020001 	li	v0,1
80016fac:	10000002 	b	80016fb8 <is_illegal_va_range+0xa0>
80016fb0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:122 (discriminator 6)
80016fb4:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:123
}
80016fb8:	03c0e825 	move	sp,s8
80016fbc:	8fbe0004 	lw	s8,4(sp)
80016fc0:	27bd0008 	addiu	sp,sp,8
80016fc4:	03e00008 	jr	ra
80016fc8:	00000000 	nop

80016fcc <sys_mem_alloc>:
sys_mem_alloc():
/home/git/21373271/21373271/kern/syscall_all.c:141
 *
 * Hint:
 *   You may want to use the following functions:
 *   'envid2env', 'page_alloc', 'page_insert', 'try' (macro)
 */
int sys_mem_alloc(u_int envid, u_int va, u_int perm) {
80016fcc:	27bdffd0 	addiu	sp,sp,-48
80016fd0:	afbf002c 	sw	ra,44(sp)
80016fd4:	afbe0028 	sw	s8,40(sp)
80016fd8:	03a0f025 	move	s8,sp
80016fdc:	afc40030 	sw	a0,48(s8)
80016fe0:	afc50034 	sw	a1,52(s8)
80016fe4:	afc60038 	sw	a2,56(s8)
/home/git/21373271/21373271/kern/syscall_all.c:144
	struct Env *env;
	struct Page *pp;
	int ret = 0;
80016fe8:	afc00018 	sw	zero,24(s8)
/home/git/21373271/21373271/kern/syscall_all.c:147
	/* Step 1: Check if 'va' is a legal user virtual address using 'is_illegal_va'. */
	/* Exercise 4.4: Your code here. (1/3) */
	if (is_illegal_va(va))
80016fec:	8fc40034 	lw	a0,52(s8)
80016ff0:	0c005bae 	jal	80016eb8 <is_illegal_va>
80016ff4:	00000000 	nop
80016ff8:	10400004 	beqz	v0,8001700c <sys_mem_alloc+0x40>
80016ffc:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:149
	{
		return -E_INVAL;
80017000:	2402fffd 	li	v0,-3
80017004:	1000002b 	b	800170b4 <sys_mem_alloc+0xe8>
80017008:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:154
	}
	/* Step 2: Convert the envid to its corresponding 'struct Env *' using 'envid2env'. */
	/* Hint: **Always** validate the permission in syscalls! */
	/* Exercise 4.4: Your code here. (2/3) */
	if ( (ret = envid2env(envid,&env,1)) < 0) //maybe always?
8001700c:	27c2001c 	addiu	v0,s8,28
80017010:	24060001 	li	a2,1
80017014:	00402825 	move	a1,v0
80017018:	8fc40030 	lw	a0,48(s8)
8001701c:	0c004823 	jal	8001208c <envid2env>
80017020:	00000000 	nop
80017024:	afc20018 	sw	v0,24(s8)
80017028:	8fc20018 	lw	v0,24(s8)
8001702c:	00000000 	nop
80017030:	04410004 	bgez	v0,80017044 <sys_mem_alloc+0x78>
80017034:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:156
	{
		return ret;
80017038:	8fc20018 	lw	v0,24(s8)
8001703c:	1000001d 	b	800170b4 <sys_mem_alloc+0xe8>
80017040:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:160
	}
	/* Step 3: Allocate a physical page using 'page_alloc'. */
	/* Exercise 4.4: Your code here. (3/3) */
	if ( (ret = page_alloc(&pp)) < 0 ) 
80017044:	27c20020 	addiu	v0,s8,32
80017048:	00402025 	move	a0,v0
8001704c:	0c00525c 	jal	80014970 <page_alloc>
80017050:	00000000 	nop
80017054:	afc20018 	sw	v0,24(s8)
80017058:	8fc20018 	lw	v0,24(s8)
8001705c:	00000000 	nop
80017060:	04410004 	bgez	v0,80017074 <sys_mem_alloc+0xa8>
80017064:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:162
	{
		return ret;
80017068:	8fc20018 	lw	v0,24(s8)
8001706c:	10000011 	b	800170b4 <sys_mem_alloc+0xe8>
80017070:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:165
	}
	/* Step 4: Map the allocated page at 'va' with permission 'perm' using 'page_insert'. */
	return page_insert(env->env_pgdir, env->env_asid, pp, va, perm);
80017074:	8fc2001c 	lw	v0,28(s8)
80017078:	00000000 	nop
8001707c:	8c4300b0 	lw	v1,176(v0)
80017080:	8fc2001c 	lw	v0,28(s8)
80017084:	00000000 	nop
80017088:	8c4400a4 	lw	a0,164(v0)
8001708c:	8fc50020 	lw	a1,32(s8)
80017090:	8fc20038 	lw	v0,56(s8)
80017094:	00000000 	nop
80017098:	afa20010 	sw	v0,16(sp)
8001709c:	8fc70034 	lw	a3,52(s8)
800170a0:	00a03025 	move	a2,a1
800170a4:	00802825 	move	a1,a0
800170a8:	00602025 	move	a0,v1
800170ac:	0c00533a 	jal	80014ce8 <page_insert>
800170b0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:166 (discriminator 1)
}
800170b4:	03c0e825 	move	sp,s8
800170b8:	8fbf002c 	lw	ra,44(sp)
800170bc:	8fbe0028 	lw	s8,40(sp)
800170c0:	27bd0030 	addiu	sp,sp,48
800170c4:	03e00008 	jr	ra
800170c8:	00000000 	nop

800170cc <sys_mem_map>:
sys_mem_map():
/home/git/21373271/21373271/kern/syscall_all.c:182
 *
 * Hint:
 *   You may want to use the following functions:
 *   'envid2env', 'page_lookup', 'page_insert'
 */
int sys_mem_map(u_int srcid, u_int srcva, u_int dstid, u_int dstva, u_int perm) {
800170cc:	27bdffc8 	addiu	sp,sp,-56
800170d0:	afbf0034 	sw	ra,52(sp)
800170d4:	afbe0030 	sw	s8,48(sp)
800170d8:	03a0f025 	move	s8,sp
800170dc:	afc40038 	sw	a0,56(s8)
800170e0:	afc5003c 	sw	a1,60(s8)
800170e4:	afc60040 	sw	a2,64(s8)
800170e8:	afc70044 	sw	a3,68(s8)
/home/git/21373271/21373271/kern/syscall_all.c:187
	struct Env *srcenv;
	struct Env *dstenv;
	struct Page *pp;
	Pte *ppte;
	int ret = 0;
800170ec:	afc00018 	sw	zero,24(s8)
/home/git/21373271/21373271/kern/syscall_all.c:191
	/* Step 1: Check if 'srcva' and 'dstva' are legal user virtual addresses using
	 * 'is_illegal_va'. */
	/* Exercise 4.5: Your code here. (1/4) */
	if (is_illegal_va(srcva) || is_illegal_va(dstva))
800170f0:	8fc4003c 	lw	a0,60(s8)
800170f4:	0c005bae 	jal	80016eb8 <is_illegal_va>
800170f8:	00000000 	nop
800170fc:	14400006 	bnez	v0,80017118 <sys_mem_map+0x4c>
80017100:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:191 (discriminator 1)
80017104:	8fc40044 	lw	a0,68(s8)
80017108:	0c005bae 	jal	80016eb8 <is_illegal_va>
8001710c:	00000000 	nop
80017110:	10400004 	beqz	v0,80017124 <sys_mem_map+0x58>
80017114:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:193
	{
		return -E_INVAL;
80017118:	2402fffd 	li	v0,-3
8001711c:	1000003d 	b	80017214 <sys_mem_map+0x148>
80017120:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:197
	}
	/* Step 2: Convert the 'srcid' to its corresponding 'struct Env *' using 'envid2env'. */
	/* Exercise 4.5: Your code here. (2/4) */
	if ( (ret = envid2env(srcid,&srcenv,1)) < 0 )
80017124:	27c20020 	addiu	v0,s8,32
80017128:	24060001 	li	a2,1
8001712c:	00402825 	move	a1,v0
80017130:	8fc40038 	lw	a0,56(s8)
80017134:	0c004823 	jal	8001208c <envid2env>
80017138:	00000000 	nop
8001713c:	afc20018 	sw	v0,24(s8)
80017140:	8fc20018 	lw	v0,24(s8)
80017144:	00000000 	nop
80017148:	04410004 	bgez	v0,8001715c <sys_mem_map+0x90>
8001714c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:199
	{
		return ret;
80017150:	8fc20018 	lw	v0,24(s8)
80017154:	1000002f 	b	80017214 <sys_mem_map+0x148>
80017158:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:203
	}
	/* Step 3: Convert the 'dstid' to its corresponding 'struct Env *' using 'envid2env'. */
	/* Exercise 4.5: Your code here. (3/4) */
	if ( (ret = envid2env(dstid,&dstenv,1)) < 0 )
8001715c:	27c20024 	addiu	v0,s8,36
80017160:	24060001 	li	a2,1
80017164:	00402825 	move	a1,v0
80017168:	8fc40040 	lw	a0,64(s8)
8001716c:	0c004823 	jal	8001208c <envid2env>
80017170:	00000000 	nop
80017174:	afc20018 	sw	v0,24(s8)
80017178:	8fc20018 	lw	v0,24(s8)
8001717c:	00000000 	nop
80017180:	04410004 	bgez	v0,80017194 <sys_mem_map+0xc8>
80017184:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:205
	{
		return ret;
80017188:	8fc20018 	lw	v0,24(s8)
8001718c:	10000021 	b	80017214 <sys_mem_map+0x148>
80017190:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:210
	}
	/* Step 4: Find the physical page mapped at 'srcva' in the address space of 'srcid'. */
	/* Return -E_INVAL if 'srcva' is not mapped. */
	/* Exercise 4.5: Your code here. (4/4) */
	if ( (pp =  page_lookup(srcenv->env_pgdir,srcva,&ppte)) == NULL)
80017194:	8fc20020 	lw	v0,32(s8)
80017198:	00000000 	nop
8001719c:	8c4200b0 	lw	v0,176(v0)
800171a0:	27c30028 	addiu	v1,s8,40
800171a4:	00603025 	move	a2,v1
800171a8:	8fc5003c 	lw	a1,60(s8)
800171ac:	00402025 	move	a0,v0
800171b0:	0c0053a2 	jal	80014e88 <page_lookup>
800171b4:	00000000 	nop
800171b8:	afc2001c 	sw	v0,28(s8)
800171bc:	8fc2001c 	lw	v0,28(s8)
800171c0:	00000000 	nop
800171c4:	14400004 	bnez	v0,800171d8 <sys_mem_map+0x10c>
800171c8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:212
	{
		return -E_INVAL;
800171cc:	2402fffd 	li	v0,-3
800171d0:	10000010 	b	80017214 <sys_mem_map+0x148>
800171d4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:215
	}
	/* Step 5: Map the physical page at 'dstva' in the address space of 'dstid'. */
	return page_insert(dstenv->env_pgdir, dstenv->env_asid, pp, dstva, perm);
800171d8:	8fc20024 	lw	v0,36(s8)
800171dc:	00000000 	nop
800171e0:	8c4300b0 	lw	v1,176(v0)
800171e4:	8fc20024 	lw	v0,36(s8)
800171e8:	00000000 	nop
800171ec:	8c4400a4 	lw	a0,164(v0)
800171f0:	8fc20048 	lw	v0,72(s8)
800171f4:	00000000 	nop
800171f8:	afa20010 	sw	v0,16(sp)
800171fc:	8fc70044 	lw	a3,68(s8)
80017200:	8fc6001c 	lw	a2,28(s8)
80017204:	00802825 	move	a1,a0
80017208:	00602025 	move	a0,v1
8001720c:	0c00533a 	jal	80014ce8 <page_insert>
80017210:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:216 (discriminator 1)
}
80017214:	03c0e825 	move	sp,s8
80017218:	8fbf0034 	lw	ra,52(sp)
8001721c:	8fbe0030 	lw	s8,48(sp)
80017220:	27bd0038 	addiu	sp,sp,56
80017224:	03e00008 	jr	ra
80017228:	00000000 	nop

8001722c <sys_mem_unmap>:
sys_mem_unmap():
/home/git/21373271/21373271/kern/syscall_all.c:228
 *   Return 0 on success.
 *   Return -E_BAD_ENV: 'checkperm' of 'envid2env' fails for 'envid'.
 *   Return -E_INVAL:   'va' is illegal.
 *   Return the original error when underlying calls fail.
 */
int sys_mem_unmap(u_int envid, u_int va) {
8001722c:	27bdffe0 	addiu	sp,sp,-32
80017230:	afbf001c 	sw	ra,28(sp)
80017234:	afbe0018 	sw	s8,24(sp)
80017238:	03a0f025 	move	s8,sp
8001723c:	afc40020 	sw	a0,32(s8)
80017240:	afc50024 	sw	a1,36(s8)
/home/git/21373271/21373271/kern/syscall_all.c:230
	struct Env *e;
	int ret = 0;
80017244:	afc00010 	sw	zero,16(s8)
/home/git/21373271/21373271/kern/syscall_all.c:233
	/* Step 1: Check if 'va' is a legal user virtual address using 'is_illegal_va'. */
	/* Exercise 4.6: Your code here. (1/2) */
	if (is_illegal_va(va))
80017248:	8fc40024 	lw	a0,36(s8)
8001724c:	0c005bae 	jal	80016eb8 <is_illegal_va>
80017250:	00000000 	nop
80017254:	10400004 	beqz	v0,80017268 <sys_mem_unmap+0x3c>
80017258:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:235
	{
		return -E_INVAL;
8001725c:	2402fffd 	li	v0,-3
80017260:	1000001b 	b	800172d0 <sys_mem_unmap+0xa4>
80017264:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:239
	}
	/* Step 2: Convert the envid to its corresponding 'struct Env *' using 'envid2env'. */
	/* Exercise 4.6: Your code here. (2/2) */
	if ( (ret = envid2env(envid,&e,1)) < 0)
80017268:	27c20014 	addiu	v0,s8,20
8001726c:	24060001 	li	a2,1
80017270:	00402825 	move	a1,v0
80017274:	8fc40020 	lw	a0,32(s8)
80017278:	0c004823 	jal	8001208c <envid2env>
8001727c:	00000000 	nop
80017280:	afc20010 	sw	v0,16(s8)
80017284:	8fc20010 	lw	v0,16(s8)
80017288:	00000000 	nop
8001728c:	04410004 	bgez	v0,800172a0 <sys_mem_unmap+0x74>
80017290:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:241
	{
		return ret;
80017294:	8fc20010 	lw	v0,16(s8)
80017298:	1000000d 	b	800172d0 <sys_mem_unmap+0xa4>
8001729c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:244
	}
	/* Step 3: Unmap the physical page at 'va' in the address space of 'envid'. */
	page_remove(e->env_pgdir, e->env_asid, va);
800172a0:	8fc20014 	lw	v0,20(s8)
800172a4:	00000000 	nop
800172a8:	8c4300b0 	lw	v1,176(v0)
800172ac:	8fc20014 	lw	v0,20(s8)
800172b0:	00000000 	nop
800172b4:	8c4200a4 	lw	v0,164(v0)
800172b8:	8fc60024 	lw	a2,36(s8)
800172bc:	00402825 	move	a1,v0
800172c0:	00602025 	move	a0,v1
800172c4:	0c005405 	jal	80015014 <page_remove>
800172c8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:245
	return 0;
800172cc:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:246 (discriminator 1)
}
800172d0:	03c0e825 	move	sp,s8
800172d4:	8fbf001c 	lw	ra,28(sp)
800172d8:	8fbe0018 	lw	s8,24(sp)
800172dc:	27bd0020 	addiu	sp,sp,32
800172e0:	03e00008 	jr	ra
800172e4:	00000000 	nop

800172e8 <sys_exofork>:
sys_exofork():
/home/git/21373271/21373271/kern/syscall_all.c:262
 *   Returns the original error if underlying calls fail.
 *
 * Hint:
 *   This syscall works as an essential step in user-space 'fork' and 'spawn'.
 */
int sys_exofork(void) {
800172e8:	27bdffe0 	addiu	sp,sp,-32
800172ec:	afbf001c 	sw	ra,28(sp)
800172f0:	afbe0018 	sw	s8,24(sp)
800172f4:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/syscall_all.c:267
	struct Env *e;
	int ret;
	/* Step 1: Allocate a new env using 'env_alloc'. */
	/* Exercise 4.9: Your code here. (1/4) */
	if ( (ret = env_alloc(&e,curenv->env_id)) < 0 )
800172f8:	3c028007 	lui	v0,0x8007
800172fc:	8c42b000 	lw	v0,-20480(v0)
80017300:	00000000 	nop
80017304:	8c4200a0 	lw	v0,160(v0)
80017308:	27c30014 	addiu	v1,s8,20
8001730c:	00402825 	move	a1,v0
80017310:	00602025 	move	a0,v1
80017314:	0c0049b1 	jal	800126c4 <env_alloc>
80017318:	00000000 	nop
8001731c:	afc20010 	sw	v0,16(s8)
80017320:	8fc20010 	lw	v0,16(s8)
80017324:	00000000 	nop
80017328:	04410004 	bgez	v0,8001733c <sys_exofork+0x54>
8001732c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:269
	{
		return ret;
80017330:	8fc20010 	lw	v0,16(s8)
80017334:	1000001a 	b	800173a0 <sys_exofork+0xb8>
80017338:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:273
	}
	/* Step 2: Copy the current Trapframe below 'KSTACKTOP' to the new env's 'env_tf'. */
	/* Exercise 4.9: Your code here. (2/4) */
	e->env_tf = *((struct Trapframe *)KSTACKTOP - 1);
8001733c:	3c02803f 	lui	v0,0x803f
80017340:	3442ff68 	ori	v0,v0,0xff68
80017344:	8fc30014 	lw	v1,20(s8)
80017348:	00402025 	move	a0,v0
8001734c:	24020098 	li	v0,152
80017350:	00403025 	move	a2,v0
80017354:	00802825 	move	a1,a0
80017358:	00602025 	move	a0,v1
8001735c:	0c0044a8 	jal	800112a0 <memcpy>
80017360:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:277
	//memcpy(&(e->env_tf),(void*)((struct Trapframe *)KSTACKTOP - 1),sizeof(struct Trapframe));
	/* Step 3: Set the new env's 'env_tf.regs[2]' to 0 to indicate the return value in child. */
	/* Exercise 4.9: Your code here. (3/4) */
	e->env_tf.regs[2] = 0;
80017364:	8fc20014 	lw	v0,20(s8)
80017368:	00000000 	nop
8001736c:	ac400008 	sw	zero,8(v0)
/home/git/21373271/21373271/kern/syscall_all.c:280
	/* Step 4: Set up the new env's 'env_status' and 'env_pri'.  */
	/* Exercise 4.9: Your code here. (4/4) */
	e->env_status = ENV_NOT_RUNNABLE;
80017370:	8fc20014 	lw	v0,20(s8)
80017374:	24030002 	li	v1,2
80017378:	ac4300ac 	sw	v1,172(v0)
/home/git/21373271/21373271/kern/syscall_all.c:281
	e->env_pri = curenv->env_pri;
8001737c:	3c028007 	lui	v0,0x8007
80017380:	8c43b000 	lw	v1,-20480(v0)
80017384:	8fc20014 	lw	v0,20(s8)
80017388:	8c6300bc 	lw	v1,188(v1)
8001738c:	00000000 	nop
80017390:	ac4300bc 	sw	v1,188(v0)
/home/git/21373271/21373271/kern/syscall_all.c:282
	return e->env_id;
80017394:	8fc20014 	lw	v0,20(s8)
80017398:	00000000 	nop
8001739c:	8c4200a0 	lw	v0,160(v0)
/home/git/21373271/21373271/kern/syscall_all.c:283 (discriminator 1)
}
800173a0:	03c0e825 	move	sp,s8
800173a4:	8fbf001c 	lw	ra,28(sp)
800173a8:	8fbe0018 	lw	s8,24(sp)
800173ac:	27bd0020 	addiu	sp,sp,32
800173b0:	03e00008 	jr	ra
800173b4:	00000000 	nop

800173b8 <sys_set_env_status>:
sys_set_env_status():
/home/git/21373271/21373271/kern/syscall_all.c:297
 *
 * Hint:
 *   The invariant that 'env_sched_list' contains and only contains all runnable envs should be
 *   maintained.
 */
int sys_set_env_status(u_int envid, u_int status) {
800173b8:	27bdffe0 	addiu	sp,sp,-32
800173bc:	afbf001c 	sw	ra,28(sp)
800173c0:	afbe0018 	sw	s8,24(sp)
800173c4:	03a0f025 	move	s8,sp
800173c8:	afc40020 	sw	a0,32(s8)
800173cc:	afc50024 	sw	a1,36(s8)
/home/git/21373271/21373271/kern/syscall_all.c:302
	struct Env *env;
	int ret;
	/* Step 1: Check if 'status' is valid. */
	/* Exercise 4.14: Your code here. (1/3) */
	if (status != ENV_RUNNABLE && status !=ENV_NOT_RUNNABLE)
800173d0:	8fc30024 	lw	v1,36(s8)
800173d4:	24020001 	li	v0,1
800173d8:	10620008 	beq	v1,v0,800173fc <sys_set_env_status+0x44>
800173dc:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:302 (discriminator 1)
800173e0:	8fc30024 	lw	v1,36(s8)
800173e4:	24020002 	li	v0,2
800173e8:	10620004 	beq	v1,v0,800173fc <sys_set_env_status+0x44>
800173ec:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:304
	{
		return -E_INVAL;
800173f0:	2402fffd 	li	v0,-3
800173f4:	1000005b 	b	80017564 <sys_set_env_status+0x1ac>
800173f8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:308
	}
	/* Step 2: Convert the envid to its corresponding 'struct Env *' using 'envid2env'. */
	/* Exercise 4.14: Your code here. (2/3) */
	if ( (ret = envid2env(envid,&env,1)) < 0 )
800173fc:	27c20014 	addiu	v0,s8,20
80017400:	24060001 	li	a2,1
80017404:	00402825 	move	a1,v0
80017408:	8fc40020 	lw	a0,32(s8)
8001740c:	0c004823 	jal	8001208c <envid2env>
80017410:	00000000 	nop
80017414:	afc20010 	sw	v0,16(s8)
80017418:	8fc20010 	lw	v0,16(s8)
8001741c:	00000000 	nop
80017420:	04410004 	bgez	v0,80017434 <sys_set_env_status+0x7c>
80017424:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:310
	{
		return ret;
80017428:	8fc20010 	lw	v0,16(s8)
8001742c:	1000004d 	b	80017564 <sys_set_env_status+0x1ac>
80017430:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:314
	}
	/* Step 3: Update 'env_sched_list' if the 'env_status' of 'env' is being changed. */
	/* Exercise 4.14: Your code here. (3/3) */
	if (status == ENV_RUNNABLE && env->env_status != ENV_RUNNABLE) 
80017434:	8fc30024 	lw	v1,36(s8)
80017438:	24020001 	li	v0,1
8001743c:	1462001e 	bne	v1,v0,800174b8 <sys_set_env_status+0x100>
80017440:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:314 (discriminator 1)
80017444:	8fc20014 	lw	v0,20(s8)
80017448:	00000000 	nop
8001744c:	8c4300ac 	lw	v1,172(v0)
80017450:	24020001 	li	v0,1
80017454:	10620018 	beq	v1,v0,800174b8 <sys_set_env_status+0x100>
80017458:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:316
	{
		TAILQ_INSERT_TAIL(&env_sched_list,env,env_sched_link);
8001745c:	8fc20014 	lw	v0,20(s8)
80017460:	00000000 	nop
80017464:	ac4000b4 	sw	zero,180(v0)
80017468:	8fc20014 	lw	v0,20(s8)
8001746c:	3c038007 	lui	v1,0x8007
80017470:	2463b004 	addiu	v1,v1,-20476
80017474:	8c630004 	lw	v1,4(v1)
80017478:	00000000 	nop
8001747c:	ac4300b8 	sw	v1,184(v0)
80017480:	3c028007 	lui	v0,0x8007
80017484:	2442b004 	addiu	v0,v0,-20476
80017488:	8c420004 	lw	v0,4(v0)
8001748c:	8fc30014 	lw	v1,20(s8)
80017490:	00000000 	nop
80017494:	ac430000 	sw	v1,0(v0)
80017498:	8fc20014 	lw	v0,20(s8)
8001749c:	00000000 	nop
800174a0:	244300b4 	addiu	v1,v0,180
800174a4:	3c028007 	lui	v0,0x8007
800174a8:	2442b004 	addiu	v0,v0,-20476
800174ac:	ac430004 	sw	v1,4(v0)
800174b0:	10000027 	b	80017550 <sys_set_env_status+0x198>
800174b4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:318
	}
	else if (status != ENV_RUNNABLE && env->env_status == ENV_RUNNABLE)
800174b8:	8fc30024 	lw	v1,36(s8)
800174bc:	24020001 	li	v0,1
800174c0:	10620023 	beq	v1,v0,80017550 <sys_set_env_status+0x198>
800174c4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:318 (discriminator 1)
800174c8:	8fc20014 	lw	v0,20(s8)
800174cc:	00000000 	nop
800174d0:	8c4300ac 	lw	v1,172(v0)
800174d4:	24020001 	li	v0,1
800174d8:	1462001d 	bne	v1,v0,80017550 <sys_set_env_status+0x198>
800174dc:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:320
	{
		TAILQ_REMOVE(&env_sched_list,env,env_sched_link);
800174e0:	8fc20014 	lw	v0,20(s8)
800174e4:	00000000 	nop
800174e8:	8c4200b4 	lw	v0,180(v0)
800174ec:	00000000 	nop
800174f0:	1040000a 	beqz	v0,8001751c <sys_set_env_status+0x164>
800174f4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:320 (discriminator 1)
800174f8:	8fc30014 	lw	v1,20(s8)
800174fc:	8fc20014 	lw	v0,20(s8)
80017500:	00000000 	nop
80017504:	8c4200b4 	lw	v0,180(v0)
80017508:	8c6300b8 	lw	v1,184(v1)
8001750c:	00000000 	nop
80017510:	ac4300b8 	sw	v1,184(v0)
80017514:	10000007 	b	80017534 <sys_set_env_status+0x17c>
80017518:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:320 (discriminator 2)
8001751c:	8fc20014 	lw	v0,20(s8)
80017520:	00000000 	nop
80017524:	8c4300b8 	lw	v1,184(v0)
80017528:	3c028007 	lui	v0,0x8007
8001752c:	2442b004 	addiu	v0,v0,-20476
80017530:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/syscall_all.c:320 (discriminator 4)
80017534:	8fc30014 	lw	v1,20(s8)
80017538:	8fc20014 	lw	v0,20(s8)
8001753c:	00000000 	nop
80017540:	8c4200b8 	lw	v0,184(v0)
80017544:	8c6300b4 	lw	v1,180(v1)
80017548:	00000000 	nop
8001754c:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/syscall_all.c:323
	}
	/* Step 4: Set the 'env_status' of 'env'. */
	env->env_status = status;
80017550:	8fc20014 	lw	v0,20(s8)
80017554:	8fc30024 	lw	v1,36(s8)
80017558:	00000000 	nop
8001755c:	ac4300ac 	sw	v1,172(v0)
/home/git/21373271/21373271/kern/syscall_all.c:324
	return 0;
80017560:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:325 (discriminator 1)
}
80017564:	03c0e825 	move	sp,s8
80017568:	8fbf001c 	lw	ra,28(sp)
8001756c:	8fbe0018 	lw	s8,24(sp)
80017570:	27bd0020 	addiu	sp,sp,32
80017574:	03e00008 	jr	ra
80017578:	00000000 	nop

8001757c <sys_set_trapframe>:
sys_set_trapframe():
/home/git/21373271/21373271/kern/syscall_all.c:337
 *  Returns 0 on success (except when the 'envid' is the current env, so no value could be
 * returned).
 *  Returns -E_INVAL if the environment cannot be manipulated or 'tf' is invalid.
 *  Returns the original error if other underlying calls fail.
 */
int sys_set_trapframe(u_int envid, struct Trapframe *tf) {
8001757c:	27bdffe0 	addiu	sp,sp,-32
80017580:	afbf001c 	sw	ra,28(sp)
80017584:	afbe0018 	sw	s8,24(sp)
80017588:	03a0f025 	move	s8,sp
8001758c:	afc40020 	sw	a0,32(s8)
80017590:	afc50024 	sw	a1,36(s8)
/home/git/21373271/21373271/kern/syscall_all.c:338
	if (is_illegal_va_range((u_long)tf, sizeof *tf)) {
80017594:	8fc20024 	lw	v0,36(s8)
80017598:	24050098 	li	a1,152
8001759c:	00402025 	move	a0,v0
800175a0:	0c005bc6 	jal	80016f18 <is_illegal_va_range>
800175a4:	00000000 	nop
800175a8:	10400004 	beqz	v0,800175bc <sys_set_trapframe+0x40>
800175ac:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:339
		return -E_INVAL;
800175b0:	2402fffd 	li	v0,-3
800175b4:	10000030 	b	80017678 <sys_set_trapframe+0xfc>
800175b8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:342
	}
	struct Env *env;
	try(envid2env(envid, &env, 1));
800175bc:	27c20014 	addiu	v0,s8,20
800175c0:	24060001 	li	a2,1
800175c4:	00402825 	move	a1,v0
800175c8:	8fc40020 	lw	a0,32(s8)
800175cc:	0c004823 	jal	8001208c <envid2env>
800175d0:	00000000 	nop
800175d4:	afc20010 	sw	v0,16(s8)
800175d8:	8fc20010 	lw	v0,16(s8)
800175dc:	00000000 	nop
800175e0:	10400004 	beqz	v0,800175f4 <sys_set_trapframe+0x78>
800175e4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:342 (discriminator 1)
800175e8:	8fc20010 	lw	v0,16(s8)
800175ec:	10000022 	b	80017678 <sys_set_trapframe+0xfc>
800175f0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:343
	if (env == curenv) {
800175f4:	8fc30014 	lw	v1,20(s8)
800175f8:	3c028007 	lui	v0,0x8007
800175fc:	8c42b000 	lw	v0,-20480(v0)
80017600:	00000000 	nop
80017604:	14620011 	bne	v1,v0,8001764c <sys_set_trapframe+0xd0>
80017608:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:344
		*((struct Trapframe *)KSTACKTOP - 1) = *tf;
8001760c:	3c02803f 	lui	v0,0x803f
80017610:	3443ff68 	ori	v1,v0,0xff68
80017614:	8fc20024 	lw	v0,36(s8)
80017618:	00000000 	nop
8001761c:	00402025 	move	a0,v0
80017620:	24020098 	li	v0,152
80017624:	00403025 	move	a2,v0
80017628:	00802825 	move	a1,a0
8001762c:	00602025 	move	a0,v1
80017630:	0c0044a8 	jal	800112a0 <memcpy>
80017634:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:347
		// return `tf->regs[2]` instead of 0, because return value overrides regs[2] on
		// current trapframe.
		return tf->regs[2];
80017638:	8fc20024 	lw	v0,36(s8)
8001763c:	00000000 	nop
80017640:	8c420008 	lw	v0,8(v0)
80017644:	1000000c 	b	80017678 <sys_set_trapframe+0xfc>
80017648:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:349
	} else {
		env->env_tf = *tf;
8001764c:	8fc30014 	lw	v1,20(s8)
80017650:	8fc20024 	lw	v0,36(s8)
80017654:	00000000 	nop
80017658:	00402025 	move	a0,v0
8001765c:	24020098 	li	v0,152
80017660:	00403025 	move	a2,v0
80017664:	00802825 	move	a1,a0
80017668:	00602025 	move	a0,v1
8001766c:	0c0044a8 	jal	800112a0 <memcpy>
80017670:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:350
		return 0;
80017674:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:352 (discriminator 1)
	}
}
80017678:	03c0e825 	move	sp,s8
8001767c:	8fbf001c 	lw	ra,28(sp)
80017680:	8fbe0018 	lw	s8,24(sp)
80017684:	27bd0020 	addiu	sp,sp,32
80017688:	03e00008 	jr	ra
8001768c:	00000000 	nop

80017690 <sys_panic>:
sys_panic():
/home/git/21373271/21373271/kern/syscall_all.c:360
 * 	Kernel panic with message `msg`.
 *
 * Post-Condition:
 * 	This function will halt the system.
 */
void sys_panic(char *msg) {
80017690:	27bdffd8 	addiu	sp,sp,-40
80017694:	afbf0024 	sw	ra,36(sp)
80017698:	afbe0020 	sw	s8,32(sp)
8001769c:	03a0f025 	move	s8,sp
800176a0:	afc40028 	sw	a0,40(s8)
/home/git/21373271/21373271/kern/syscall_all.c:361
	panic("%s", TRUP(msg));
800176a4:	8fc20028 	lw	v0,40(s8)
800176a8:	00000000 	nop
800176ac:	afc20018 	sw	v0,24(s8)
800176b0:	8fc30018 	lw	v1,24(s8)
800176b4:	3c028000 	lui	v0,0x8000
800176b8:	34420001 	ori	v0,v0,0x1
800176bc:	0062102b 	sltu	v0,v1,v0
800176c0:	10400004 	beqz	v0,800176d4 <sys_panic+0x44>
800176c4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:361 (discriminator 1)
800176c8:	8fc20018 	lw	v0,24(s8)
800176cc:	10000002 	b	800176d8 <sys_panic+0x48>
800176d0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:361 (discriminator 2)
800176d4:	3c028000 	lui	v0,0x8000
/home/git/21373271/21373271/kern/syscall_all.c:361 (discriminator 4)
800176d8:	afa20010 	sw	v0,16(sp)
800176dc:	3c028002 	lui	v0,0x8002
800176e0:	244794a8 	addiu	a3,v0,-27480
800176e4:	3c028002 	lui	v0,0x8002
800176e8:	244694bc 	addiu	a2,v0,-27460
800176ec:	24050169 	li	a1,361
800176f0:	3c028002 	lui	v0,0x8002
800176f4:	244494ac 	addiu	a0,v0,-27476
800176f8:	0c004f90 	jal	80013e40 <_panic>
800176fc:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:362 (discriminator 4)
}
80017700:	00000000 	nop
80017704:	03c0e825 	move	sp,s8
80017708:	8fbf0024 	lw	ra,36(sp)
8001770c:	8fbe0020 	lw	s8,32(sp)
80017710:	27bd0028 	addiu	sp,sp,40
80017714:	03e00008 	jr	ra
80017718:	00000000 	nop

8001771c <sys_ipc_recv>:
sys_ipc_recv():
/home/git/21373271/21373271/kern/syscall_all.c:372
 *
 * Post-Condition:
 *   Return 0 on success.
 *   Return -E_INVAL: 'dstva' is neither 0 nor a legal address.
 */
int sys_ipc_recv(u_int dstva) {
8001771c:	27bdffe8 	addiu	sp,sp,-24
80017720:	afbf0014 	sw	ra,20(sp)
80017724:	afbe0010 	sw	s8,16(sp)
80017728:	03a0f025 	move	s8,sp
8001772c:	afc40018 	sw	a0,24(s8)
/home/git/21373271/21373271/kern/syscall_all.c:374
	/* Step 1: Check if 'dstva' is either zero or a legal address. */
	if (dstva != 0 && is_illegal_va(dstva)) {
80017730:	8fc20018 	lw	v0,24(s8)
80017734:	00000000 	nop
80017738:	10400009 	beqz	v0,80017760 <sys_ipc_recv+0x44>
8001773c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:374 (discriminator 1)
80017740:	8fc40018 	lw	a0,24(s8)
80017744:	0c005bae 	jal	80016eb8 <is_illegal_va>
80017748:	00000000 	nop
8001774c:	10400004 	beqz	v0,80017760 <sys_ipc_recv+0x44>
80017750:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:375
		return -E_INVAL;
80017754:	2402fffd 	li	v0,-3
80017758:	10000036 	b	80017834 <sys_ipc_recv+0x118>
8001775c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:380
	}

	/* Step 2: Set 'curenv->env_ipc_recving' to 1. */
	/* Exercise 4.8: Your code here. (1/8) */
	curenv->env_ipc_recving = 1;
80017760:	3c028007 	lui	v0,0x8007
80017764:	8c42b000 	lw	v0,-20480(v0)
80017768:	24030001 	li	v1,1
8001776c:	ac4300c8 	sw	v1,200(v0)
/home/git/21373271/21373271/kern/syscall_all.c:383
	/* Step 3: Set the value of 'curenv->env_ipc_dstva'. */
	/* Exercise 4.8: Your code here. (2/8) */
	curenv->env_ipc_dstva = dstva;
80017770:	3c028007 	lui	v0,0x8007
80017774:	8c42b000 	lw	v0,-20480(v0)
80017778:	8fc30018 	lw	v1,24(s8)
8001777c:	00000000 	nop
80017780:	ac4300cc 	sw	v1,204(v0)
/home/git/21373271/21373271/kern/syscall_all.c:387
	/* Step 4: Set the status of 'curenv' to 'ENV_NOT_RUNNABLE' and remove it from
	 * 'env_sched_list'. */
	/* Exercise 4.8: Your code here. (3/8) */
	curenv->env_status = ENV_NOT_RUNNABLE;
80017784:	3c028007 	lui	v0,0x8007
80017788:	8c42b000 	lw	v0,-20480(v0)
8001778c:	24030002 	li	v1,2
80017790:	ac4300ac 	sw	v1,172(v0)
/home/git/21373271/21373271/kern/syscall_all.c:388
	TAILQ_REMOVE(&env_sched_list,curenv,env_sched_link);
80017794:	3c028007 	lui	v0,0x8007
80017798:	8c42b000 	lw	v0,-20480(v0)
8001779c:	00000000 	nop
800177a0:	8c4200b4 	lw	v0,180(v0)
800177a4:	00000000 	nop
800177a8:	1040000c 	beqz	v0,800177dc <sys_ipc_recv+0xc0>
800177ac:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:388 (discriminator 1)
800177b0:	3c028007 	lui	v0,0x8007
800177b4:	8c43b000 	lw	v1,-20480(v0)
800177b8:	3c028007 	lui	v0,0x8007
800177bc:	8c42b000 	lw	v0,-20480(v0)
800177c0:	00000000 	nop
800177c4:	8c4200b4 	lw	v0,180(v0)
800177c8:	8c6300b8 	lw	v1,184(v1)
800177cc:	00000000 	nop
800177d0:	ac4300b8 	sw	v1,184(v0)
800177d4:	10000008 	b	800177f8 <sys_ipc_recv+0xdc>
800177d8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:388 (discriminator 2)
800177dc:	3c028007 	lui	v0,0x8007
800177e0:	8c42b000 	lw	v0,-20480(v0)
800177e4:	00000000 	nop
800177e8:	8c4300b8 	lw	v1,184(v0)
800177ec:	3c028007 	lui	v0,0x8007
800177f0:	2442b004 	addiu	v0,v0,-20476
800177f4:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/syscall_all.c:388 (discriminator 4)
800177f8:	3c028007 	lui	v0,0x8007
800177fc:	8c43b000 	lw	v1,-20480(v0)
80017800:	3c028007 	lui	v0,0x8007
80017804:	8c42b000 	lw	v0,-20480(v0)
80017808:	00000000 	nop
8001780c:	8c4200b8 	lw	v0,184(v0)
80017810:	8c6300b4 	lw	v1,180(v1)
80017814:	00000000 	nop
80017818:	ac430000 	sw	v1,0(v0)
/home/git/21373271/21373271/kern/syscall_all.c:390 (discriminator 4)
	/* Step 5: Give up the CPU and block until a message is received. */
	((struct Trapframe *)KSTACKTOP - 1)->regs[2] = 0;
8001781c:	3c02803f 	lui	v0,0x803f
80017820:	3442ff68 	ori	v0,v0,0xff68
80017824:	ac400008 	sw	zero,8(v0)
/home/git/21373271/21373271/kern/syscall_all.c:391 (discriminator 4)
	schedule(1);
80017828:	24040001 	li	a0,1
8001782c:	0c005a84 	jal	80016a10 <schedule>
80017830:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:392 (discriminator 1)
}
80017834:	03c0e825 	move	sp,s8
80017838:	8fbf0014 	lw	ra,20(sp)
8001783c:	8fbe0010 	lw	s8,16(sp)
80017840:	27bd0018 	addiu	sp,sp,24
80017844:	03e00008 	jr	ra
80017848:	00000000 	nop

8001784c <sys_ipc_try_send>:
sys_ipc_try_send():
/home/git/21373271/21373271/kern/syscall_all.c:410
 *
 *   Return -E_IPC_NOT_RECV if the target has not been waiting for an IPC message with
 *   'sys_ipc_recv'.
 *   Return the original error when underlying calls fail.
 */
int sys_ipc_try_send(u_int envid, u_int value, u_int srcva, u_int perm) {
8001784c:	27bdffd0 	addiu	sp,sp,-48
80017850:	afbf002c 	sw	ra,44(sp)
80017854:	afbe0028 	sw	s8,40(sp)
80017858:	03a0f025 	move	s8,sp
8001785c:	afc40030 	sw	a0,48(s8)
80017860:	afc50034 	sw	a1,52(s8)
80017864:	afc60038 	sw	a2,56(s8)
80017868:	afc7003c 	sw	a3,60(s8)
/home/git/21373271/21373271/kern/syscall_all.c:414
	struct Env *e;
	struct Page *p;
	Pte * ppte;
	int ret = 0;
8001786c:	afc00018 	sw	zero,24(s8)
/home/git/21373271/21373271/kern/syscall_all.c:417
	/* Step 1: Check if 'srcva' is either zero or a legal address. */
	/* Exercise 4.8: Your code here. (4/8) */
	if ( srcva != 0 && is_illegal_va(srcva) )
80017870:	8fc20038 	lw	v0,56(s8)
80017874:	00000000 	nop
80017878:	10400009 	beqz	v0,800178a0 <sys_ipc_try_send+0x54>
8001787c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:417 (discriminator 1)
80017880:	8fc40038 	lw	a0,56(s8)
80017884:	0c005bae 	jal	80016eb8 <is_illegal_va>
80017888:	00000000 	nop
8001788c:	10400004 	beqz	v0,800178a0 <sys_ipc_try_send+0x54>
80017890:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:419
	{
		return -E_INVAL;
80017894:	2402fffd 	li	v0,-3
80017898:	10000075 	b	80017a70 <sys_ipc_try_send+0x224>
8001789c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:425
	}
	/* Step 2: Convert 'envid' to 'struct Env *e'. */
	/* This is the only syscall where the 'envid2env' should be used with 'checkperm' UNSET,
	 * because the target env is not restricted to 'curenv''s children. */
	/* Exercise 4.8: Your code here. (5/8) */
	if ( (ret = envid2env(envid,&e,0)) < 0 )
800178a0:	27c20020 	addiu	v0,s8,32
800178a4:	00003025 	move	a2,zero
800178a8:	00402825 	move	a1,v0
800178ac:	8fc40030 	lw	a0,48(s8)
800178b0:	0c004823 	jal	8001208c <envid2env>
800178b4:	00000000 	nop
800178b8:	afc20018 	sw	v0,24(s8)
800178bc:	8fc20018 	lw	v0,24(s8)
800178c0:	00000000 	nop
800178c4:	04410004 	bgez	v0,800178d8 <sys_ipc_try_send+0x8c>
800178c8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:427
	{
		return ret; 
800178cc:	8fc20018 	lw	v0,24(s8)
800178d0:	10000067 	b	80017a70 <sys_ipc_try_send+0x224>
800178d4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:431
	}
	/* Step 3: Check if the target is waiting for a message. */
	/* Exercise 4.8: Your code here. (6/8) */
	if ( e->env_ipc_recving == 0 )
800178d8:	8fc20020 	lw	v0,32(s8)
800178dc:	00000000 	nop
800178e0:	8c4200c8 	lw	v0,200(v0)
800178e4:	00000000 	nop
800178e8:	14400004 	bnez	v0,800178fc <sys_ipc_try_send+0xb0>
800178ec:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:433
	{
		return -E_IPC_NOT_RECV;
800178f0:	2402fff9 	li	v0,-7
800178f4:	1000005e 	b	80017a70 <sys_ipc_try_send+0x224>
800178f8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:436
	}
	/* Step 4: Set the target's ipc fields. */
	e->env_ipc_value = value;
800178fc:	8fc20020 	lw	v0,32(s8)
80017900:	8fc30034 	lw	v1,52(s8)
80017904:	00000000 	nop
80017908:	ac4300c0 	sw	v1,192(v0)
/home/git/21373271/21373271/kern/syscall_all.c:437
	e->env_ipc_from = curenv->env_id;
8001790c:	3c028007 	lui	v0,0x8007
80017910:	8c43b000 	lw	v1,-20480(v0)
80017914:	8fc20020 	lw	v0,32(s8)
80017918:	8c6300a0 	lw	v1,160(v1)
8001791c:	00000000 	nop
80017920:	ac4300c4 	sw	v1,196(v0)
/home/git/21373271/21373271/kern/syscall_all.c:438
	e->env_ipc_perm = PTE_V | perm;
80017924:	8fc20020 	lw	v0,32(s8)
80017928:	8fc3003c 	lw	v1,60(s8)
8001792c:	00000000 	nop
80017930:	34630200 	ori	v1,v1,0x200
80017934:	ac4300d0 	sw	v1,208(v0)
/home/git/21373271/21373271/kern/syscall_all.c:439
	e->env_ipc_recving = 0;
80017938:	8fc20020 	lw	v0,32(s8)
8001793c:	00000000 	nop
80017940:	ac4000c8 	sw	zero,200(v0)
/home/git/21373271/21373271/kern/syscall_all.c:444

	/* Step 5: Set the target's status to 'ENV_RUNNABLE' again and insert it to the tail of
	 * 'env_sched_list'. */
	/* Exercise 4.8: Your code here. (7/8) */
	e->env_status = ENV_RUNNABLE;
80017944:	8fc20020 	lw	v0,32(s8)
80017948:	24030001 	li	v1,1
8001794c:	ac4300ac 	sw	v1,172(v0)
/home/git/21373271/21373271/kern/syscall_all.c:445
	TAILQ_INSERT_TAIL(&env_sched_list,e,env_sched_link);
80017950:	8fc20020 	lw	v0,32(s8)
80017954:	00000000 	nop
80017958:	ac4000b4 	sw	zero,180(v0)
8001795c:	8fc20020 	lw	v0,32(s8)
80017960:	3c038007 	lui	v1,0x8007
80017964:	2463b004 	addiu	v1,v1,-20476
80017968:	8c630004 	lw	v1,4(v1)
8001796c:	00000000 	nop
80017970:	ac4300b8 	sw	v1,184(v0)
80017974:	3c028007 	lui	v0,0x8007
80017978:	2442b004 	addiu	v0,v0,-20476
8001797c:	8c420004 	lw	v0,4(v0)
80017980:	8fc30020 	lw	v1,32(s8)
80017984:	00000000 	nop
80017988:	ac430000 	sw	v1,0(v0)
8001798c:	8fc20020 	lw	v0,32(s8)
80017990:	00000000 	nop
80017994:	244300b4 	addiu	v1,v0,180
80017998:	3c028007 	lui	v0,0x8007
8001799c:	2442b004 	addiu	v0,v0,-20476
800179a0:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/syscall_all.c:449
	/* Step 6: If 'srcva' is not zero, map the page at 'srcva' in 'curenv' to 'e->env_ipc_dstva'
	 * in 'e'. */
	/* Return -E_INVAL if 'srcva' is not zero and not mapped in 'curenv'. */
	if (srcva != 0) {
800179a4:	8fc20038 	lw	v0,56(s8)
800179a8:	00000000 	nop
800179ac:	1040002f 	beqz	v0,80017a6c <sys_ipc_try_send+0x220>
800179b0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:452
		/* Exercise 4.8: Your code here. (8/8) */
		//p = page_lookup(curenv->pgdir,srcva,&ppte);
		if ( (p = page_lookup(curenv->env_pgdir,srcva,&ppte)) == NULL )
800179b4:	3c028007 	lui	v0,0x8007
800179b8:	8c42b000 	lw	v0,-20480(v0)
800179bc:	00000000 	nop
800179c0:	8c4200b0 	lw	v0,176(v0)
800179c4:	27c30024 	addiu	v1,s8,36
800179c8:	00603025 	move	a2,v1
800179cc:	8fc50038 	lw	a1,56(s8)
800179d0:	00402025 	move	a0,v0
800179d4:	0c0053a2 	jal	80014e88 <page_lookup>
800179d8:	00000000 	nop
800179dc:	afc2001c 	sw	v0,28(s8)
800179e0:	8fc2001c 	lw	v0,28(s8)
800179e4:	00000000 	nop
800179e8:	14400004 	bnez	v0,800179fc <sys_ipc_try_send+0x1b0>
800179ec:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:454
		{
			return -E_INVAL;
800179f0:	2402fffd 	li	v0,-3
800179f4:	1000001e 	b	80017a70 <sys_ipc_try_send+0x224>
800179f8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:456
		}
		if ( (ret = page_insert(e->env_pgdir,e->env_asid,p,e->env_ipc_dstva,e->env_ipc_perm)) < 0)
800179fc:	8fc20020 	lw	v0,32(s8)
80017a00:	00000000 	nop
80017a04:	8c4300b0 	lw	v1,176(v0)
80017a08:	8fc20020 	lw	v0,32(s8)
80017a0c:	00000000 	nop
80017a10:	8c4400a4 	lw	a0,164(v0)
80017a14:	8fc20020 	lw	v0,32(s8)
80017a18:	00000000 	nop
80017a1c:	8c4500cc 	lw	a1,204(v0)
80017a20:	8fc20020 	lw	v0,32(s8)
80017a24:	00000000 	nop
80017a28:	8c4200d0 	lw	v0,208(v0)
80017a2c:	00000000 	nop
80017a30:	afa20010 	sw	v0,16(sp)
80017a34:	00a03825 	move	a3,a1
80017a38:	8fc6001c 	lw	a2,28(s8)
80017a3c:	00802825 	move	a1,a0
80017a40:	00602025 	move	a0,v1
80017a44:	0c00533a 	jal	80014ce8 <page_insert>
80017a48:	00000000 	nop
80017a4c:	afc20018 	sw	v0,24(s8)
80017a50:	8fc20018 	lw	v0,24(s8)
80017a54:	00000000 	nop
80017a58:	04410004 	bgez	v0,80017a6c <sys_ipc_try_send+0x220>
80017a5c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:458
		{
			return ret;
80017a60:	8fc20018 	lw	v0,24(s8)
80017a64:	10000002 	b	80017a70 <sys_ipc_try_send+0x224>
80017a68:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:461
		}	
	}
	return 0;
80017a6c:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:462 (discriminator 1)
}
80017a70:	03c0e825 	move	sp,s8
80017a74:	8fbf002c 	lw	ra,44(sp)
80017a78:	8fbe0028 	lw	s8,40(sp)
80017a7c:	27bd0030 	addiu	sp,sp,48
80017a80:	03e00008 	jr	ra
80017a84:	00000000 	nop

80017a88 <dfs>:
dfs():
/home/git/21373271/21373271/kern/syscall_all.c:464

int dfs(struct Env *e) {
80017a88:	27bdffe8 	addiu	sp,sp,-24
80017a8c:	afbf0014 	sw	ra,20(sp)
80017a90:	afbe0010 	sw	s8,16(sp)
80017a94:	03a0f025 	move	s8,sp
80017a98:	afc40018 	sw	a0,24(s8)
/home/git/21373271/21373271/kern/syscall_all.c:466
	//struct Env * envs = get_envs();
	if (e->env_parent_id == curenv->env_id || e->env_parent_id == 0) {
80017a9c:	8fc20018 	lw	v0,24(s8)
80017aa0:	00000000 	nop
80017aa4:	8c4300a8 	lw	v1,168(v0)
80017aa8:	3c028007 	lui	v0,0x8007
80017aac:	8c42b000 	lw	v0,-20480(v0)
80017ab0:	00000000 	nop
80017ab4:	8c4200a0 	lw	v0,160(v0)
80017ab8:	00000000 	nop
80017abc:	10620007 	beq	v1,v0,80017adc <dfs+0x54>
80017ac0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:466 (discriminator 1)
80017ac4:	8fc20018 	lw	v0,24(s8)
80017ac8:	00000000 	nop
80017acc:	8c4200a8 	lw	v0,168(v0)
80017ad0:	00000000 	nop
80017ad4:	14400006 	bnez	v0,80017af0 <dfs+0x68>
80017ad8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:467
		return e->env_parent_id;
80017adc:	8fc20018 	lw	v0,24(s8)
80017ae0:	00000000 	nop
80017ae4:	8c4200a8 	lw	v0,168(v0)
80017ae8:	10000012 	b	80017b34 <dfs+0xac>
80017aec:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:469
	}
	dfs(&envs[ENVX(e->env_parent_id)]);
80017af0:	8fc20018 	lw	v0,24(s8)
80017af4:	00000000 	nop
80017af8:	8c4200a8 	lw	v0,168(v0)
80017afc:	00000000 	nop
80017b00:	304303ff 	andi	v1,v0,0x3ff
80017b04:	00601025 	move	v0,v1
80017b08:	000210c0 	sll	v0,v0,0x3
80017b0c:	00431023 	subu	v0,v0,v1
80017b10:	000210c0 	sll	v0,v0,0x3
80017b14:	00431023 	subu	v0,v0,v1
80017b18:	00021080 	sll	v0,v0,0x2
80017b1c:	00401825 	move	v1,v0
80017b20:	3c027f40 	lui	v0,0x7f40
80017b24:	00621021 	addu	v0,v1,v0
80017b28:	00402025 	move	a0,v0
80017b2c:	0c005ea2 	jal	80017a88 <dfs>
80017b30:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:470
}
80017b34:	03c0e825 	move	sp,s8
80017b38:	8fbf0014 	lw	ra,20(sp)
80017b3c:	8fbe0010 	lw	s8,16(sp)
80017b40:	27bd0018 	addiu	sp,sp,24
80017b44:	03e00008 	jr	ra
80017b48:	00000000 	nop

80017b4c <sys_ipc_try_send_father>:
sys_ipc_try_send_father():
/home/git/21373271/21373271/kern/syscall_all.c:473


int sys_ipc_try_send_father(u_int value, u_int srcva, u_int perm) {
80017b4c:	27bdfe30 	addiu	sp,sp,-464
80017b50:	afbf01cc 	sw	ra,460(sp)
80017b54:	afbe01c8 	sw	s8,456(sp)
80017b58:	03a0f025 	move	s8,sp
80017b5c:	afc401d0 	sw	a0,464(s8)
80017b60:	afc501d4 	sw	a1,468(s8)
80017b64:	afc601d8 	sw	a2,472(s8)
/home/git/21373271/21373271/kern/syscall_all.c:477
	struct Env *e;
	struct Page *p;
	Pte * ppte;
	int ret = 0;
80017b68:	afc00024 	sw	zero,36(s8)
/home/git/21373271/21373271/kern/syscall_all.c:480
	struct Env *env_mem[100];
	//struct Env * envs = get_envs();
	int mem_count = 0;
80017b6c:	afc00018 	sw	zero,24(s8)
/home/git/21373271/21373271/kern/syscall_all.c:483
	/* Step 1: Check if 'srcva' is either zero or a legal address. */
	/* Exercise 4.8: Your code here. (4/8) */
	if ( srcva != 0 && is_illegal_va(srcva) )
80017b70:	8fc201d4 	lw	v0,468(s8)
80017b74:	00000000 	nop
80017b78:	10400009 	beqz	v0,80017ba0 <sys_ipc_try_send_father+0x54>
80017b7c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:483 (discriminator 1)
80017b80:	8fc401d4 	lw	a0,468(s8)
80017b84:	0c005bae 	jal	80016eb8 <is_illegal_va>
80017b88:	00000000 	nop
80017b8c:	10400004 	beqz	v0,80017ba0 <sys_ipc_try_send_father+0x54>
80017b90:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:485
	{
		return -E_INVAL;
80017b94:	2402fffd 	li	v0,-3
80017b98:	100000b7 	b	80017e78 <sys_ipc_try_send_father+0x32c>
80017b9c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:491
	}
	/* Step 2: Convert 'envid' to 'struct Env *e'. */
	/* This is the only syscall where the 'envid2env' should be used with 'checkperm' UNSET,
	 * because the target env is not restricted to 'curenv''s children. */
	/* Exercise 4.8: Your code here. (5/8) */
	e = curenv;
80017ba0:	3c028007 	lui	v0,0x8007
80017ba4:	8c42b000 	lw	v0,-20480(v0)
80017ba8:	00000000 	nop
80017bac:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/kern/syscall_all.c:492
	for (int i = 0;i < NENV;i++) {
80017bb0:	afc0001c 	sw	zero,28(s8)
80017bb4:	10000037 	b	80017c94 <sys_ipc_try_send_father+0x148>
80017bb8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:493
		struct Env *tmp = &envs[i];
80017bbc:	8fc3001c 	lw	v1,28(s8)
80017bc0:	00000000 	nop
80017bc4:	00601025 	move	v0,v1
80017bc8:	000210c0 	sll	v0,v0,0x3
80017bcc:	00431023 	subu	v0,v0,v1
80017bd0:	000210c0 	sll	v0,v0,0x3
80017bd4:	00431023 	subu	v0,v0,v1
80017bd8:	00021080 	sll	v0,v0,0x2
80017bdc:	00401825 	move	v1,v0
80017be0:	3c027f40 	lui	v0,0x7f40
80017be4:	00621021 	addu	v0,v1,v0
80017be8:	afc20030 	sw	v0,48(s8)
/home/git/21373271/21373271/kern/syscall_all.c:494
		if (tmp->env_status != ENV_FREE) {
80017bec:	8fc20030 	lw	v0,48(s8)
80017bf0:	00000000 	nop
80017bf4:	8c4200ac 	lw	v0,172(v0)
80017bf8:	00000000 	nop
80017bfc:	10400021 	beqz	v0,80017c84 <sys_ipc_try_send_father+0x138>
80017c00:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:495
			if ( dfs(tmp) == curenv->env_id) {
80017c04:	8fc40030 	lw	a0,48(s8)
80017c08:	0c005ea2 	jal	80017a88 <dfs>
80017c0c:	00000000 	nop
80017c10:	00401825 	move	v1,v0
80017c14:	3c028007 	lui	v0,0x8007
80017c18:	8c42b000 	lw	v0,-20480(v0)
80017c1c:	00000000 	nop
80017c20:	8c4200a0 	lw	v0,160(v0)
80017c24:	00000000 	nop
80017c28:	14620016 	bne	v1,v0,80017c84 <sys_ipc_try_send_father+0x138>
80017c2c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:496
				env_mem[mem_count] = tmp;
80017c30:	8fc20018 	lw	v0,24(s8)
80017c34:	00000000 	nop
80017c38:	00021080 	sll	v0,v0,0x2
80017c3c:	27c30018 	addiu	v1,s8,24
80017c40:	00621021 	addu	v0,v1,v0
80017c44:	8fc30030 	lw	v1,48(s8)
80017c48:	00000000 	nop
80017c4c:	ac430020 	sw	v1,32(v0)
/home/git/21373271/21373271/kern/syscall_all.c:497
				mem_count++;
80017c50:	8fc20018 	lw	v0,24(s8)
80017c54:	00000000 	nop
80017c58:	24420001 	addiu	v0,v0,1
80017c5c:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/syscall_all.c:498
				if (tmp->env_ipc_recving == 0) {
80017c60:	8fc20030 	lw	v0,48(s8)
80017c64:	00000000 	nop
80017c68:	8c4200c8 	lw	v0,200(v0)
80017c6c:	00000000 	nop
80017c70:	14400004 	bnez	v0,80017c84 <sys_ipc_try_send_father+0x138>
80017c74:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:499
					return -E_IPC_NOT_RECV;
80017c78:	2402fff9 	li	v0,-7
80017c7c:	1000007e 	b	80017e78 <sys_ipc_try_send_father+0x32c>
80017c80:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:492 (discriminator 2)
	for (int i = 0;i < NENV;i++) {
80017c84:	8fc2001c 	lw	v0,28(s8)
80017c88:	00000000 	nop
80017c8c:	24420001 	addiu	v0,v0,1
80017c90:	afc2001c 	sw	v0,28(s8)
/home/git/21373271/21373271/kern/syscall_all.c:492 (discriminator 1)
80017c94:	8fc2001c 	lw	v0,28(s8)
80017c98:	00000000 	nop
80017c9c:	28420400 	slti	v0,v0,1024
80017ca0:	1440ffc6 	bnez	v0,80017bbc <sys_ipc_try_send_father+0x70>
80017ca4:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:507
		}
	}
	/* Step 3: Check if the target is waiting for a message. */
	/* Exercise 4.8: Your code here. (6/8) */
	
	for (int i = 0 ;i< mem_count;i++) {
80017ca8:	afc00020 	sw	zero,32(s8)
80017cac:	1000006b 	b	80017e5c <sys_ipc_try_send_father+0x310>
80017cb0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:508
		e = env_mem[i];
80017cb4:	8fc20020 	lw	v0,32(s8)
80017cb8:	00000000 	nop
80017cbc:	00021080 	sll	v0,v0,0x2
80017cc0:	27c30018 	addiu	v1,s8,24
80017cc4:	00621021 	addu	v0,v1,v0
80017cc8:	8c420020 	lw	v0,32(v0)
80017ccc:	00000000 	nop
80017cd0:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/kern/syscall_all.c:509
		e->env_ipc_value = value;
80017cd4:	8fc20028 	lw	v0,40(s8)
80017cd8:	8fc301d0 	lw	v1,464(s8)
80017cdc:	00000000 	nop
80017ce0:	ac4300c0 	sw	v1,192(v0)
/home/git/21373271/21373271/kern/syscall_all.c:510
		e->env_ipc_from = curenv->env_id;
80017ce4:	3c028007 	lui	v0,0x8007
80017ce8:	8c42b000 	lw	v0,-20480(v0)
80017cec:	00000000 	nop
80017cf0:	8c4300a0 	lw	v1,160(v0)
80017cf4:	8fc20028 	lw	v0,40(s8)
80017cf8:	00000000 	nop
80017cfc:	ac4300c4 	sw	v1,196(v0)
/home/git/21373271/21373271/kern/syscall_all.c:511
		e->env_ipc_perm = PTE_V | perm;
80017d00:	8fc201d8 	lw	v0,472(s8)
80017d04:	00000000 	nop
80017d08:	34430200 	ori	v1,v0,0x200
80017d0c:	8fc20028 	lw	v0,40(s8)
80017d10:	00000000 	nop
80017d14:	ac4300d0 	sw	v1,208(v0)
/home/git/21373271/21373271/kern/syscall_all.c:512
		e->env_ipc_recving = 0;
80017d18:	8fc20028 	lw	v0,40(s8)
80017d1c:	00000000 	nop
80017d20:	ac4000c8 	sw	zero,200(v0)
/home/git/21373271/21373271/kern/syscall_all.c:517

	/* Step 5: Set the target's status to 'ENV_RUNNABLE' again and insert it to the tail of
	 * 'env_sched_list'. */
	/* Exercise 4.8: Your code here. (7/8) */
		e->env_status = ENV_RUNNABLE;
80017d24:	8fc20028 	lw	v0,40(s8)
80017d28:	24030001 	li	v1,1
80017d2c:	ac4300ac 	sw	v1,172(v0)
/home/git/21373271/21373271/kern/syscall_all.c:518
		TAILQ_INSERT_TAIL(&env_sched_list,e,env_sched_link);
80017d30:	8fc20028 	lw	v0,40(s8)
80017d34:	00000000 	nop
80017d38:	ac4000b4 	sw	zero,180(v0)
80017d3c:	3c028007 	lui	v0,0x8007
80017d40:	2442b004 	addiu	v0,v0,-20476
80017d44:	8c430004 	lw	v1,4(v0)
80017d48:	8fc20028 	lw	v0,40(s8)
80017d4c:	00000000 	nop
80017d50:	ac4300b8 	sw	v1,184(v0)
80017d54:	3c028007 	lui	v0,0x8007
80017d58:	2442b004 	addiu	v0,v0,-20476
80017d5c:	8c420004 	lw	v0,4(v0)
80017d60:	8fc30028 	lw	v1,40(s8)
80017d64:	00000000 	nop
80017d68:	ac430000 	sw	v1,0(v0)
80017d6c:	8fc20028 	lw	v0,40(s8)
80017d70:	00000000 	nop
80017d74:	244300b4 	addiu	v1,v0,180
80017d78:	3c028007 	lui	v0,0x8007
80017d7c:	2442b004 	addiu	v0,v0,-20476
80017d80:	ac430004 	sw	v1,4(v0)
/home/git/21373271/21373271/kern/syscall_all.c:522
	/* Step 6: If 'srcva' is not zero, map the page at 'srcva' in 'curenv' to 'e->env_ipc_dstva'
	 * in 'e'. */
	/* Return -E_INVAL if 'srcva' is not zero and not mapped in 'curenv'. */
		if (srcva != 0) {
80017d84:	8fc201d4 	lw	v0,468(s8)
80017d88:	00000000 	nop
80017d8c:	1040002f 	beqz	v0,80017e4c <sys_ipc_try_send_father+0x300>
80017d90:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:525
		/* Exercise 4.8: Your code here. (8/8) */
		//p = page_lookup(curenv->pgdir,srcva,&ppte);
			if ( (p = page_lookup(curenv->env_pgdir,srcva,&ppte)) == NULL )
80017d94:	3c028007 	lui	v0,0x8007
80017d98:	8c42b000 	lw	v0,-20480(v0)
80017d9c:	00000000 	nop
80017da0:	8c4200b0 	lw	v0,176(v0)
80017da4:	27c30034 	addiu	v1,s8,52
80017da8:	00603025 	move	a2,v1
80017dac:	8fc501d4 	lw	a1,468(s8)
80017db0:	00402025 	move	a0,v0
80017db4:	0c0053a2 	jal	80014e88 <page_lookup>
80017db8:	00000000 	nop
80017dbc:	afc2002c 	sw	v0,44(s8)
80017dc0:	8fc2002c 	lw	v0,44(s8)
80017dc4:	00000000 	nop
80017dc8:	14400004 	bnez	v0,80017ddc <sys_ipc_try_send_father+0x290>
80017dcc:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:527
			{
				return -E_INVAL;
80017dd0:	2402fffd 	li	v0,-3
80017dd4:	10000028 	b	80017e78 <sys_ipc_try_send_father+0x32c>
80017dd8:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:529
			}
			if ( (ret = page_insert(e->env_pgdir,e->env_asid,p,e->env_ipc_dstva,e->env_ipc_perm)) < 0)
80017ddc:	8fc20028 	lw	v0,40(s8)
80017de0:	00000000 	nop
80017de4:	8c4300b0 	lw	v1,176(v0)
80017de8:	8fc20028 	lw	v0,40(s8)
80017dec:	00000000 	nop
80017df0:	8c4400a4 	lw	a0,164(v0)
80017df4:	8fc20028 	lw	v0,40(s8)
80017df8:	00000000 	nop
80017dfc:	8c4500cc 	lw	a1,204(v0)
80017e00:	8fc20028 	lw	v0,40(s8)
80017e04:	00000000 	nop
80017e08:	8c4200d0 	lw	v0,208(v0)
80017e0c:	00000000 	nop
80017e10:	afa20010 	sw	v0,16(sp)
80017e14:	00a03825 	move	a3,a1
80017e18:	8fc6002c 	lw	a2,44(s8)
80017e1c:	00802825 	move	a1,a0
80017e20:	00602025 	move	a0,v1
80017e24:	0c00533a 	jal	80014ce8 <page_insert>
80017e28:	00000000 	nop
80017e2c:	afc20024 	sw	v0,36(s8)
80017e30:	8fc20024 	lw	v0,36(s8)
80017e34:	00000000 	nop
80017e38:	04410004 	bgez	v0,80017e4c <sys_ipc_try_send_father+0x300>
80017e3c:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:531
			{
			return ret;
80017e40:	8fc20024 	lw	v0,36(s8)
80017e44:	1000000c 	b	80017e78 <sys_ipc_try_send_father+0x32c>
80017e48:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:507 (discriminator 2)
	for (int i = 0 ;i< mem_count;i++) {
80017e4c:	8fc20020 	lw	v0,32(s8)
80017e50:	00000000 	nop
80017e54:	24420001 	addiu	v0,v0,1
80017e58:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/kern/syscall_all.c:507 (discriminator 1)
80017e5c:	8fc30020 	lw	v1,32(s8)
80017e60:	8fc20018 	lw	v0,24(s8)
80017e64:	00000000 	nop
80017e68:	0062102a 	slt	v0,v1,v0
80017e6c:	1440ff91 	bnez	v0,80017cb4 <sys_ipc_try_send_father+0x168>
80017e70:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:535
			}	
		}
	}
	return 0;
80017e74:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:536 (discriminator 1)
}
80017e78:	03c0e825 	move	sp,s8
80017e7c:	8fbf01cc 	lw	ra,460(sp)
80017e80:	8fbe01c8 	lw	s8,456(sp)
80017e84:	27bd01d0 	addiu	sp,sp,464
80017e88:	03e00008 	jr	ra
80017e8c:	00000000 	nop

80017e90 <sys_cgetc>:
sys_cgetc():
/home/git/21373271/21373271/kern/syscall_all.c:541



// XXX: kernel does busy waiting here, blocking all envs
int sys_cgetc(void) {
80017e90:	27bdffe0 	addiu	sp,sp,-32
80017e94:	afbf001c 	sw	ra,28(sp)
80017e98:	afbe0018 	sw	s8,24(sp)
80017e9c:	03a0f025 	move	s8,sp
/home/git/21373271/21373271/kern/syscall_all.c:543
	int ch;
	while ((ch = scancharc()) == 0) {
80017ea0:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:543 (discriminator 1)
80017ea4:	0c004643 	jal	8001190c <scancharc>
80017ea8:	00000000 	nop
80017eac:	afc20010 	sw	v0,16(s8)
80017eb0:	8fc20010 	lw	v0,16(s8)
80017eb4:	00000000 	nop
80017eb8:	1040fffa 	beqz	v0,80017ea4 <sys_cgetc+0x14>
80017ebc:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:545
	}
	return ch;
80017ec0:	8fc20010 	lw	v0,16(s8)
/home/git/21373271/21373271/kern/syscall_all.c:546
}
80017ec4:	03c0e825 	move	sp,s8
80017ec8:	8fbf001c 	lw	ra,28(sp)
80017ecc:	8fbe0018 	lw	s8,24(sp)
80017ed0:	27bd0020 	addiu	sp,sp,32
80017ed4:	03e00008 	jr	ra
80017ed8:	00000000 	nop

80017edc <sys_write_dev>:
sys_write_dev():
/home/git/21373271/21373271/kern/syscall_all.c:574
 *	|  console   | 0x10000000 | 0x20   | (dev_cons.h)
 *	|  IDE disk  | 0x13000000 | 0x4200 | (dev_disk.h)
 *	|    rtc     | 0x15000000 | 0x200  | (dev_rtc.h)
 *	* ---------------------------------*
 */
int sys_write_dev(u_int va, u_int pa, u_int len) {
80017edc:	27bdfff8 	addiu	sp,sp,-8
80017ee0:	afbe0004 	sw	s8,4(sp)
80017ee4:	03a0f025 	move	s8,sp
80017ee8:	afc40008 	sw	a0,8(s8)
80017eec:	afc5000c 	sw	a1,12(s8)
80017ef0:	afc60010 	sw	a2,16(s8)
/home/git/21373271/21373271/kern/syscall_all.c:577
	/* Exercise 5.1: Your code here. (1/2) */

	return 0;
80017ef4:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:578
}
80017ef8:	03c0e825 	move	sp,s8
80017efc:	8fbe0004 	lw	s8,4(sp)
80017f00:	27bd0008 	addiu	sp,sp,8
80017f04:	03e00008 	jr	ra
80017f08:	00000000 	nop

80017f0c <sys_read_dev>:
sys_read_dev():
/home/git/21373271/21373271/kern/syscall_all.c:591
 *  Return 0 on success.
 *  Return -E_INVAL on bad address.
 *
 * Hint: You MUST use 'memcpy' to copy data after checking the validity.
 */
int sys_read_dev(u_int va, u_int pa, u_int len) {
80017f0c:	27bdfff8 	addiu	sp,sp,-8
80017f10:	afbe0004 	sw	s8,4(sp)
80017f14:	03a0f025 	move	s8,sp
80017f18:	afc40008 	sw	a0,8(s8)
80017f1c:	afc5000c 	sw	a1,12(s8)
80017f20:	afc60010 	sw	a2,16(s8)
/home/git/21373271/21373271/kern/syscall_all.c:594
	/* Exercise 5.1: Your code here. (2/2) */

	return 0;
80017f24:	00001025 	move	v0,zero
/home/git/21373271/21373271/kern/syscall_all.c:595
}
80017f28:	03c0e825 	move	sp,s8
80017f2c:	8fbe0004 	lw	s8,4(sp)
80017f30:	27bd0008 	addiu	sp,sp,8
80017f34:	03e00008 	jr	ra
80017f38:	00000000 	nop

80017f3c <do_syscall>:
do_syscall():
/home/git/21373271/21373271/kern/syscall_all.c:629
 *   Use sysno from $a0 to dispatch the syscall.
 *   The possible arguments are stored at $a1, $a2, $a3, [$sp + 16 bytes], [$sp + 20 bytes] in
 *   order.
 *   Number of arguments cannot exceed 5.
 */
void do_syscall(struct Trapframe *tf) {
80017f3c:	27bdffc0 	addiu	sp,sp,-64
80017f40:	afbf003c 	sw	ra,60(sp)
80017f44:	afbe0038 	sw	s8,56(sp)
80017f48:	03a0f025 	move	s8,sp
80017f4c:	afc40040 	sw	a0,64(s8)
/home/git/21373271/21373271/kern/syscall_all.c:631
	int (*func)(u_int, u_int, u_int, u_int, u_int);
	int sysno = tf->regs[4];
80017f50:	8fc20040 	lw	v0,64(s8)
80017f54:	00000000 	nop
80017f58:	8c420010 	lw	v0,16(v0)
80017f5c:	00000000 	nop
80017f60:	afc20018 	sw	v0,24(s8)
/home/git/21373271/21373271/kern/syscall_all.c:632
	if (sysno < 0 || sysno >= MAX_SYSNO) {
80017f64:	8fc20018 	lw	v0,24(s8)
80017f68:	00000000 	nop
80017f6c:	04400006 	bltz	v0,80017f88 <do_syscall+0x4c>
80017f70:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:632 (discriminator 1)
80017f74:	8fc20018 	lw	v0,24(s8)
80017f78:	00000000 	nop
80017f7c:	28420013 	slti	v0,v0,19
80017f80:	14400006 	bnez	v0,80017f9c <do_syscall+0x60>
80017f84:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:633
		tf->regs[2] = -E_NO_SYS;
80017f88:	8fc20040 	lw	v0,64(s8)
80017f8c:	2403fffb 	li	v1,-5
80017f90:	ac430008 	sw	v1,8(v0)
/home/git/21373271/21373271/kern/syscall_all.c:634
		return;
80017f94:	1000003f 	b	80018094 <do_syscall+0x158>
80017f98:	00000000 	nop
/home/git/21373271/21373271/kern/syscall_all.c:639
	}

	/* Step 1: Add the EPC in 'tf' by a word (size of an instruction). */
	/* Exercise 4.2: Your code here. (1/4) */
	tf->cp0_epc = tf->cp0_epc + 4;
80017f9c:	8fc20040 	lw	v0,64(s8)
80017fa0:	00000000 	nop
80017fa4:	8c420094 	lw	v0,148(v0)
80017fa8:	00000000 	nop
80017fac:	24430004 	addiu	v1,v0,4
80017fb0:	8fc20040 	lw	v0,64(s8)
80017fb4:	00000000 	nop
80017fb8:	ac430094 	sw	v1,148(v0)
/home/git/21373271/21373271/kern/syscall_all.c:642
	/* Step 2: Use 'sysno' to get 'func' from 'syscall_table'. */
	/* Exercise 4.2: Your code here. (2/4) */
	func = syscall_table[sysno];
80017fbc:	3c028002 	lui	v0,0x8002
80017fc0:	8fc30018 	lw	v1,24(s8)
80017fc4:	00000000 	nop
80017fc8:	00031880 	sll	v1,v1,0x2
80017fcc:	24429600 	addiu	v0,v0,-27136
80017fd0:	00621021 	addu	v0,v1,v0
80017fd4:	8c420000 	lw	v0,0(v0)
80017fd8:	00000000 	nop
80017fdc:	afc2001c 	sw	v0,28(s8)
/home/git/21373271/21373271/kern/syscall_all.c:644
	/* Step 3: First 3 args are stored in $a1, $a2, $a3. */
	u_int arg1 = tf->regs[5];
80017fe0:	8fc20040 	lw	v0,64(s8)
80017fe4:	00000000 	nop
80017fe8:	8c420014 	lw	v0,20(v0)
80017fec:	00000000 	nop
80017ff0:	afc20020 	sw	v0,32(s8)
/home/git/21373271/21373271/kern/syscall_all.c:645
	u_int arg2 = tf->regs[6];
80017ff4:	8fc20040 	lw	v0,64(s8)
80017ff8:	00000000 	nop
80017ffc:	8c420018 	lw	v0,24(v0)
80018000:	00000000 	nop
80018004:	afc20024 	sw	v0,36(s8)
/home/git/21373271/21373271/kern/syscall_all.c:646
	u_int arg3 = tf->regs[7];
80018008:	8fc20040 	lw	v0,64(s8)
8001800c:	00000000 	nop
80018010:	8c42001c 	lw	v0,28(v0)
80018014:	00000000 	nop
80018018:	afc20028 	sw	v0,40(s8)
/home/git/21373271/21373271/kern/syscall_all.c:651

	/* Step 4: Last 2 args are stored in stack at [$sp + 16 bytes], [$sp + 20 bytes]. */
	u_int arg4, arg5;
	/* Exercise 4.2: Your code here. (3/4) */
	arg4 = *(u_int *)(tf->regs[29]+16);
8001801c:	8fc20040 	lw	v0,64(s8)
80018020:	00000000 	nop
80018024:	8c420074 	lw	v0,116(v0)
80018028:	00000000 	nop
8001802c:	24420010 	addiu	v0,v0,16
80018030:	8c420000 	lw	v0,0(v0)
80018034:	00000000 	nop
80018038:	afc2002c 	sw	v0,44(s8)
/home/git/21373271/21373271/kern/syscall_all.c:652
	arg5 = *(u_int *)(tf->regs[29]+20);
8001803c:	8fc20040 	lw	v0,64(s8)
80018040:	00000000 	nop
80018044:	8c420074 	lw	v0,116(v0)
80018048:	00000000 	nop
8001804c:	24420014 	addiu	v0,v0,20
80018050:	8c420000 	lw	v0,0(v0)
80018054:	00000000 	nop
80018058:	afc20030 	sw	v0,48(s8)
/home/git/21373271/21373271/kern/syscall_all.c:656
	/* Step 5: Invoke 'func' with retrieved arguments and store its return value to $v0 in 'tf'.
	 */
	/* Exercise 4.2: Your code here. (4/4) */
	tf->regs[2] = (*func)(arg1,arg2,arg3,arg4,arg5);
8001805c:	8fc20030 	lw	v0,48(s8)
80018060:	00000000 	nop
80018064:	afa20010 	sw	v0,16(sp)
80018068:	8fc2001c 	lw	v0,28(s8)
8001806c:	8fc7002c 	lw	a3,44(s8)
80018070:	8fc60028 	lw	a2,40(s8)
80018074:	8fc50024 	lw	a1,36(s8)
80018078:	8fc40020 	lw	a0,32(s8)
8001807c:	0040f809 	jalr	v0
80018080:	00000000 	nop
80018084:	00401825 	move	v1,v0
80018088:	8fc20040 	lw	v0,64(s8)
8001808c:	00000000 	nop
80018090:	ac430008 	sw	v1,8(v0)
/home/git/21373271/21373271/kern/syscall_all.c:657
}
80018094:	03c0e825 	move	sp,s8
80018098:	8fbf003c 	lw	ra,60(sp)
8001809c:	8fbe0038 	lw	s8,56(sp)
800180a0:	27bd0040 	addiu	sp,sp,64
800180a4:	03e00008 	jr	ra
800180a8:	00000000 	nop
800180ac:	00000000 	nop

800180b0 <tlb_out>:
tlb_out():
/home/git/21373271/21373271/kern/tlb_asm.S:5
#include <asm/asm.h>

LEAF(tlb_out)
.set noreorder
	mfc0    t0, CP0_ENTRYHI
800180b0:	40085000 	mfc0	t0,c0_entryhi
/home/git/21373271/21373271/kern/tlb_asm.S:6
	mtc0    a0, CP0_ENTRYHI
800180b4:	40845000 	mtc0	a0,c0_entryhi
/home/git/21373271/21373271/kern/tlb_asm.S:7
	nop
800180b8:	00000000 	nop
/home/git/21373271/21373271/kern/tlb_asm.S:10
	/* Step 1: Use 'tlbp' to probe TLB entry */
	/* Exercise 2.8: Your code here. (1/2) */
	tlbp
800180bc:	42000008 	tlbp
/home/git/21373271/21373271/kern/tlb_asm.S:11
	nop
800180c0:	00000000 	nop
/home/git/21373271/21373271/kern/tlb_asm.S:13
	/* Step 2: Fetch the probe result from CP0.Index */
	mfc0    t1, CP0_INDEX
800180c4:	40090000 	mfc0	t1,c0_index
800180c8:	00000000 	nop
/home/git/21373271/21373271/kern/tlb_asm.S:15
.set reorder
	bltz    t1, NO_SUCH_ENTRY
800180cc:	05200006 	bltz	t1,800180e8 <NO_SUCH_ENTRY>
800180d0:	00000000 	nop
/home/git/21373271/21373271/kern/tlb_asm.S:17
.set noreorder
	mtc0    zero, CP0_ENTRYHI
800180d4:	40805000 	mtc0	zero,c0_entryhi
/home/git/21373271/21373271/kern/tlb_asm.S:18
	mtc0    zero, CP0_ENTRYLO0
800180d8:	40801000 	mtc0	zero,c0_entrylo
/home/git/21373271/21373271/kern/tlb_asm.S:19
	nop
800180dc:	00000000 	nop
/home/git/21373271/21373271/kern/tlb_asm.S:22
	/* Step 3: Use 'tlbwi' to write CP0.EntryHi/Lo into TLB at CP0.Index  */
	/* Exercise 2.8: Your code here. (2/2) */
	tlbwi
800180e0:	42000002 	tlbwi
/home/git/21373271/21373271/kern/tlb_asm.S:23
	nop
800180e4:	00000000 	nop

800180e8 <NO_SUCH_ENTRY>:
/home/git/21373271/21373271/kern/tlb_asm.S:27
.set reorder

NO_SUCH_ENTRY:
	mtc0    t0, CP0_ENTRYHI
800180e8:	40885000 	mtc0	t0,c0_entryhi
/home/git/21373271/21373271/kern/tlb_asm.S:28
	j       ra
800180ec:	03e00008 	jr	ra
800180f0:	00000000 	nop

800180f4 <do_tlb_refill>:
do_tlb_refill():
/home/git/21373271/21373271/kern/tlb_asm.S:36
.data
tlb_refill_ra:
.word 0
.text
NESTED(do_tlb_refill, 0, zero)
	mfc0    a0, CP0_BADVADDR
800180f4:	40044000 	mfc0	a0,c0_badvaddr
/home/git/21373271/21373271/kern/tlb_asm.S:37
	mfc0    a1, CP0_ENTRYHI
800180f8:	40055000 	mfc0	a1,c0_entryhi
800180fc:	00000000 	nop
/home/git/21373271/21373271/kern/tlb_asm.S:38
	srl     a1, a1, 6
80018100:	00052982 	srl	a1,a1,0x6
/home/git/21373271/21373271/kern/tlb_asm.S:39
	andi    a1, a1, 0b111111
80018104:	30a5003f 	andi	a1,a1,0x3f
/home/git/21373271/21373271/kern/tlb_asm.S:40
	sw      ra, tlb_refill_ra
80018108:	3c018002 	lui	at,0x8002
8001810c:	ac3f9650 	sw	ra,-27056(at)
/home/git/21373271/21373271/kern/tlb_asm.S:41
	jal     _do_tlb_refill
80018110:	0c0060e8 	jal	800183a0 <_do_tlb_refill>
80018114:	00000000 	nop
/home/git/21373271/21373271/kern/tlb_asm.S:42
	lw      ra, tlb_refill_ra
80018118:	3c1f8002 	lui	ra,0x8002
8001811c:	8fff9650 	lw	ra,-27056(ra)
/home/git/21373271/21373271/kern/tlb_asm.S:43
	mtc0    v0, CP0_ENTRYLO0
80018120:	40821000 	mtc0	v0,c0_entrylo
/home/git/21373271/21373271/kern/tlb_asm.S:45
	// See <IDT R30xx Family Software Reference Manual> Chapter 6-8
	nop
80018124:	00000000 	nop
/home/git/21373271/21373271/kern/tlb_asm.S:48
	/* Hint: use 'tlbwr' to write CP0.EntryHi/Lo into a random tlb entry. */
	/* Exercise 2.10: Your code here. */
	tlbwr
80018128:	42000006 	tlbwr
/home/git/21373271/21373271/kern/tlb_asm.S:49
	nop
8001812c:	00000000 	nop
/home/git/21373271/21373271/kern/tlb_asm.S:50
	jr      ra
80018130:	03e00008 	jr	ra
80018134:	00000000 	nop
	...

80018140 <passive_alloc>:
passive_alloc():
/home/git/21373271/21373271/kern/tlbex.c:4
#include <env.h>
#include <pmap.h>

static void passive_alloc(u_int va, Pde *pgdir, u_int asid) {
80018140:	27bdffd0 	addiu	sp,sp,-48
80018144:	afbf002c 	sw	ra,44(sp)
80018148:	afbe0028 	sw	s8,40(sp)
8001814c:	03a0f025 	move	s8,sp
80018150:	afc40030 	sw	a0,48(s8)
80018154:	afc50034 	sw	a1,52(s8)
80018158:	afc60038 	sw	a2,56(s8)
/home/git/21373271/21373271/kern/tlbex.c:5
	struct Page *p = NULL;
8001815c:	afc00020 	sw	zero,32(s8)
/home/git/21373271/21373271/kern/tlbex.c:7

	if (va < UTEMP) {
80018160:	8fc30030 	lw	v1,48(s8)
80018164:	3c02003f 	lui	v0,0x3f
80018168:	3442e000 	ori	v0,v0,0xe000
8001816c:	0062102b 	sltu	v0,v1,v0
80018170:	1040000a 	beqz	v0,8001819c <passive_alloc+0x5c>
80018174:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:8
		panic("address too low");
80018178:	3c028002 	lui	v0,0x8002
8001817c:	244794d0 	addiu	a3,v0,-27440
80018180:	3c028002 	lui	v0,0x8002
80018184:	244695a8 	addiu	a2,v0,-27224
80018188:	24050008 	li	a1,8
8001818c:	3c028002 	lui	v0,0x8002
80018190:	244494e0 	addiu	a0,v0,-27424
80018194:	0c004f90 	jal	80013e40 <_panic>
80018198:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:11
	}

	if (va >= USTACKTOP && va < USTACKTOP + BY2PG) {
8001819c:	8fc30030 	lw	v1,48(s8)
800181a0:	3c027f3f 	lui	v0,0x7f3f
800181a4:	3442e000 	ori	v0,v0,0xe000
800181a8:	0062102b 	sltu	v0,v1,v0
800181ac:	14400010 	bnez	v0,800181f0 <passive_alloc+0xb0>
800181b0:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:11 (discriminator 1)
800181b4:	8fc30030 	lw	v1,48(s8)
800181b8:	3c027f3f 	lui	v0,0x7f3f
800181bc:	3442f000 	ori	v0,v0,0xf000
800181c0:	0062102b 	sltu	v0,v1,v0
800181c4:	1040000a 	beqz	v0,800181f0 <passive_alloc+0xb0>
800181c8:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:12
		panic("invalid memory");
800181cc:	3c028002 	lui	v0,0x8002
800181d0:	244794e8 	addiu	a3,v0,-27416
800181d4:	3c028002 	lui	v0,0x8002
800181d8:	244695a8 	addiu	a2,v0,-27224
800181dc:	2405000c 	li	a1,12
800181e0:	3c028002 	lui	v0,0x8002
800181e4:	244494e0 	addiu	a0,v0,-27424
800181e8:	0c004f90 	jal	80013e40 <_panic>
800181ec:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:15
	}

	if (va >= UENVS && va < UPAGES) {
800181f0:	8fc30030 	lw	v1,48(s8)
800181f4:	3c027f40 	lui	v0,0x7f40
800181f8:	0062102b 	sltu	v0,v1,v0
800181fc:	1440000f 	bnez	v0,8001823c <passive_alloc+0xfc>
80018200:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:15 (discriminator 1)
80018204:	8fc30030 	lw	v1,48(s8)
80018208:	3c027f80 	lui	v0,0x7f80
8001820c:	0062102b 	sltu	v0,v1,v0
80018210:	1040000a 	beqz	v0,8001823c <passive_alloc+0xfc>
80018214:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:16
		panic("envs zone");
80018218:	3c028002 	lui	v0,0x8002
8001821c:	244794f8 	addiu	a3,v0,-27400
80018220:	3c028002 	lui	v0,0x8002
80018224:	244695a8 	addiu	a2,v0,-27224
80018228:	24050010 	li	a1,16
8001822c:	3c028002 	lui	v0,0x8002
80018230:	244494e0 	addiu	a0,v0,-27424
80018234:	0c004f90 	jal	80013e40 <_panic>
80018238:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:19
	}

	if (va >= UPAGES && va < UVPT) {
8001823c:	8fc30030 	lw	v1,48(s8)
80018240:	3c027f80 	lui	v0,0x7f80
80018244:	0062102b 	sltu	v0,v1,v0
80018248:	1440000f 	bnez	v0,80018288 <passive_alloc+0x148>
8001824c:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:19 (discriminator 1)
80018250:	8fc30030 	lw	v1,48(s8)
80018254:	3c027fc0 	lui	v0,0x7fc0
80018258:	0062102b 	sltu	v0,v1,v0
8001825c:	1040000a 	beqz	v0,80018288 <passive_alloc+0x148>
80018260:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:20
		panic("pages zone");
80018264:	3c028002 	lui	v0,0x8002
80018268:	24479504 	addiu	a3,v0,-27388
8001826c:	3c028002 	lui	v0,0x8002
80018270:	244695a8 	addiu	a2,v0,-27224
80018274:	24050014 	li	a1,20
80018278:	3c028002 	lui	v0,0x8002
8001827c:	244494e0 	addiu	a0,v0,-27424
80018280:	0c004f90 	jal	80013e40 <_panic>
80018284:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:23
	}

	if (va >= ULIM) {
80018288:	8fc20030 	lw	v0,48(s8)
8001828c:	00000000 	nop
80018290:	0441000a 	bgez	v0,800182bc <passive_alloc+0x17c>
80018294:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:24
		panic("kernel address");
80018298:	3c028002 	lui	v0,0x8002
8001829c:	24479510 	addiu	a3,v0,-27376
800182a0:	3c028002 	lui	v0,0x8002
800182a4:	244695a8 	addiu	a2,v0,-27224
800182a8:	24050018 	li	a1,24
800182ac:	3c028002 	lui	v0,0x8002
800182b0:	244494e0 	addiu	a0,v0,-27424
800182b4:	0c004f90 	jal	80013e40 <_panic>
800182b8:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:27
	}

	panic_on(page_alloc(&p));
800182bc:	27c20020 	addiu	v0,s8,32
800182c0:	00402025 	move	a0,v0
800182c4:	0c00525c 	jal	80014970 <page_alloc>
800182c8:	00000000 	nop
800182cc:	afc20018 	sw	v0,24(s8)
800182d0:	8fc20018 	lw	v0,24(s8)
800182d4:	00000000 	nop
800182d8:	1040000d 	beqz	v0,80018310 <passive_alloc+0x1d0>
800182dc:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:27 (discriminator 1)
800182e0:	8fc20018 	lw	v0,24(s8)
800182e4:	00000000 	nop
800182e8:	afa20010 	sw	v0,16(sp)
800182ec:	3c028002 	lui	v0,0x8002
800182f0:	24479520 	addiu	a3,v0,-27360
800182f4:	3c028002 	lui	v0,0x8002
800182f8:	244695a8 	addiu	a2,v0,-27224
800182fc:	2405001b 	li	a1,27
80018300:	3c028002 	lui	v0,0x8002
80018304:	244494e0 	addiu	a0,v0,-27424
80018308:	0c004f90 	jal	80013e40 <_panic>
8001830c:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:28
	panic_on(page_insert(pgdir, asid, p, PTE_ADDR(va), PTE_D));
80018310:	8fc40020 	lw	a0,32(s8)
80018314:	8fc30030 	lw	v1,48(s8)
80018318:	2402f000 	li	v0,-4096
8001831c:	00621824 	and	v1,v1,v0
80018320:	24020400 	li	v0,1024
80018324:	afa20010 	sw	v0,16(sp)
80018328:	00603825 	move	a3,v1
8001832c:	00803025 	move	a2,a0
80018330:	8fc50038 	lw	a1,56(s8)
80018334:	8fc40034 	lw	a0,52(s8)
80018338:	0c00533a 	jal	80014ce8 <page_insert>
8001833c:	00000000 	nop
80018340:	afc2001c 	sw	v0,28(s8)
80018344:	8fc2001c 	lw	v0,28(s8)
80018348:	00000000 	nop
8001834c:	1040000d 	beqz	v0,80018384 <passive_alloc+0x244>
80018350:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:28 (discriminator 1)
80018354:	8fc2001c 	lw	v0,28(s8)
80018358:	00000000 	nop
8001835c:	afa20010 	sw	v0,16(sp)
80018360:	3c028002 	lui	v0,0x8002
80018364:	24479540 	addiu	a3,v0,-27328
80018368:	3c028002 	lui	v0,0x8002
8001836c:	244695a8 	addiu	a2,v0,-27224
80018370:	2405001c 	li	a1,28
80018374:	3c028002 	lui	v0,0x8002
80018378:	244494e0 	addiu	a0,v0,-27424
8001837c:	0c004f90 	jal	80013e40 <_panic>
80018380:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:29
}
80018384:	00000000 	nop
80018388:	03c0e825 	move	sp,s8
8001838c:	8fbf002c 	lw	ra,44(sp)
80018390:	8fbe0028 	lw	s8,40(sp)
80018394:	27bd0030 	addiu	sp,sp,48
80018398:	03e00008 	jr	ra
8001839c:	00000000 	nop

800183a0 <_do_tlb_refill>:
_do_tlb_refill():
/home/git/21373271/21373271/kern/tlbex.c:34

/* Overview:
 *  Refill TLB.
 */
Pte _do_tlb_refill(u_long va, u_int asid) {
800183a0:	27bdffe0 	addiu	sp,sp,-32
800183a4:	afbf001c 	sw	ra,28(sp)
800183a8:	afbe0018 	sw	s8,24(sp)
800183ac:	03a0f025 	move	s8,sp
800183b0:	afc40020 	sw	a0,32(s8)
800183b4:	afc50024 	sw	a1,36(s8)
/home/git/21373271/21373271/kern/tlbex.c:45
	 *  **While** 'page_lookup' returns 'NULL', indicating that the 'pte' could not be found,
	 *  allocate a new page using 'passive_alloc' until 'page_lookup' succeeds.
	 */

	/* Exercise 2.9: Your code here. */
	while (page_lookup(cur_pgdir,va,&pte) == NULL)
800183b8:	10000008 	b	800183dc <_do_tlb_refill+0x3c>
800183bc:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:47
	{	
		passive_alloc(va,cur_pgdir,asid);
800183c0:	3c028007 	lui	v0,0x8007
800183c4:	8c42b024 	lw	v0,-20444(v0)
800183c8:	8fc60024 	lw	a2,36(s8)
800183cc:	00402825 	move	a1,v0
800183d0:	8fc40020 	lw	a0,32(s8)
800183d4:	0c006050 	jal	80018140 <passive_alloc>
800183d8:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:45
	while (page_lookup(cur_pgdir,va,&pte) == NULL)
800183dc:	3c028007 	lui	v0,0x8007
800183e0:	8c42b024 	lw	v0,-20444(v0)
800183e4:	27c30010 	addiu	v1,s8,16
800183e8:	00603025 	move	a2,v1
800183ec:	8fc50020 	lw	a1,32(s8)
800183f0:	00402025 	move	a0,v0
800183f4:	0c0053a2 	jal	80014e88 <page_lookup>
800183f8:	00000000 	nop
800183fc:	1040fff0 	beqz	v0,800183c0 <_do_tlb_refill+0x20>
80018400:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:49
	}
	return *pte;
80018404:	8fc20010 	lw	v0,16(s8)
80018408:	00000000 	nop
8001840c:	8c420000 	lw	v0,0(v0)
/home/git/21373271/21373271/kern/tlbex.c:50
}
80018410:	03c0e825 	move	sp,s8
80018414:	8fbf001c 	lw	ra,28(sp)
80018418:	8fbe0018 	lw	s8,24(sp)
8001841c:	27bd0020 	addiu	sp,sp,32
80018420:	03e00008 	jr	ra
80018424:	00000000 	nop

80018428 <do_tlb_mod>:
do_tlb_mod():
/home/git/21373271/21373271/kern/tlbex.c:64
 *   'env_user_tlb_mod_entry' is the user space entry registered using
 *   'sys_set_user_tlb_mod_entry'.
 *
 *   The user entry should handle this TLB Mod exception and restore the context.
 */
void do_tlb_mod(struct Trapframe *tf) {
80018428:	27bdff50 	addiu	sp,sp,-176
8001842c:	afbf00ac 	sw	ra,172(sp)
80018430:	afbe00a8 	sw	s8,168(sp)
80018434:	03a0f025 	move	s8,sp
80018438:	afc400b0 	sw	a0,176(s8)
/home/git/21373271/21373271/kern/tlbex.c:65
	struct Trapframe tmp_tf = *tf;
8001843c:	8fc200b0 	lw	v0,176(s8)
80018440:	27c40010 	addiu	a0,s8,16
80018444:	00401825 	move	v1,v0
80018448:	24020098 	li	v0,152
8001844c:	00403025 	move	a2,v0
80018450:	00602825 	move	a1,v1
80018454:	0c0044a8 	jal	800112a0 <memcpy>
80018458:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:67

	if (tf->regs[29] < USTACKTOP || tf->regs[29] >= UXSTACKTOP) {
8001845c:	8fc200b0 	lw	v0,176(s8)
80018460:	00000000 	nop
80018464:	8c430074 	lw	v1,116(v0)
80018468:	3c027f3f 	lui	v0,0x7f3f
8001846c:	3442e000 	ori	v0,v0,0xe000
80018470:	0062102b 	sltu	v0,v1,v0
80018474:	14400008 	bnez	v0,80018498 <do_tlb_mod+0x70>
80018478:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:67 (discriminator 1)
8001847c:	8fc200b0 	lw	v0,176(s8)
80018480:	00000000 	nop
80018484:	8c430074 	lw	v1,116(v0)
80018488:	3c027f40 	lui	v0,0x7f40
8001848c:	0062102b 	sltu	v0,v1,v0
80018490:	14400004 	bnez	v0,800184a4 <do_tlb_mod+0x7c>
80018494:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:68
		tf->regs[29] = UXSTACKTOP;
80018498:	8fc200b0 	lw	v0,176(s8)
8001849c:	3c037f40 	lui	v1,0x7f40
800184a0:	ac430074 	sw	v1,116(v0)
/home/git/21373271/21373271/kern/tlbex.c:70
	}
	tf->regs[29] -= sizeof(struct Trapframe);
800184a4:	8fc200b0 	lw	v0,176(s8)
800184a8:	00000000 	nop
800184ac:	8c420074 	lw	v0,116(v0)
800184b0:	00000000 	nop
800184b4:	2443ff68 	addiu	v1,v0,-152
800184b8:	8fc200b0 	lw	v0,176(s8)
800184bc:	00000000 	nop
800184c0:	ac430074 	sw	v1,116(v0)
/home/git/21373271/21373271/kern/tlbex.c:71
	*(struct Trapframe *)tf->regs[29] = tmp_tf;
800184c4:	8fc200b0 	lw	v0,176(s8)
800184c8:	00000000 	nop
800184cc:	8c420074 	lw	v0,116(v0)
800184d0:	00000000 	nop
800184d4:	00401825 	move	v1,v0
800184d8:	27c40010 	addiu	a0,s8,16
800184dc:	24020098 	li	v0,152
800184e0:	00403025 	move	a2,v0
800184e4:	00802825 	move	a1,a0
800184e8:	00602025 	move	a0,v1
800184ec:	0c0044a8 	jal	800112a0 <memcpy>
800184f0:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:73

	if (curenv->env_user_tlb_mod_entry) {
800184f4:	3c028007 	lui	v0,0x8007
800184f8:	8c42b000 	lw	v0,-20480(v0)
800184fc:	00000000 	nop
80018500:	8c4200d4 	lw	v0,212(v0)
80018504:	00000000 	nop
80018508:	10400018 	beqz	v0,8001856c <do_tlb_mod+0x144>
8001850c:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:74
		tf->regs[4] = tf->regs[29];
80018510:	8fc200b0 	lw	v0,176(s8)
80018514:	00000000 	nop
80018518:	8c430074 	lw	v1,116(v0)
8001851c:	8fc200b0 	lw	v0,176(s8)
80018520:	00000000 	nop
80018524:	ac430010 	sw	v1,16(v0)
/home/git/21373271/21373271/kern/tlbex.c:75
		tf->regs[29] -= sizeof(tf->regs[4]);
80018528:	8fc200b0 	lw	v0,176(s8)
8001852c:	00000000 	nop
80018530:	8c420074 	lw	v0,116(v0)
80018534:	00000000 	nop
80018538:	2443fffc 	addiu	v1,v0,-4
8001853c:	8fc200b0 	lw	v0,176(s8)
80018540:	00000000 	nop
80018544:	ac430074 	sw	v1,116(v0)
/home/git/21373271/21373271/kern/tlbex.c:78
		// Hint: Set 'cp0_epc' in the context 'tf' to 'curenv->env_user_tlb_mod_entry'.
		/* Exercise 4.11: Your code here. */
		tf->cp0_epc = curenv->env_user_tlb_mod_entry;
80018548:	3c028007 	lui	v0,0x8007
8001854c:	8c42b000 	lw	v0,-20480(v0)
80018550:	00000000 	nop
80018554:	8c4300d4 	lw	v1,212(v0)
80018558:	8fc200b0 	lw	v0,176(s8)
8001855c:	00000000 	nop
80018560:	ac430094 	sw	v1,148(v0)
/home/git/21373271/21373271/kern/tlbex.c:82
	} else {
		panic("TLB Mod but no user handler registered");
	}
}
80018564:	1000000a 	b	80018590 <do_tlb_mod+0x168>
80018568:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:80
		panic("TLB Mod but no user handler registered");
8001856c:	3c028002 	lui	v0,0x8002
80018570:	24479580 	addiu	a3,v0,-27264
80018574:	3c028002 	lui	v0,0x8002
80018578:	244695b8 	addiu	a2,v0,-27208
8001857c:	24050050 	li	a1,80
80018580:	3c028002 	lui	v0,0x8002
80018584:	244494e0 	addiu	a0,v0,-27424
80018588:	0c004f90 	jal	80013e40 <_panic>
8001858c:	00000000 	nop
/home/git/21373271/21373271/kern/tlbex.c:82
}
80018590:	00000000 	nop
80018594:	03c0e825 	move	sp,s8
80018598:	8fbf00ac 	lw	ra,172(sp)
8001859c:	8fbe00a8 	lw	s8,168(sp)
800185a0:	27bd00b0 	addiu	sp,sp,176
800185a4:	03e00008 	jr	ra
800185a8:	00000000 	nop
800185ac:	00000000 	nop

800185b0 <do_reserved>:
do_reserved():
/home/git/21373271/21373271/kern/traps.c:26

/* Overview:
 *   The fallback handler when an unknown exception code is encountered.
 *   'genex.S' wraps this function in 'handle_reserved'.
 */
void do_reserved(struct Trapframe *tf) {
800185b0:	27bdffe0 	addiu	sp,sp,-32
800185b4:	afbf001c 	sw	ra,28(sp)
800185b8:	afbe0018 	sw	s8,24(sp)
800185bc:	03a0f025 	move	s8,sp
800185c0:	afc40020 	sw	a0,32(s8)
/home/git/21373271/21373271/kern/traps.c:27
	print_tf(tf);
800185c4:	8fc40020 	lw	a0,32(s8)
800185c8:	0c005a27 	jal	8001689c <print_tf>
800185cc:	00000000 	nop
/home/git/21373271/21373271/kern/traps.c:28
	panic("Unknown ExcCode %2d", (tf->cp0_cause >> 2) & 0x1f);
800185d0:	8fc20020 	lw	v0,32(s8)
800185d4:	00000000 	nop
800185d8:	8c420090 	lw	v0,144(v0)
800185dc:	00000000 	nop
800185e0:	00021082 	srl	v0,v0,0x2
800185e4:	3042001f 	andi	v0,v0,0x1f
800185e8:	afa20010 	sw	v0,16(sp)
800185ec:	3c028002 	lui	v0,0x8002
800185f0:	244795d0 	addiu	a3,v0,-27184
800185f4:	3c028002 	lui	v0,0x8002
800185f8:	244695ec 	addiu	a2,v0,-27156
800185fc:	2405001c 	li	a1,28
80018600:	3c028002 	lui	v0,0x8002
80018604:	244495e4 	addiu	a0,v0,-27164
80018608:	0c004f90 	jal	80013e40 <_panic>
8001860c:	00000000 	nop
/home/git/21373271/21373271/kern/traps.c:29
}
80018610:	00000000 	nop
80018614:	03c0e825 	move	sp,s8
80018618:	8fbf001c 	lw	ra,28(sp)
8001861c:	8fbe0018 	lw	s8,24(sp)
80018620:	27bd0020 	addiu	sp,sp,32
80018624:	03e00008 	jr	ra
80018628:	00000000 	nop
8001862c:	00000000 	nop
